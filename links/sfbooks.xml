<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE status="unmaintained" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Favourite computer science books</TITLE>
<PATH>links/sfbooks.xml</PATH>
<DATE><YEAR>2015</YEAR><MONTH>6</MONTH><DAY>20</DAY></DATE>
<CONTENT>
<BLIST><TITLE>Here is a list of the computing books I prefer:</TITLE>
  <ITEM><X><T>Writing Solid Code</T><A>https://www.amazon.com/exec/obidos/ASIN/1556155514</A><L>en</L><F>HTML</F></X> - <AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Maguire</LASTNAME></AUTHOR><BR/>
    This book describes some basic methods to write more robust code (use of assertions, definition of the right API, fix the bugs now and not later…). The examples are written in C, but these recipes are available for any language. This is a must read.
  </ITEM>
  <ITEM><X><T>Effective C++</T><A>https://www.amazon.com/exec/obidos/ASIN/0201924889</A><L>en</L><F>HTML</F></X>  - <AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Meyers</LASTNAME></AUTHOR><BR/>
    This book lists 50 rules for C++. If you code in C++, you must read this book.
  </ITEM>
  <ITEM><X><T>More Effective C++</T><A>https://www.amazon.com/exec/obidos/ASIN/020163371X</A><L>en</L><F>HTML</F></X> - <AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Meyers</LASTNAME></AUTHOR><BR/>
    This is the complement of the previous book. I think it is less essential than the previous one (this is more coding tricks than real safety rules), but it is still a very good reading.
  </ITEM>
  <ITEM><X><T>Effective STL</T><A>https://www.amazon.com/exec/obidos/ASIN/0201749629</A><L>en</L><F>HTML</F></X> - <AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Meyers</LASTNAME></AUTHOR><BR/>
    Yet another book in the "Effective" series. Some good advice about the Standard Template Libary.
  </ITEM>
  <ITEM><X><T>Design Patterns</T><A>https://www.amazon.com/exec/obidos/ASIN/0201633612</A><L>en</L><F>HTML</F></X> - <AUTHOR><FIRSTNAME>Erich</FIRSTNAME><LASTNAME>Gamma</LASTNAME></AUTHOR>, <AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Helm</LASTNAME></AUTHOR>, <AUTHOR><FIRSTNAME>Ralph</FIRSTNAME><LASTNAME>Johnson</LASTNAME></AUTHOR>, and <AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Vlissides</LASTNAME></AUTHOR><BR/>
    If you are one of the few to not have read this book, you missing some good stuff. There is no genial brand new design here. But this book describes a way to document some basic architecture for training and reuse, and this is this pattern design methodology which is very ineresting.
  </ITEM>
  <ITEM><X><T>The Mythical Man-Month</T><A>https://www.amazon.com/exec/obidos/ASIN/0201835959</A><L>en</L><F>HTML</F></X> - <AUTHOR><FIRSTNAME>Frederick</FIRSTNAME><LASTNAME>Brooks</LASTNAME><NAMESUFFIX>Jr.</NAMESUFFIX></AUTHOR><BR/>
    This book has been written 40 years ago. Of course some Brooks points are now obsolete, but too many problems he describes are still existing today. This is a pity that some software managers have not learn these lessons. Do you think that in 25 years, the situation will be better?
  </ITEM>
  <ITEM><X><T>The New Hacker’s Dictionary</T><A>https://www.amazon.com/exec/obidos/ASIN/0262680920</A><L>en</L><F>HTML</F></X> - <AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>S.</MIDDLENAME><LASTNAME>Raymond</LASTNAME></AUTHOR><BR/>
    If you are looking for nerd humour, you should read this book: this is much funnier than Dilbert’s cartoons. The content is online <X><T>here</T><A>http://www.catb.org/%7Eesr/jargon/</A><L>en</L><F>HTML</F></X>.
  </ITEM>
</BLIST>
</CONTENT>
</PAGE>