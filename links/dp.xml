<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Design Patterns</TITLE>
<PATH>links/dp.xml</PATH>
<DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><X><T>Wikipedia</T><A>https://en.wikipedia.org/wiki/Category:Software_design_patterns</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><CLIST>
      <ITEM><X><T>Hillside</T><A>http://hillside.net/patterns/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Portland Patterns Repository</T><A>http://c2.com/cgi/wiki?SoftwareDesignPatternsIndex</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>edlin</T><A>http://www.edlin.org/cs/patterns.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>java-design-patterns.com</T><A>http://java-design-patterns.com/patterns/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>PLOP 2000</T><A>http://hillside.net/plop/plop2k/</A><L>en</L><F>HTML</F></X></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles</TITLE>
    <ITEM><BLIST><TITLE>Introduction</TITLE>
      <ITEM><ARTICLE><X quality='2'><T>Design Patterns: Abstraction and Reuse of Object-Oriented Design</T><A>https://mafiadoc.com/queue/design-patterns-abstraction-and-reuse-of-object-oriented-design_599f27741723dd0f406eeb10.html</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Erich</FIRSTNAME><LASTNAME>Gamma</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Helm</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Ralph</FIRSTNAME><LASTNAME>Johnson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Vlissides</LASTNAME></AUTHOR><DATE><YEAR>1993</YEAR></DATE><COMMENT>This is the original paper by the gang of four. If you do not know what design patterns are, you must read this and then go to the store and buy their book. The appendix contains three patterns: <CODEROUTINE>AbstractFactory</CODEROUTINE>, <CODEROUTINE>Strategy</CODEROUTINE> and <CODEROUTINE>Wrapper</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Software Design Patterns: Common Questions and Answers</T><A>http://eprints.kfupm.edu.sa/65561/1/65561.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><MIDDLENAME>O.</MIDDLENAME><LASTNAME>Coplien</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>This is a small design pattern FAQ.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Little About Patterns.</T><A>https://blog.cleancoder.com/uncle-bob/2014/06/30/ALittleAboutPatterns.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>A very basic introduction to Design Patterns and why they are still relevant.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Some design patterns</TITLE>
      <ITEM><BLIST><TITLE>Creational patterns</TITLE>
        <ITEM><BLIST><TITLE>Abstract Factory (a.k.a. Kit): Provide an interface for creating families of related or dependent objects without specifying their concrete classes.</TITLE>
          <ITEM><ARTICLE><X><T>Abstract Factory</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/abstractFactory.html</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Abstract Factory Design Pattern</T><A>http://www.castle-cadenza.demon.co.uk/abfact.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi example.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Creating Truly Maintainable Class Factories</T><A>http://www.drdobbs.com/creating-truly-maintainable-class-factor/184401309</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Early</FIRSTNAME><LASTNAME>Ehlinger</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>A factory implementation using dynamic library loading.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Abstract Factory Pattern in Java</T><A>https://www.baeldung.com/java-abstract-factory-pattern</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>2</DAY></DATE><COMMENT>A short description of the pattern with little explanation.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Builder: Separate the construction of a complex object from its representation so that the same construction process can create different representations.</TITLE>
          <ITEM><ARTICLE><X><T>Builder</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/builder.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Builder Pattern</T><A>http://www.castle-cadenza.demon.co.uk/builder.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Factory Method (a.k.a. Virtual Constructor): Define an interface for creating an object, but let subclasses decide which class to instanciate. Factory Method lets a class defer instanciation to subclasses.</TITLE>
          <ITEM><ARTICLE><X><T>Factory Method</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/factoryMethod.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='dead'><T>An Example of the Factory Method</T><A>http://industriallogic.com/patterns/examples/factory.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joshua</FIRSTNAME><LASTNAME>Kerievsky</LASTNAME></AUTHOR><COMMENT>An example using the factory method <CODEROUTINE>Component::createImage</CODEROUTINE> from Java.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Factory Method Pattern</T><A>http://www.castle-cadenza.demon.co.uk/factory.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Inhibition</TITLE>
          <ITEM><ARTICLE><X quality='-1'><T>What Are Philosophy-Based Design Patterns?</T><ST>Software engineering is largely about analyzing a portion of the real world and translating it into a software system. What could be a richer source for ideas about reality analysis than philosophy?</ST><A>http://www.devx.com/dotnet/Article/47368</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ishay</FIRSTNAME><LASTNAME>Ventura</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>13</DAY></DATE><COMMENT>A bad-smelling design pattern where the base class knows all the capabilities of its derived classes: a flag is used to define if a given capability is supported or not by a given derived class.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Inversion of control</TITLE>
          <ITEM><ARTICLE><X><T>Inversion of Control Containers and the Dependency Injection pattern</T><A>http://martinfowler.com/articles/injection.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>1</MONTH><DAY>23</DAY></DATE><COMMENT>A very good introduction to the design pattern: after presenting several kinds of dependy injection (constructor injection, setter injection, and interface injection), Martin Fowler lists some pros and cons for each one and compares dependency injection to using a service locator.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Don't call us, we'll call you: Inversion of Control Containers</T><A>https://8thlight.com/blog/sam-szreter/2018/07/24/inversion-of-control-container.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sam</FIRSTNAME><LASTNAME>Szreter</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>24</DAY></DATE><COMMENT>An explanation of dependency injection and a simplistic Java DI container.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Prototype: Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.</TITLE>
          <ITEM><ARTICLE><X><T>Prototype</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/prototype.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Create Object Clones Through the Prototype Pattern in .NET</T><A>https://visualstudiomagazine.com/articles/2013/05/31/the-prototype-pattern-in-net.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>31</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Prototype Pattern in Java</T><A>https://www.baeldung.com/java-pattern-prototype</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vivek</FIRSTNAME><LASTNAME>Balasubramaniam</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>A short description of the pattern in Java.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Product Trader: Let clients create objects by naming an abstract superclass and by providing a specification.</TITLE>
          <ITEM><ARTICLE><X><T>Product Trader</T><A>http://www.riehle.org/computer-science/research/1996/plop-1996-product-trader.html</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Baümer</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Riehle</LASTNAME></AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>This is a complete description of the role pattern with the pros, cons, C++ and Smalltalk examples…</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Singleton: Ensure a class only has one instance, and provide a global point of access to it.</TITLE>
          <ITEM><ARTICLE><X><T>Singleton</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/singleton.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Singleton Pattern</T><A>http://www.castle-cadenza.demon.co.uk/single.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi implementation.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='dead'><T>The Singleton Design Pattern</T><A>http://www.theperlreview.com/Issues/The_Perl_Review_0_1.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>brian</FIRSTNAME><MIDDLENAME>d</MIDDLENAME><LASTNAME>foy</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>3</MONTH><DAY>1</DAY></DATE><COMMENT>A presentation of the pattern, how to implement it in Perl and some samples of modules using it.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Little Singleton</T><A>https://blog.cleancoder.com/uncle-bob/2015/07/01/TheLittleSingleton.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>Singleton is not evil… if you accept to break encapsulation in order to be able to mock.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Structural patterns</TITLE>
        <ITEM><BLIST><TITLE>Adapter (a.k.a. Wrapper): Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.</TITLE>
          <ITEM><ARTICLE><X><T>Adaptor Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Adaptor.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>17</DAY></DATE><COMMENT>A good short presentation of the pattern, no UML diagram nor code example is provided.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Wrapper Design Pattern</T><A>http://www.castle-cadenza.demon.co.uk/wrapper.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi implementation.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Bridge (a.k.a. Handle/Body): Decouple an abstraction from its implementation so that the two can vary independently.</TITLE>
          <ITEM><ARTICLE><X><T>Bridge</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/bridge.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Bridge Pattern - Bridging the gap between Interface and Implementation</T><A>http://www.codeguru.com/cpp_mfc/bridge.shtml</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kulathu</FIRSTNAME><LASTNAME>Sarma</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>This other Sarma paper is also a good description, but, this time (see in strategy pattern) , I have no negative comments…</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='dead'><T>An Example of the Bridge Pattern</T><A>http://industriallogic.com/patterns/examples/bridge.html</A><L>en</L><F>HTML</F></X><COMMENT>A very short C++ example found in MFC (<CODEROUTINE>CFile</CODEROUTINE>).</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='dead'><T>Getting the Handle of Handles</T><A>http://www.acm.org/crossroads/xrds2-2/ovp.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>G.</FIRSTNAME><MIDDLENAME>Bowden</MIDDLENAME><LASTNAME>Wise</LASTNAME></AUTHOR><DATE><YEAR>1995</YEAR></DATE><COMMENT>Not described as a design pattern, but this article is still a good presentation of possible uses of a bridge.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Bridge Pattern in the .NET Framework</T><A>https://visualstudiomagazine.com/articles/2013/11/07/the-net-bridge-pattern.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>11</MONTH><DAY>7</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Bureaucracy: Define a self-constrained hierarchical structure which maintains its inner consistency, accepts interaction with clients on any level of the hierarchy, and scales for application design.</TITLE>
          <ITEM><ARTICLE><X><T>Bureaucracy</T><A>http://www.riehle.org/computer-science/research/1996/europlop-1996-bureaucracy.html</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Riehle</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>This pattern is very complex. In my mind, it is not very generic, so I would consider this as a design rather than a design pattern. But this is a good example of the composition of several patterns. The author proposes a way (using roles) to handle this type of complex pattern compositions. But, this is maybe only a joke…</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Composite: Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</TITLE>
          <ITEM><ARTICLE><X><T>Composite</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/composite.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM>Data Accessor: Decouple data access of the algorithm using it by providing a standardized handler object.</ITEM>
        <ITEM><BLIST><TITLE>Data Transfer Object: Hold the data used for communicating with a remote interface in order to minimize the number of calls.</TITLE>
          <ITEM><ARTICLE><X><T>Data Transfer Object</T><A>http://msdn.microsoft.com/en-us/library/ms978717.aspx</A><L>en</L><F>HTML</F></X><COMMENT>A very complete description of the pattern.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Decorator: Attach additional responsibilities to an objet dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</TITLE>
          <ITEM><ARTICLE><X><T>Decorator</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/decorator.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='dead'><T>Example of the Decorator Pattern</T><A>http://industriallogic.com/patterns/examples/decorator.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joshua</FIRSTNAME><LASTNAME>Kerievsky</LASTNAME></AUTHOR><DATE><YEAR>1995</YEAR><MONTH>10</MONTH></DATE><COMMENT>A short good C++ example.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Decorator Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Decorator.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>3</MONTH><DAY>27</DAY></DATE><COMMENT>A good short presentation of the pattern, but there is no UML diagram or example explaining how to implement it.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Decorator Pattern</T><A>http://www.castle-cadenza.demon.co.uk/decorate.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A short presentation of the pattern, but Parry gives a Delphi example.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='zombie'><T>Using the Decorator Pattern</T><A>http://www.onjava.com/pub/a/onjava/2003/02/05/decorator.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Budi</FIRSTNAME><LASTNAME>Kurniawan</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>2</MONTH><DAY>5</DAY></DATE><COMMENT>A description of how to implement the pattern for Java Swing components.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Decorator Pattern in .NET</T><A>https://visualstudiomagazine.com/articles/2013/05/29/the-decorator-pattern-in-net.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>29</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Facade: Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</TITLE>
          <ITEM><ARTICLE><X><T>Facade</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/facade.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Facade Design Pattern</T><A>http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.366.6951&amp;rep=rep1&amp;type=pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>brian</FIRSTNAME><MIDDLENAME>d</MIDDLENAME><LASTNAME>foy</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>7</MONTH><DAY>1</DAY></DATE><COMMENT>Not really a good presentation of the pattern, but lengthily describes its advantages (loose link with the library) and gives some Perl samples.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Facade Pattern in .NET</T><A>https://visualstudiomagazine.com/articles/2013/06/18/the-facade-pattern-in-net.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>25</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Flyweight: Use sharing to support large numbers of fine-grained objects efficiently.</TITLE>
          <ITEM><ARTICLE><X><T>Flyweight</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/flyweight.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='dead'><T>Example of the Flyweight Pattern</T><A>http://industriallogic.com/patterns/examples/flyweight.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ralph</FIRSTNAME><MIDDLENAME>Richard</MIDDLENAME><LASTNAME>Cook</LASTNAME></AUTHOR><COMMENT>Cook continues to work on his strategy pattern C++ example (see in strategy paragraph) and modifies it to use a flyweight pattern.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Model-View-Controller: Separate the management of user input, data computation and visual feedback into three objects.</TITLE>
          <ITEM><ARTICLE><X status='dead'><T>Applications Programming in Smalltalk-80 (TM): How to use Model-View-Controller (MVC)</T><A>http://st-www.cs.uiuc.edu/users/smarch/st-docs/mvc.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Burbeck</LASTNAME></AUTHOR><DATE><YEAR>1992</YEAR></DATE><COMMENT>This article predates the design patterns fad, so it does not use the usual description template. But it thoroughly describes the MVC implementation, maybe this is too Smalltalk biased for those who want to easily use MVC with an other language.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Phrasebook: When the application needs to execute, create or output expressions in another language, keep these expressions in a separate phrasebook</TITLE>
          <ITEM><ARTICLE><X><T>The Phrasebook Pattern</T><A>http://ootips.org/yonat/Phrasebook.pdf</A><L>en</L><F>PDF</F></X><X><T>The Phrasebook Pattern</T><A>http://hillside.net/plop/plop2k/proceedings/Pinchuk/Pinchuk.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Yonat</FIRSTNAME><LASTNAME>Sharon</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Rani</FIRSTNAME><LASTNAME>Pinchuk</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR></DATE><COMMENT>The complete presentation of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Phrasebook Design Pattern</T><A>http://www.perl.com/pub/a/2002/10/22/phrasebook.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rani</FIRSTNAME><LASTNAME>Pinchuk</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>A presentation of <CODEROUTINE>Class::Phrasebook</CODEROUTINE> and <CODEROUTINE>Class::Phrasebook::SQL</CODEROUTINE> classes to implement the Phrasebook design pattern in Perl.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Proxy (a.k.a. Surrogate): Provide a surrogate or placeholder for another object to control access to it.</TITLE>
          <ITEM><ARTICLE><X><T>Proxy</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/proxy.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>A good short presentation of the pattern, but there is no UML diagram or example explaining how to implement it.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Role: Adapt an object to different client's needs through transparently attached role objects, each one representing a role the object has to play in that client's context.</TITLE>
          <ITEM><ARTICLE><X><T>Role Object</T><A>http://dirkriehle.com/computer-science/research/2000/plopd-4.html</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Baümer</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Riehle</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Wolf</FIRSTNAME><LASTNAME>Siberski</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martina</FIRSTNAME><LASTNAME>Wulf</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR></DATE><COMMENT>This is a complete description of the role pattern with the pros, cons, C++ example…</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Skin: Separate the presentation style of an application from its logic.</TITLE>
          <ITEM><ARTICLE><X><T>The Skin Pattern</T><A>http://ootips.org/yonat/Skin.pdf</A><L>en</L><F>PDF</F></X><X><T>The Skin Pattern</T><A>http://hillside.net/plop/plop2k/proceedings/Sharon/Sharon.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Rani</FIRSTNAME><LASTNAME>Pinchuk</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Yonat</FIRSTNAME><LASTNAME>Sharon</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR></DATE><COMMENT>The complete presentation of the pattern.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Streams: Process a stream of information by feeding it through a network of independent and reusable processing units.</TITLE>
          <ITEM><ARTICLE><X><T>Streams Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Streams.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>10</MONTH><DAY>13</DAY></DATE><COMMENT>A good short presentation of the pattern, but there is no UML diagram or example explaining how to implement it.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Behavioral patterns</TITLE>
        <ITEM><BLIST><TITLE>Active Object (a.k.a.Concurrent Object or Actor): Decouple method execution from method invocation to enhance concurrency and simplify synchronized access to an object that resides in its own thread of control.</TITLE>
          <ITEM><ARTICLE><X><T>Active Object</T><ST>An Object Behavioral Pattern for Concurrent Programming</ST><A>http://www.cs.wustl.edu/~schmidt/PDF/Act-Obj.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>R.</FIRSTNAME><MIDDLENAME>Greg</MIDDLENAME><LASTNAME>Lavender</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Douglas</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Schmidt</LASTNAME></AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>A complete description of the pattern with some information on a C++ implementation.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Atomizer (a.k.a. Serializer): Read arbitrarily complex object structures from and write them to varying data structure-based backends. Efficiently store and retrieve objects from different backends, such as flat files, relational databases, and RPC buffers.</TITLE>
          <ITEM><ARTICLE><X><T>Serializer</T><A>http://www.riehle.org/computer-science/research/1996/plop-1996-serializer.html</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Riehle</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Wolf</FIRSTNAME><LASTNAME>Siberski</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Baümer</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Daniel</FIRSTNAME><LASTNAME>Megert</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Heinz</FIRSTNAME><LASTNAME>Züllighoven</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>This is a full description of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Atomizer Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Atomizer.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>8</MONTH><DAY>11</DAY></DATE><COMMENT>A good short presentation of the pattern, no UML diagram nor code example is provided.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Chain of Responsibility: Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</TITLE>
          <ITEM><ARTICLE><X><T>Chain of Responsibility</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/chainOfResponsibility.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Chain of Responsibility Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/CoR.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>19</DAY></DATE><COMMENT>A good short presentation of the pattern, no UML diagram nor code example is provided.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Chain of Responsibility Pattern in .NET</T><A>https://visualstudiomagazine.com/articles/2013/07/11/chain-of-responsibility-pattern.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>12</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Command (a.k.a. Action or Transaction): Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</TITLE>
          <ITEM><ARTICLE><X><T>Command</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/command.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Command Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Command.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>29</DAY></DATE><COMMENT>A good short presentation of the pattern, no UML diagram nor code example is provided.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Command Pattern in .NET</T><A>https://visualstudiomagazine.com/articles/2012/04/10/command-pattern-in-net.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>10</DAY></DATE><COMMENT>A simple C# WPF example.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The .NET Command Pattern, Part 2</T><A>https://visualstudiomagazine.com/articles/2012/04/24/net-command-pattern-part-2.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The continuation of the previous article with the undo/redo mechanism.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Interpreter: Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.</TITLE>
          <ITEM><ARTICLE><X><T>Interpreter</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/interpreter.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Interpreter Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Interpreter.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>27</DAY></DATE><COMMENT>A good presentation of the pattern, no UML diagram nor code example is provided.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Iterator (a.k.a. Cursor): Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</TITLE>
          <ITEM><ARTICLE><X><T>Iterator</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/iterator.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Lock: Temporarily restrict the access to some capability of an object to another one.</TITLE>
          <ITEM><ARTICLE><X><T>Lock Pattern</T><A>http://www.castle-cadenza.demon.co.uk/lock.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Mediator: Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.</TITLE>
          <ITEM><ARTICLE><X><T>Mediator</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/mediator.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Mediator Pattern</T><A>http://www.castle-cadenza.demon.co.uk/mediat.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi example.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>All Talk: Using the Mediator Pattern in .NET Framework</T><A>https://visualstudiomagazine.com/articles/2014/12/11/mediator-pattern-net-framework.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>12</MONTH><DAY>11</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Memento (a.k.a. Token): Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later.</TITLE>
          <ITEM><ARTICLE><X><T>Memento</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/memento.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Observer (a.k.a. Dependents or Publish-Subscribe): Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</TITLE>
          <ITEM><ARTICLE><X><T>Observer</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/observer.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Applying Observer Pattern in C++ Applications</T><A>http://www.codeguru.com/cpp_mfc/observer.shtml</A><L>en</L><F>HTML</F></X><X><T>Applying Observer Pattern in C++ Applications</T><A>http://www.codeproject.com/KB/architecture/observer.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kulathu</FIRSTNAME><LASTNAME>Sarma</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>2</MONTH><DAY>13</DAY></DATE><COMMENT>This short presentation contains some good ideas (mainly coming from GoF's book) such as nofication vs polling, pull vs push… with C++ examples.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Observer Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Observer.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>23</DAY></DATE><COMMENT>A good short presentation of the pattern, but there is no UML diagram or example explaining how to implement it.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Observer Pattern</T><A>http://www.castle-cadenza.demon.co.uk/observe.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi implementation.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Event Notification Pattern - Integrating Implicit Invocation with Object-Orientation</T><A>http://www.riehle.org/computer-science/research/1996/tapos-1996-event.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Dirk</FIRSTNAME><LASTNAME>Riehle</LASTNAME></AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>A small variation of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Observer Pattern in .NET</T><A>https://visualstudiomagazine.com/articles/2013/08/14/the-observer-pattern-in-net.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>14</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Specification: Specify if a candidate object matches some criteria.</TITLE>
          <ITEM><ARTICLE><X><T>Specifications</T><A>http://martinfowler.com/apsupp/spec.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><COMMENT>A detailed description of the pattern and, also, its extensions into subsumption and partially filled specifications.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>State (Objects for States): Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.</TITLE>
          <ITEM><ARTICLE><X><T>State</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/state.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Strategy (a.k.a. Policy): Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</TITLE>
          <ITEM><ARTICLE><X><T>Strategy</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/strategy.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Applying Strategy Pattern in C++ Applications</T><A>http://www.codeguru.com/cpp_mfc/strategy.shtml</A><L>en</L><F>HTML</F></X><X><T>Applying Strategy Pattern in C++ Applications</T><A>http://www.codeproject.com/KB/architecture/strategy.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kulathu</FIRSTNAME><LASTNAME>Sarma</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR><MONTH>11</MONTH><DAY>27</DAY></DATE><COMMENT>This is a rather good description to the strategy pattern, but I believe this paper contains several errors (e.g. using templates does not reduce footprint).</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X status='dead'><T>An Example of the Strategy Pattern</T><A>http://industriallogic.com/patterns/examples/strategy.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ralph</FIRSTNAME><MIDDLENAME>Richard</MIDDLENAME><LASTNAME>Cook</LASTNAME></AUTHOR><COMMENT>A short C++ example of the strategy pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Strategy Pattern</T><A>http://alumni.media.mit.edu/~tpminka/patterns/Strategy.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Minka</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>1</MONTH><DAY>11</DAY></DATE><COMMENT>A good short presentation of the pattern, no UML diagram nor code example is provided.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Strategy Pattern in .NET</T><A>https://visualstudiomagazine.com/articles/2012/02/22/strategy-pattern-in-net.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>22</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Template Method: Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.</TITLE>
          <ITEM><ARTICLE><X><T>Template Method</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/templateMethod.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>The Template Method Pattern in the .NET Framework</T><A>https://visualstudiomagazine.com/articles/2013/12/06/template--method-pattern-in-dot-net.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>12</MONTH><DAY>6</DAY></DATE><COMMENT>A simple C# example.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Visitor: Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.</TITLE>
          <ITEM><ARTICLE><X><T>Visitor</T><A>http://pages.cpsc.ucalgary.ca/%7Ekremer/patterns/visitor.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Kremer</LASTNAME></AUTHOR><COMMENT>A very short summary of the pattern.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Visitor Pattern</T><A>http://www.castle-cadenza.demon.co.uk/visitor.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaun</FIRSTNAME><LASTNAME>Parry</LASTNAME></AUTHOR><COMMENT>A very short presentation of the pattern, but Parry gives a Delphi implementation.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Kent Beck</TITLE>
      <ITEM><ARTICLE><X><T>Patterns Enhance Craft Step 1: Programs is Programs</T><A>https://www.facebook.com/notes/kent-beck/patterns-enhance-craft-step-1-programs-is-programs/907298705969661</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>4</DAY></DATE><COMMENT>Design decisions are resulting mostly from internal constraints, not from the external constraints (i.e. what the software needs to do).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Patterns Enhance Craft Step 2: Programming Rhymes</T><A>https://www.facebook.com/notes/kent-beck/patterns-enhance-craft-step-2-programming-rhymes/908002152565983</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>5</DAY></DATE><COMMENT>Since the design problems come from internal constraints, they are similar (Kent Beck cites variable naming as an example), so it makes sense to have a catalog of solutions for these repeating constraint configurations.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Patterns Enhance Craft Sidebar: My Personal Crisis</T><A>https://www.facebook.com/notes/kent-beck/patterns-enhance-craft-sidebar-my-personal-crisis/908356345863897</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>6</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Patterns Enhance Craft Step 3: A Few Good Solutions</T><A>https://www.facebook.com/notes/kent-beck/patterns-enhance-craft-step-3-a-handful-of-solutions/911063088926556</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>11</DAY></DATE><COMMENT>For a given configuration of constraints, the choice between the solutions depends on the relative forces of the constraints.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Patterns Enhance Craft: The Final Step, Pareto Effort</T><A>https://www.facebook.com/notes/kent-beck/patterns-enhance-craft-the-final-step-pareto-effort/914582455241286</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>After suffering one week for imposing himself to always determinate the pattern he was currently using, Kent got a list of tens of them. Patterns then allowed him to focus only on communicating the intent to the future reader of the code, the technical details of the implementation are already defined by applying the patter. Design patterns also facilitate communications.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>