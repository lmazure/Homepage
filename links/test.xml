<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Testing</TITLE>
<PATH>links/test.xml</PATH>
<DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE>
<CONTENT>

<LLIST>
  <ITEM><SLIST>
    <ITEM><BLIST><TITLE>Generalities</TITLE>
      <ITEM><X><T>Open Directory</T><A>http://dmoz.org/Computers/Programming/Software_Testing/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X status='obsolete'><T>Cetus</T><A>http://web.nchu.edu.tw/~jlu/cetus/oo_testing.html</A><L>en</L><F>HTML</F></X>
        (<X status='obsolete'><T>M</T><A>http://www.objenv.com/cetus/oo_testing.html</A><L>en</L><F>HTML</F></X>)</ITEM>
      <ITEM><X><T>Satisfice</T><A>http://www.satisfice.com</A><L>en</L><F>HTML</F></X>:
        <X><T>James Bach's blog</T><A>http://www.satisfice.com/blog</A><L>en</L><F>HTML</F><FEED><A>http://www.satisfice.com/blog/feed/</A><F>RSS</F></FEED></X></ITEM>
      <ITEM><X><T>Cem Kaner</T><A>http://www.kaner.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Test Obsessed</T><A>http://testobsessed.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>GTAC</T><A>https://developers.google.com/google-test-automation-conference/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Context-Driven-Testing</T><A>http://context-driven-testing.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Specialty sites</TITLE>
      <ITEM><X><T>Pairwise Testing</T><A>http://www.pairwise.org</A><L>en</L><F>HTML</F></X>: combinatorial test case generation</ITEM>
      <ITEM><X><T>Lorem Ipsum</T><A>http://www.lipsum.com</A><L>en</L><F>HTML</F></X>: generate sample text</ITEM>
      <ITEM><X><T>Random User Generator</T><A>http://randomuser.me</A><L>en</L><F>HTML</F></X>: generate random persons</ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Unit tests</TITLE>
      <ITEM><X><T>The Art Of Unit Testing</T><A>http://artofunittesting.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Wikipedia list</T><A>http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>JUnit</T><A>http://www.junit.org/</A><L>en</L><F>HTML</F></X>:
          <X><T>FAQ</T><A>http://junit.sourceforge.net/doc/faq/faq.htm</A><L>en</L><F>HTML</F></X>,
          <X><T>GuiceBerry</T><A>http://code.google.com/p/guiceberry/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Jester</T><A>http://jester.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Agitar</T><A>http://www.agitar.com</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>C++</TITLE>
        <ITEM><X><T>CppUnit</T><A>http://sourceforge.net/projects/cppunit/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>QtUnit</T><A>http://www.uwyn.com/projects/qtunit/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>CTA++</T><A>http://www.testwell.fi/ctadesc.html</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>NUnit</T><A>http://www.nunit.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>QUnit</T><A>http://qunitjs.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>YUI Test</T><A>http://yuilibrary.com/yui/docs/test/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Mocha</T><A>http://mochajs.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Jasmine</T><A>http://jasmine.github.io</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Sinon</T><A>http://sinonjs.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status='obsolete'><T>Google JS Test</T><A>https://code.google.com/p/google-js-test/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status='obsolete'><T>JsTestDriver</T><A>https://code.google.com/p/js-test-driver/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>SQL</TITLE>
        <ITEM><X><T>T.S.T.</T><A>http://tst.codeplex.com</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><X><T>personal notes</T><A>../notes/unittest.html</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mutation testing</TITLE>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X status='obsolete'><T>Jester</T><A>http://jester.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>PIT</T><A>http://pitest.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>BDD</TITLE>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>SpecFlow</T><A>http://www.specflow.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Ruby</TITLE>
        <ITEM><X><T>RSpec</T><A>http://rspec.info</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>Jasmine</T><A>http://jasmine.github.io</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Frameworks</TITLE>
      <ITEM><X><T>Software Testing Automation Framework (STAF)</T><A>http://staf.sourceforge.net</A><L>en</L><F>HTML</F></X>: driving tests executed on remote machines</ITEM>
      <ITEM><X><T>Software Automation Framework Support (SAFS)</T><A>http://safsdev.sourceforge.net</A><L>en</L><F>HTML</F></X>: keyword driven tests</ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Fuzz testing</TITLE>
      <ITEM><X><T>01-fuzztest.c</T><A>http://archives.neohapsis.com/archives/vuln-dev/2002-q1/att-1130/01-fuzztest.c</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>University of Wisconsin</T><A>http://www.cs.wisc.edu/%7Ebart/fuzz/fuzz.html</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>GUI tests</TITLE>
      <ITEM><BLIST><TITLE>X11/Motif</TITLE>
        <ITEM><X><T>Xnee</T><A>http://www.gnu.org/software/xnee/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Qt</TITLE>
        <ITEM><X><T>squish</T><A>http://www.froglogic.com/pg?id=Products&amp;category=squish</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>Marathon</T><A>http://marathonman.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Abbot</T><A>http://abbot.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Web</TITLE>
        <ITEM><X><T>WebTest</T><A>http://webtest.canoo.com/webtest/manual/WebTestHome.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Watir</T><A>http://watir.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>LiquidTest</T><A>http://www.jadeliquid.com/liquidtest/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>AJAX</TITLE>
        <ITEM><X><T>QEngine</T><A>http://www.adventnet.com/products/qengine/index.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Selenium</T><A>http://seleniumhq.org</A><L>en</L><F>HTML</F></X>:
          <X><T>SeleniumGRID</T><A>http://seleniumgrid.thoughtworks.com</A><L>en</L><F>HTML</F></X>,
          <X><T>Elemental Selenium</T><A>http://elementalselenium.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status='obsolete'><T>Chickenfoot</T><A>http://groups.csail.mit.edu/uid/chickenfoot/index.php</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Load tests</TITLE>
      <ITEM><X><T>The Grinder</T><A>http://grinder.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Web application tests</TITLE>
      <ITEM><X><T>Sauce Labs</T><A>http://saucelabs.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>BrowserStack</T><A>http://www.browserstack.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Snooping</TITLE>
      <ITEM><X><T>Fiddler</T><A>http://www.fiddler2.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Charles</T><A>http://www.charlesproxy.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test dashboards</TITLE>
      <ITEM><X><T>DART</T><A>http://public.kitware.com/Dart/HTML/Index.shtml</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>CDash</T><A>http://www.cdash.org</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test coverage</TITLE>
      <ITEM><BLIST><TITLE>C/C++</TITLE>
        <ITEM><X><T>CTC++</T><A>http://www.testwell.fi/ctcdesc.html</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>EMMA</T><A>http://emma.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Cobertura</T><A>http://cobertura.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Automated acceptance tests</TITLE>
      <ITEM><X><T>Fit</T><A>http://fit.c2.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>FitNesse</T><A>http://fitnesse.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Cucumber</T><A>http://cukes.info</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>JBehave</T><A>http://jbehave.org</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Screenshot tools</TITLE>
      <ITEM><X quality='2'><T>PrtScr</T><A>http://www.fiastarta.com/PrtScr</A><L>en</L><F>HTML</F></X>: a powerful screenshot tool</ITEM>
      <ITEM><X><T>Wink</T><A>http://www.debugmode.com/wink/</A><L>en</L><F>HTML</F></X>: recording a film of the screen</ITEM>
    </BLIST></ITEM>
    <ITEM><X><T>EICAR Anti-Virus / Anti-Malware test file</T><A>http://www.eicar.org/anti_virus_test_file.htm</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Venus</T><A>http://www.venusjs.org</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>TMAP</T><A>http://www.tmap.net/en</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Elisabeth Hendrickson's cheat sheet</T><A>http://testobsessed.com/wp-content/uploads/2011/04/testheuristicscheatsheetv1.pdf</A><L>en</L><F>PDF</F></X></ITEM>
    <ITEM><X><T>Virtual PC Images to test IE</T><A>https://modern.ie/en-us/virtualization-tools</A><L>en</L><F>HTML</F></X></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles</TITLE>
    <ITEM><ARTICLE><X quality='2'><T>Classic Testing Mistakes</T><A>http://www.exampler.com/testing-com/writings/classic/mistakes.html</A><L>en</L><F>HTML</F></X><AUTHOR>Brian Marick</AUTHOR><DATE><YEAR>1997</YEAR></DATE><COMMENT>The author gives a good list of errors commonly done, I've already met several of them. The list is not exhaustive, the proposed solutions could have been more analyzed, but this is a good brain catalyst to think about how to improve your testing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='2'><T>Heuristic Test Strategy Model</T><A>http://www.satisfice.com/tools/htsm.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>A good checklist to design test strategies.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Value without Numbers</T><A>http://www.satisfice.com/articles/valuewonum.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>7</MONTH></DATE><COMMENT>How to prove to managers the value of testing&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Framework for Good Enough Testing</T><A>http://www.satisfice.com/articles/good_enough_testing.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>1998</YEAR><MONTH>10</MONTH></DATE><COMMENT>James provide some questions to ask oneself when having to decide what what should be the test effort.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What's So Different About Game Testing</T><A>../attic/gametest.htm</A><L>en</L><F>HTML</F></X><AUTHOR>Duri Price</AUTHOR><AUTHOR>Ilya Pearlman</AUTHOR><DATE><YEAR>1997</YEAR><MONTH>3</MONTH></DATE><COMMENT>Why is game testing different from testing usual applications?</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Impossibility of Complete Testing</T><A>http://www.kaner.com/pdfs/imposs.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Cem Kaner</AUTHOR><DATE><YEAR>1997</YEAR></DATE><COMMENT>Cem describes some trivial and some more interesting facts on testing (especially about good enough quality).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Requirement Management in Testing</T><A>http://www.tarrani.net/testrequirement.pdf</A><L>en</L><F>PDF</F></X><X><T>Requirement Management in Testing</T><A>../attic/Requirements-Management.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Anindita Sarkar</AUTHOR><COMMENT>Some basic information about testing (requirement writing, test prioritization, reporting&#x2026;). There is nothing new here, but this description is interestingly down to earth.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='2'><T>Becoming a Software Testing Expert</T><A>https://www.youtube.com/watch?v=GhfVK_ubk8U</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>30</SECOND></DURATION></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>6</MONTH><DAY>13</DAY></DATE><COMMENT>James explains how you, being a good tester, can reach the status of being a testing expert. This does not speak about testing tools or methodologies, but on the state of mind you should have.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Open Lecture by James Bach on Software Testing</T><A>https://www.youtube.com/watch?v=ILkT_HV9DVU</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>38</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2011</YEAR></DATE><COMMENT>A longer, updated version of the previous presentation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Seven Principles of Software Testing</T><A>http://fr.scribd.com/doc/52107511/Seven-Principles-of-Software-Testing</A><L>en</L><F>PDF</F></X><AUTHOR>Bertrand Meyer</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>8</MONTH></DATE><COMMENT>Meyer presents some interesting ideas, for example the fact that testing strategies must be assessed. But I tend to sometimes disagree : testing is not only finding bugs, but it is also checking that common use scenarios are successfully supported; adding a new test for every found bug will result into a chaos if there isn't a good testing infrastructure&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>How To Recruit, Motivate, and Energize Superior Test Engineers</T><A>https://www.youtube.com/watch?v=sUTNmaWgves</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR>Jeff Feldstein</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>11</MONTH><DAY>9</DAY></DATE><COMMENT>A test manager at CISCO explains how he hires and retains test engineers.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Proving Our Worth: Quantifying the Value of Testing</T><A>https://www.youtube.com/watch?v=nFBINwTK5Ng</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>38</SECOND></DURATION></X><AUTHOR>Lee Copeland</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>6</MONTH><DAY>13</DAY></DATE><COMMENT>Lee starts by looking for a definition of testing. Then, he speaks about the goal/question/metric model and the fact that some companies collect metrics without any purpose. He explains that information should be accurate, timely, complete, relevant, unique, and actionable. He finishes by explaining the information that developers, test managers, and project managers would like to have. This lecture is interesting, but too much abstract. For example, in most cases, it is impossible to give a dollar estimation of a bug.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What's Wrong with My Program</T><A>https://www.youtube.com/watch?v=jAIz_9svmRE</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>40</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR>Jamie Andrews</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>Some research on software testing: randomized tests (I used this fourteen years ago&#x2026;), mutant generator, <X><T>Tarantula</T><A>http://pleuma.cc.gatech.edu/aristotle/Tools/tarantula/</A><L>en</L><F>HTML</F></X>&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java code: Unit tests and automated code analysis working together</T><ST>Your tests can help your tools to analyze your code</ST><A>http://www.ibm.com/developerworks/java/library/j-diag1015/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Eric E. Allen</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>Unit tests and code analysis complete each other, but I am not sure the technologies are mature enough today to have an interesting return on investment when applied.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Diffusion Testing</T><A>http://msdn.microsoft.com/en-us/magazine/gg650663.aspx</A><L>en</L><F>HTML</F></X><AUTHOR>James McCaffrey</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>3</MONTH></DATE><COMMENT>If the function being tested has some particularities (symmetry, recurrence relations&#x2026;), it is possible to generate new test cases from existing ones.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Weinburg-Myers triangle program example</T><A>http://www.testdesigners.com/testingstyles/triangleexample.html</A><L>en</L><F>HTML</F></X><COMMENT>The very well-known software testing sample.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>RST Overview</T><A>https://www.youtube.com/watch?v=2t35cEF4e6M</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>6</MINUTE><SECOND>3</SECOND></DURATION></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>1</MONTH></DATE><COMMENT>A short presentation of Rapid Software Testing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Jimmy Bogard: Holistic testing</T><A>http://vimeo.com/68390508</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR>Jimmy Bogard</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>14</DAY></DATE><COMMENT>Jimmy Borgard gives feedback on his testing experience: fast tests / slow tests / slow as hell tests, behavioural tests vs procedural tests, xUnit, AutoFixture, Should, don't mock internals&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Case Against Cucumber</T><A>http://blog.8thlight.com/kevin-liddle/2013/09/18/a-case-against-cucumber.html</A><L>en</L><F>HTML</F></X><AUTHOR>Kevin Liddle</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test Extraction and Readability</T><A>http://blog.8thlight.com/andrew-kelly/2013/10/15/test-extraction-and-readability.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Kelly</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>15</DAY></DATE><COMMENT>Method extraction can be used to improve the readability of a test, but it must be used adequately.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A.T. FAIL!</T><A>http://blog.8thlight.com/uncle-bob/2013/09/26/AT-FAIL.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>The business should write automated acceptance tests (instead of a QA test plan).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Check Your Work</T><A>http://blog.8thlight.com/connor-mendenhall/2013/10/31/check-your-work.html</A><L>en</L><F>HTML</F></X><AUTHOR>Connor Mendenhall</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>31</DAY></DATE><COMMENT>Adding generative tests to unit tests, in order to further check the production code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Integration Tests Are a Scam</T><A>http://www.infoq.com/presentations/integration-tests-scam</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>32</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR>J. B. Rainsberger</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>8</MONTH><DAY>24</DAY></DATE><COMMENT>How to properly do integration testing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Introducing Unit Testing in Legacy Code - Richard Blewett</T><A>http://vimeo.com/user22258446/review/79190026/78aa155e2a</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>24</MINUTE><SECOND>14</SECOND></DURATION></X><AUTHOR>Richard Blewett</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>Some techniques (introducing an interface, using Fakes&#x2026;) to enable unit testing of legacy code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When to Mock</T><A>http://blog.8thlight.com/uncle-bob/2014/05/10/WhenToMock.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>10</DAY></DATE><COMMENT>Mock at the boundaries and write your own mocks.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Little Mocker</T><A>http://blog.8thlight.com/uncle-bob/2014/05/14/TheLittleMocker.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>14</DAY></DATE><COMMENT>The difference between Dummy, Stub, Spy, Mock, and Fake.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why Most Unit Testing is Waste</T><A>http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>James O Coplien</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>2</MONTH></DATE><COMMENT>An analysis of doing proper testing with some very surprising ideas: throw away tests that haven't failed in a year, prefer integration tests to unit tests&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>TestBash 2.0 - A-Galumphing We Go James Bach</T><A>http://vimeo.com/64762883</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>40</MINUTE><SECOND>31</SECOND></DURATION></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>3</MONTH><DAY>22</DAY></DATE><COMMENT>Galumphing is simply adding inert variations in test procedure to find bugs.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>UnitTest</T><A>http://martinfowler.com/bliki/UnitTest.html</A><L>en</L><F>HTML</F></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>5</DAY></DATE><COMMENT>The common traits of the different definitions of "unit tests", mocking or not the collaborators of the tested unit, duration of the test run and when to execute them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Creating Maintainable Automated Acceptance Test Suites</T><A>https://www.youtube.com/watch?v=X9ap-zH0Gkc</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>5</SECOND></DURATION></X><AUTHOR>Jez Humble</AUTHOR><AUTHOR>Badri Janakiraman</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>3</MONTH><DAY>1</DAY></DATE><COMMENT>(<X><T>slides</T><A>http://www.slideshare.net/jezhumble/creating-maintainable-automated-acceptance-tests</A><L>en</L><F>HTML</F></X>) A lot of advice based on fives principles: treat acceptance tests like production code, always interact with the SUT like a user would, continuously curate your user journeys, collective ownership of acceptance tests, acceptance tests own their data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Goto Fail, Heartbleed, and Unit Testing Culture</T><A>http://www.martinfowler.com/articles/testing-culture.html</A><L>en</L><F>HTML</F></X><AUTHOR>Mike Bland</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>3</DAY></DATE><COMMENT>After trying to convince the reader of the benefits of Unit Testing with demonstrating how the Goto Fail and Heartbleed bugs could have been avoided, Mike Bland explains how the Unit Test culture has been introduced at Google and gives advice how to do the same in other companies. This is a pity that this article is much too long, the same message could have been expressed in a much shorter way.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Fitnesse, MSpec and SpecFlow</T><A>http://proq.blogspot.com/2012/02/fitnesse-mspec-and-specflow.html</A><L>en</L><F>HTML</F></X><AUTHOR>Gitte Vermeiren</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>22</DAY></DATE><COMMENT>A short feedback on the three libraries.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>PageObject</T><A>http://martinfowler.com/bliki/PageObject.html</A><L>en</L><F>HTML</F></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>A description of the design pattern used to hide the HTML details and present a semantic API to the test script.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>We&#x2019;ve only got One Life to Live, so we shouldn&#x2019;t waste it on ineffective test design. Follow this Guiding Light to The Bold and the Beautiful world of Soap Opera Testing</T><A>http://www.logigear.com/logi_media_dir/Documents/whitepapers/soap_opera_testing.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Hans Buwalda</AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH></DATE><COMMENT>A description of soap opera tests and how to manage them.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Context-driven testing</TITLE>
      <ITEM><ARTICLE><X quality='2'><T>Test Automation Snake Oil</T><A>http://www.satisfice.com/articles/test_automation_snake_oil.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>1999</YEAR><MONTH>6</MONTH><DAY>13</DAY></DATE><COMMENT>James gives a realistic view of automatic testing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Insapience of Anti-Automationism</T><A>http://context-driven-testing.com/?p=69</A><L>en</L><F>HTML</F></X><AUTHOR>Cem Kaner</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>2</MONTH><DAY>4</DAY></DATE><COMMENT>Cem Kaner is debunking the claims that there is a real separation between automated test and manual tests, and that checking is not testing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>James Bach on Systems Thinking (made with Spreaker)</T><A>https://www.youtube.com/watch?v=Zw_coer9krg</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>55</MINUTE><SECOND>59</SECOND></DURATION></X><AUTHOR>Jame Bach</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>19</DAY></DATE><COMMENT>The Context-Driven School vs the ISTQB School, answering critics, devops and system thinking.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Context-Driven Approach to Automation in Testing</T><A>http://www.satisfice.com/articles/cdt-automation.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>James Bach</AUTHOR><AUTHOR>Michael Bolton</AUTHOR><DATE><YEAR>2016</YEAR><MONTH>2</MONTH></DATE><COMMENT>Yet another explanation that test automation is not something that can be done dumbly.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Reviewing "Context Driven Approach to Automation in Testing"</T><A>http://chrismcmahonsblog.blogspot.lu/2016/06/reviewing-context-driven-approach-to.html</A><L>en</L><F>HTML</F></X><AUTHOR>Chris McMahon</AUTHOR><DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>23</DAY></DATE><COMMENT>A negative review of the previous paper: it is FUD and outdated.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Agile methods</TITLE>
      <ITEM><ARTICLE><X><T>Agility for Testers</T><A>http://blog.qualitytree.com/wp-content/uploads/2007/01/aftpnsqc2004.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Elisabeth Hendrickson</AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH></DATE><COMMENT>Hendrickson shares her experience of being a tester in an XP team: this is a very practical and interesting paper&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>Agile Testing</T><A>https://www.youtube.com/watch?v=bqrOnIECCSg</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR>Elisabeth Hendrickson</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>12</MONTH><DAY>9</DAY></DATE><COMMENT>The same information as in the article above, but, here, you get additionally her full dynamism.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>scrum testing</T><A>http://discuss.joelonsoftware.com/default.asp?joel.3.423167.15</A><L>en</L><F>HTML</F></X><DATE><YEAR>2006</YEAR><MONTH>12</MONTH><DAY>4</DAY></DATE><COMMENT>An interesting group discussion on Scrum and QA.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Exploratory Testing in an Agile Context</T><A>http://testobsessed.com/wp-content/uploads/2011/08/ETinAgile-agile2011-final.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Elisabeth Hendrickson</AUTHOR><DATE><YEAR>2011</YEAR></DATE><COMMENT>A tutorial explaining some ways to perform exploratory testing.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Google</TITLE>
      <ITEM><ARTICLE><X><T>Test Sizes</T><A>http://googletesting.blogspot.com/2010/12/test-sizes.html</A><L>en</L><F>HTML</F></X><AUTHOR>Simon Stewart</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>12</MONTH><DAY>13</DAY></DATE><COMMENT>The description of how Google defines test sizes (small vs medium vs large).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software</T><A>http://googletesting.blogspot.com/2011/01/how-google-tests-software.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>1</MONTH><DAY>25</DAY></DATE><COMMENT>A description of the Engineering Productivity organisation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - Part Two</T><A>http://googletesting.blogspot.com/2011/02/how-google-tests-software-part-two.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>9</DAY></DATE><COMMENT>The different engineering roles.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - Part Three</T><A>http://googletesting.blogspot.com/2011/02/how-google-tests-software-part-three.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>Development and testing are intricately linked.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - A Brief Interlude</T><A>http://googletesting.blogspot.com/2011/02/how-google-tests-software-brief.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>22</DAY></DATE><COMMENT>James Whittaker explains why he is not joking about developers as he used to.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>This Code is CRAP</T><A>http://googletesting.blogspot.com/2011/02/this-code-is-crap.html</A><L>en</L><F>HTML</F></X><AUTHOR>Alberto Savoia</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>22</DAY></DATE><COMMENT>A description of the Change Risk Anti-Patterns metric.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - Part Four</T><A>http://googletesting.blogspot.com/2011/03/how-google-tests-software-part-four.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>The channels corresponding to the release maturity: canary channel, dev channel, test channel, and release channel.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - Part Five</T><A>http://googletesting.blogspot.com/2011/03/how-google-tests-software-part-five.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>How Google classifies tests: small tests, medium tests, and large tests.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The SET Career Path</T><A>http://googletesting.blogspot.com/2011/04/set-career-path.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>4</MONTH><DAY>5</DAY></DATE><COMMENT>The differences between an SWE (Software Engineer) and an SET (Software Engineer in Test).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - Part Six</T><A>http://googletesting.blogspot.com/2011/05/how-google-tests-software-part-six.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH><DAY>2</DAY></DATE><COMMENT>SETs are not involved at the beginning of the project and not all projects even have SETs in their team.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - A Break for Q&amp;A</T><A>http://googletesting.blogspot.com/2011/05/how-google-tests-software-break-for-q.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH><DAY>4</DAY></DATE><COMMENT>Switching between SWE and SET position, people can remain Individual Contributors rather than becoming managers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How Google Tests Software - Part Seven</T><A>http://googletesting.blogspot.com/2011/05/how-google-tests-software-part-seven.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH><DAY>26</DAY></DATE><COMMENT>A description of the Test Engineer role.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Testing at the speed and scale of Google</T><A>http://googletesting.blogspot.com/2011/06/testing-at-speed-and-scale-of-google.html</A><L>en</L><F>HTML</F></X><AUTHOR>Pooja Gupta</AUTHOR><AUTHOR>Mark Ivey</AUTHOR><AUTHOR>John Penix</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>14</DAY></DATE><COMMENT>Google performs concurrent builds and is using dependency analysis to run less tests after each build.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Lessons in a 21st Century Tech Career: Failing Fast, 20% Time and Project Mobility</T><A>http://googletesting.blogspot.com/2011/06/lessons-in-21st-century-tech-career.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>23</DAY></DATE><COMMENT>The title indicates what James Whittaker believes to be the factors that make Googlers so dedicated to their work.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How We Tested Google Instant Pages</T><A>http://googletesting.blogspot.com/2011/07/how-we-tested-google-instant-pages.html</A><L>en</L><F>HTML</F></X><AUTHOR>Jason Arbon</AUTHOR><AUTHOR>Tejas Shah</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The 10 Minute Test Plan</T><A>http://googletesting.blogspot.com/2011/09/10-minute-test-plan.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>1</DAY></DATE><COMMENT>James Whittaker explains that he gives his teams 10 minutes to build a test plan. In fact, they are able to build 80% of this one in 30 minutes by using an AAC (attribute / component / capability) model.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Take a BITE out of Bugs and Redundant Labor</T><A>http://googletesting.blogspot.com/2011/10/take-bite-out-of-bugs-and-redundant.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>12</DAY></DATE><COMMENT>Google is open sourcing the "head up display" that James Whittaker described in his GTAC 2010 presentation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Google JS Test, now in Open Source</T><A>http://googletesting.blogspot.com/2011/10/google-js-test-now-in-open-source.html</A><L>en</L><F>HTML</F></X><AUTHOR>Aaron Jacobs</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>17</DAY></DATE><COMMENT>Google releases a JavaScript unit test framework as open source.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Google Test Analytics - Now in Open Source</T><A>http://googletesting.blogspot.com/2011/10/google-test-analytics-now-in-open.html</A><L>en</L><F>HTML</F></X><AUTHOR>Jim Reardon</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>19</DAY></DATE><COMMENT>Google releases, as open source, a tool to create an ACC matrix and aggregate metrics (test cases, test results, commits,&#x2026;) about it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>ScriptCover makes Javascript coverage analysis easy</T><A>http://googletesting.blogspot.com/2011/10/scriptcover-makes-javascript-coverage.html</A><L>en</L><F>HTML</F></X><AUTHOR>Ekaterina Kamenskaya</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>25</DAY></DATE><COMMENT>Google releases an open source JavaScript code coverage tool.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>EuroSTAR Software Testing Video: Ten Minute Test Plan with James Whittaker</T><A>https://www.youtube.com/watch?v=QEu3wmgTLqo</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>24</MINUTE><SECOND>14</SECOND></DURATION></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>11</MONTH><DAY>22</DAY></DATE><COMMENT>An overview of how Google tests: ten minutes test plan, ACC, risk analysis&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Testing 2.0</T><A>http://googletesting.blogspot.com/2012/08/testing-20.html</A><L>en</L><F>HTML</F></X><AUTHOR>Anthony F. Voellm</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>31</DAY></DATE><COMMENT>Testing is integrated to coding, so done by developers. SET s and TEs are providing expertise in particular for security, reliability, and performance. Nothing new here. I guess Google is just trying to hire more TEs and SETs.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Conversation with a Test Engineer</T><A>http://googletesting.blogspot.com/2012/09/conversation-with-test-engineer.html</A><L>en</L><F>HTML</F></X><AUTHOR>Alan Myrvold</AUTHOR><AUTHOR>Alan Faulkner</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>The interview of a Google Test Engineer. Once again nothing new here, this is a hiring advertisement.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why Are There So Many C++ Testing Frameworks?</T><A>http://googletesting.blogspot.com/2012/10/why-are-there-so-many-c-testing.html</A><L>en</L><F>HTML</F></X><AUTHOR>Zhanyong Wan</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>Why they are so many C++ test framework and some Google Test design choices.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Hermetic Servers</T><A>http://googletesting.blogspot.fr/2012/10/hermetic-servers.html</A><L>en</L><F>HTML</F></X><AUTHOR>Chaitali Narla</AUTHOR><AUTHOR>Diego Salas</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>3</DAY></DATE><COMMENT>Running tests on a single machine, with in-memory databases&#x2026; to get fast and reliable tests.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Android UI Automated Testing</T><A>http://googletesting.blogspot.fr/2015/03/android-ui-automated-testing.html</A><L>en</L><F>HTML</F></X><AUTHOR>Mona El Mahdy</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>20</DAY></DATE><COMMENT>The evolution of how the Google+ team tested the UI on Android.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Testing on the Toilet</TITLE>
        <ITEM><ARTICLE><X><T>Testing on the Toilet: Testing State vs. Testing Interactions</T><A>http://googletesting.blogspot.fr/2013/03/testing-on-toilet-testing-state-vs.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Trenk</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>3</MONTH><DAY>22</DAY></DATE><COMMENT>After explaining the difference between testing states and testing interactions, the author explains that we should test states except in some particular cases.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Testing on the Toilet: Test Behavior, Not Implementation</T><A>http://googletesting.blogspot.fr/2013/08/testing-on-toilet-test-behavior-not.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Trenk</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>5</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Testing on the Toilet: Don't Put Logic in Tests</T><A>http://googletesting.blogspot.com/2014/07/testing-on-toilet-dont-put-logic-in.html</A><L>en</L><F>HTML</F></X><AUTHOR>Erik Kuefler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>7</MONTH><DAY>31</DAY></DATE><COMMENT>The code of a test should be very simple.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Testing on the Toilet: Prefer Testing Public APIs Over Implementation-Detail Classes</T><A>http://googletesting.blogspot.fr/2015/01/testing-on-toilet-prefer-testing-public.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Trenk</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>14</DAY></DATE><COMMENT>Do not test implementation details.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Testing on the Toilet: Change-Detector Tests Considered Harmful</T><A>http://googletesting.blogspot.fr/2015/01/testing-on-toilet-change-detector-tests.html</A><L>en</L><F>HTML</F></X><AUTHOR>Alex Eagle</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>27</DAY></DATE><COMMENT>Tests should not mimic the code in production, but should check the correct behavior of this one.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>AAFTT (Agile Alliance's Functional Testing Tool) 2007</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Does It Work? Are We Done? Is It Right? (Keep It Light!)</T><A>http://video.google.com/videoplay?docid=-3256499677006040213</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>5</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR>Jim Shore</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH></DATE><COMMENT>(The transcript is available in <X><T>Does It Work? Are We Done? Is It Right? (Keep It Light!)</T><A>http://www.jamesshore.com/Blog/Does-It-Work-Are-We-Done.html</A><L>en</L><F>HTML</F></X>) TDD is the solution to minimize waste when checking if the software works properly and it is complete.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Exploratory testing</TITLE>
      <ITEM><ARTICLE><X><T>Exploratory Testing Explained</T><A>http://www.satisfice.com/articles/et-article.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>16</DAY></DATE><COMMENT>James describes what he calls Exploratory Testing: having bright minds executing tests designed on the fly. I can only agree with him: this works only if the tester is good.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Exploratory Testing</T><A>https://www.youtube.com/watch?v=kBufzgjYAQE</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR>Jon Bach</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>3</MONTH><DAY>13</DAY></DATE><COMMENT>(The slides are available in <X><T>Breaking Down (and building up) Exploratory Testing Skill</T><A>http://www.quardev.com/content/whitepapers/ET_dynamics_Google_3_06.pdf</A><L>en</L><F>PDF</F></X>.) Jon Bach gives some information about exploratory testing. He lists 14 usable tactics ("MRQ COMP GRABC R&amp;R?"). This is a good brain teaser, but the presentation is rather messy.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>  
    <ITEM><BLIST><TITLE>Model-based testing</TITLE>
      <ITEM><ARTICLE><X><T>Unbearable Lightness of Model-Based Testing</T><A>https://www.youtube.com/watch?v=9UkkOtpHpuQ</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>20</MINUTE><SECOND>3</SECOND></DURATION></X><AUTHOR>James Bach</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>James explains that models are always wrong and you will miss bugs if you blindly base your tests on such a model. During the Q&amp;A session, James discusses about some of his favourite subjects: MIPping (mention in passing), blink testing&#x2026;</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>  
    <ITEM><BLIST><TITLE>Test automation</TITLE>
      <ITEM><ARTICLE><X><T>Seven Steps to Test Automation Success</T><A>http://www.testpoint.com.au/attachments/093_Seven%20Steps%20to%20Test%20Automation%20Success.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Bret Pettichord</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>An overview of test automation with some very good practical comments.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>When Should a Test Be Automated?</T><A>http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.43.5177&amp;rep=rep1&amp;type=pdf</A><L>en</L><F>PDF</F></X><X><T>When Should a Test Be Automated?</T><A>http://www.stickyminds.com/sitewide.asp?Function=edetail&amp;ObjectType=ART&amp;ObjectId=2010</A><L>en</L><F>Word</F></X><AUTHOR>Brian Marick</AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>Some ideas about the factors to be taken into account to decide for automated tests vs manual tests.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why Automated Testing for Web Apps?</T><A>http://www.oraclejavamagazine-digital.com/javamagazine/premiere2011?pg=36#pg36</A><L>en</L><F>HTML</F></X><AUTHOR>Kevin Nilson</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH></DATE><COMMENT>A list of tools, very quickly described, for unit tests, test automation, and continuous integration of Web applications.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Testing like the TSA</T><A>https://signalvnoise.com/posts/3159-testing-like-the-tsa</A><L>en</L><F>HTML</F></X><AUTHOR>David Heinemeier Hansson</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>11</DAY></DATE><COMMENT>Some pragmatic advice on writing tests, rather than blindly applying TDD.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>SelfTestingCode</T><A>http://martinfowler.com/bliki/SelfTestingCode.html</A><L>en</L><F>HTML</F></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>1</DAY></DATE><COMMENT>The advantages of having a test suite able to detect the most serious bugs.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Rails Conf 2013 The Magic Tricks of Testing by Sandi Metz</T><A>https://www.youtube.com/watch?v=URSWYvyc42M</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>32</MINUTE><SECOND>22</SECOND></DURATION></X><AUTHOR>Sandi Metz</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>An effective simple explanation of the unit tests to be written and how to write them, based on query vs command and incoming vs internal vs outgoing.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>GTAC</TITLE>
        <ITEM><BLIST><TITLE>2006</TITLE>
          <ITEM><ARTICLE><X><T>Literate functional testing</T><A>https://www.youtube.com/watch?v=ClH9xCs3q4I</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>7</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR>Robert Chatley</AUTHOR><AUTHOR>Tom White</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH><DAY>7</DAY></DATE><COMMENT>The two guys have created a test framework in which tests are readable by non-software persons. Despite what they say, I am still doubting a lot about this interest of this&#x2026;</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Google Test Automation Conference Lightning Talks</T><A>https://www.youtube.com/watch?v=mR2VmDVgX6E</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>46</MINUTE><SECOND>28</SECOND></DURATION></X><AUTHOR>Harry Robinson</AUTHOR><AUTHOR>Dan North</AUTHOR><AUTHOR>Steve Freeman</AUTHOR><AUTHOR>Nat Pryce</AUTHOR><AUTHOR>Christine Newman</AUTHOR><AUTHOR>Andrin von Rechenberg</AUTHOR><AUTHOR>Ade Oshineye</AUTHOR><AUTHOR>Timur Hairullin</AUTHOR><AUTHOR>James Richardson</AUTHOR><AUTHOR>James Lyndsay</AUTHOR><AUTHOR>Jordan Dea-Mattson</AUTHOR><AUTHOR>Curtis "Ovid" Poe</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT><BLIST><TITLE>Some lighting talks:</TITLE><ITEM>automated test and lean manufacturing/product design</ITEM><ITEM>jMock</ITEM><ITEM>jMock2 vs jMock1</ITEM><ITEM>how to explain the value of automated test to non-IT persons</ITEM><ITEM>building a database of User Agent capabilities</ITEM><ITEM>some advertisement for ThoughtWorks</ITEM><ITEM>take into account the JavaScript execution time on the client PC</ITEM><ITEM>how to sell automated test? </ITEM><ITEM>some tests need to be manual but manual testers need to use their brain more than their hands so they require stuff like snippets of automation, bulk comparison, and virtual machines</ITEM><ITEM>avoiding single point of failure in test strategies: integrating the testing levels and the development tools, and TestQuest</ITEM><ITEM>Test Anything Protocol</ITEM></BLIST></COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>  
        <ITEM><BLIST><TITLE>2007</TITLE>
          <ITEM><ARTICLE><X><T>GTAC 2007: Patrick Copeland - Keynote</T><A>https://www.youtube.com/watch?v=pDtfMYyaTQY</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>45</MINUTE><SECOND>10</SECOND></DURATION></X><AUTHOR>Patrick Copeland</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH><DAY>23</DAY></DATE><COMMENT>Patrick Copeland presents Google testing: the challenge to test complex systems, having developers writing tests, certification within one day&#x2026;</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>  
        <ITEM><BLIST><TITLE>2008</TITLE>
          <ITEM><ARTICLE><X><T>GTAC 2008: Advances in Automated Software Testing Technologies</T><A>https://www.youtube.com/watch?v=HEpSdSyU03I</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>50</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR>Elfriede Dustin</AUTHOR><AUTHOR>Marcus Borch</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>23</DAY></DATE><COMMENT>The speakers describe how their company, <X><T>Innovative Defense Technologies</T><A>http://www.innovativedefense.com/</A><L>en</L><F>HTML</F></X>, is using many open source tools to automatically generate automated tests.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2008: The Value of Small Tests</T><A>https://www.youtube.com/watch?v=MpG2i_6nkUg</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>38</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR>Christopher Semturs</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>24</DAY></DATE><COMMENT>How a tester can/should educate developers to perform tests by using dependency injection and mocks.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2008: The New Genomics - Software Development at Petabyte Scale</T><A>https://www.youtube.com/watch?v=A64WKH9gNI8</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>48</MINUTE><SECOND>0</SECOND></DURATION></X><AUTHOR>Matt Wood</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>23</DAY></DATE><COMMENT>A description of the hardware/software the <X><T>Wellcome Trust Sanger Institute</T><A>http://www.sanger.ac.uk</A><L>en</L><F>HTML</F></X> uses to handle 75 petabytes of data per week.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2008: Taming the Beast - How to Test an AJAX Application</T><A>https://www.youtube.com/watch?v=5jjrTBFZWgk</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR>Markus Clermont</AUTHOR><AUTHOR>John Thomas</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>23</DAY></DATE><COMMENT>Markus and John suggest testing each layer independently, then testing layer pairs, and at last doing a few tests on the whole system. The quick informal survey of the audience is also interesting.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2008: Practicing Testability in the Real World</T><A>https://www.youtube.com/watch?v=hL829wNaF78</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>7</MINUTE><SECOND>10</SECOND></DURATION></X><AUTHOR>Vishal Chowdhary</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>24</DAY></DATE><COMMENT>Vishal arguments why testability should be taken into account when designing software. He also describes the SOCK principle: Simplicity, Observability, Control, and Knowledge.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>  
        <ITEM><BLIST><TITLE>2009</TITLE>
          <ITEM><ARTICLE><X><T>GTAC 2009 - Precondition Satisfaction by Smart Object Select</T><A>https://www.youtube.com/watch?v=HjVdmXGP84s</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>56</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR>Yi Wei</AUTHOR><AUTHOR>Serge Gebhardt</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>Trying to get better random tests by selecting only the inputs objects that fulfil the preconditions.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='1'><T>GTAC 2009 - Fighting Layout Bugs</T><A>https://www.youtube.com/watch?v=WY3C6FHqSqQ</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>56</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR>Michael Tamm</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>Michael Tamm presents three ways to find some layout bugs: validating the HTML, validating the CSS, and, his real novelty, writing some heuristics to analyze the page.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2009 - Achieving Web Test Automation with a Mixed-Skill</T><A>https://www.youtube.com/watch?v=kCpDskZpA3I</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>47</SECOND></DURATION></X><AUTHOR>Mark Micallef</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>Mark Micallef explains how he has started to use cucumber to allow different types of profiles (analysts vs enginers) to test web sites and .NET applications.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2009 - Automatic Workarounds for Web Applications</T><A>https://www.youtube.com/watch?v=P0W-HuoFDro</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>0</SECOND></DURATION></X><AUTHOR>Mauro Pezz&#xE8;</AUTHOR><AUTHOR>Alessandra Gorla</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>A study creating a database of workarounds and trying to apply them automatically when the user reports a failure. I am not sure of the interest of this: this cannot be used for applications modifying data (the data would be garbaged by the workaround tries), this can probably work only for some scripting languages, the set of bug types must be limited&#x2026;</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2009 - Lightning Talks</T><A>https://www.youtube.com/watch?v=SMPSURr0QXo</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>41</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR>Sylvain Hall&#xE9;</AUTHOR><AUTHOR>Fred Beringer</AUTHOR><AUTHOR>David Conti</AUTHOR><AUTHOR>Jason Huggins</AUTHOR><AUTHOR>Rapha&#xEB;l Marvie</AUTHOR><AUTHOR>Alec Munru</AUTHOR><AUTHOR>Chritiane Phillips</AUTHOR><AUTHOR>Weiwei Cheng</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>Some random subjects with a few interesting presentations.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2009 - Score One for Quality!</T><A>https://www.youtube.com/watch?v=m7hI_ah-bt0</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>45</MINUTE><SECOND>15</SECOND></DURATION></X><AUTHOR>Joshua Williams</AUTHOR><AUTHOR>Ross Smith</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>The speakers suggest using games, inside a company, to perform some testing activities. They give the example of crowdsourcing (internally to Microsoft) the review of Windows 7 localizations.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2009 - JsTestDriver</T><A>https://www.youtube.com/watch?v=aDKGGZv-T4M</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>42</MINUTE><SECOND>21</SECOND></DURATION></X><AUTHOR>Jeremie Lenfant-Engelmann</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>A presentation of JsTextDriver, a JavaScript test-running platform able to drive several browsers in parallel.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2009 - Automated Performance Test Data Collection and Reporting</T><A>https://www.youtube.com/watch?v=qQgDDAan4rM</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>52</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR>David Burns</AUTHOR><AUTHOR>David Henderson</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>A description of an automated performance measurement and reporting environment. YSlow is used for generating the data.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>2010</TITLE>
          <ITEM><ARTICLE><X><T>GTAC 2010: The Future of Front-End Testing</T><A>https://www.youtube.com/watch?v=oX-0Mt5zju0</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR>Simon Stewart</AUTHOR><AUTHOR>Greg Dennis</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>Some advice on automated front-end tests, Selenium, and the good and bad things looming in the future.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: Crowd Source Testing, Mozilla Community Style</T><A>https://www.youtube.com/watch?v=-MkyZG2Wa_E</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>17</SECOND></DURATION></X><AUTHOR>Matt Evans</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>Some information on Mozilla testing process.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: Special Lightning Talk - Testivus on Testability</T><A>https://www.youtube.com/watch?v=wJbQgC_KTtg</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>5</MINUTE><SECOND>58</SECOND></DURATION></X><AUTHOR>Alberto Savoia</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>The humorous karma of unit testing.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: What Testability Tells Us About the Software Performance Envelope</T><A>https://www.youtube.com/watch?v=1keyEiJHqPw</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>5</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR>Robert V. Binder</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A general presentation on testing where Robert V. Binder claims that model-based testing enables to improve by two orders of magnitude the test productivity and the resulting product reliability.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: Automatically Generating Test Data for Web Applications</T><A>https://www.youtube.com/watch?v=lmS5ElMyIHU</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>12</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR>Jeff Offutt</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>29</DAY></DATE><COMMENT>Most of this talk is general information about testing which has been heard thousands times before, only the Automated Test Data Generation part is interesting.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: Lessons Learned from Testability Failures</T><A>https://www.youtube.com/watch?v=4CFj5thxYQA</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>40</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR>Esteban Manchado Vel&#xE1;zquez</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>29</DAY></DATE><COMMENT>Some examples from Opera where the software was not properly testable and why testability is important.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: Turning Quality on its Head</T><A>https://www.youtube.com/watch?v=cqwXUTjcabs</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>18</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR>James Whittaker</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>29</DAY></DATE><COMMENT>After some general comment on developers vs testers, a presentation of Testify, a tool based on ACC (Attribute / Component / Capability) to help testers being more productive.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: Flexible Design? Testable Design? You Don't Have To Choose!</T><A>https://www.youtube.com/watch?v=K3q_y8H1ZTo</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>3</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR>Russ Rufer</AUTHOR><AUTHOR>Tracy Bialik</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>29</DAY></DATE><COMMENT>Russ and Tracy describe some design mistakes, describe how to fix them, and explain why the fixed design also results into a better testability.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2010: Twist, A Next Generation Functional Testing Tool for Building and Evolving Test Suites</T><A>https://www.youtube.com/watch?v=13oE_7SVGoQ</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>48</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR>Vivek Prahlad</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of Twist, a tool to write test scenario at a functional level.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>2011</TITLE>
          <ITEM><ARTICLE><X><T>GTAC 2011: Opening Keynote Address - Test is Dead</T><A>https://www.youtube.com/watch?v=X1jWe5rOu3g</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR>Alberto Savoia</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>The evolution of testing: from building it right to building the right it, by using pretotyping / Minimum Viable Product.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>GTAC 2011: Keynote - How Hackers See Bugs</T><A>https://www.youtube.com/watch?v=onpxOG3TrWg</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>16</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR>Hugh Thompson</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>Some random ideas about security, there is nothing new here, but Hugh Thompson is a good showman.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2011: Developing and Testing WebGL</T><A>https://www.youtube.com/watch?v=olyxa0LVtiI</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>33</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR>Roy Williams</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>After a short introduction to WebGL, some advice on testing applications using it and the announcement of GLSL-Unit, a unit testing framework to test shaders.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2011: BidiChecker: Automated Bidi Testing of Web Applications</T><A>https://www.youtube.com/watch?v=dTrzDFP8yVg</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>34</MINUTE><SECOND>11</SECOND></DURATION></X><AUTHOR>Yana Margolin</AUTHOR><AUTHOR>Jason Elbaum</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>First, a description of the bidi problem, then a presentation of a tool to detect bidi bugs.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2011: How to Hit a Moving Target in the Cloud</T><A>https://www.youtube.com/watch?v=Q2fUFSdUq20</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>44</MINUTE><SECOND>0</SECOND></DURATION></X><AUTHOR>Vishal Chowdhary</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>How Microsoft is testing its translator service, a piece of software whose results are always evolving.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>GTAC 2011: Lightning Talks I</T><A>https://www.youtube.com/watch?v=h7kk-WdiPy0</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>28</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR>Roussi Roussev</AUTHOR><AUTHOR>Chris Chen</AUTHOR><AUTHOR>Timothy Crooks</AUTHOR><AUTHOR>Ekaterina Kamenskaya</AUTHOR><AUTHOR>Sai Chintala</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>Using the cloud for testing, ScriptCover (a JS test coverage tool), SalesForce testing infrastructure&#x2026;</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2011: Keynote - Part the Clouds and See Fact from Fiction</T><A>https://www.youtube.com/watch?v=nXIA3VYN1To</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>13</SECOND></DURATION></X><AUTHOR>Anthony Voellm</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>Some very high level information about the cloud and about testing in it. Nevertheless, the whole overview is OK.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2011: WebDriver</T><A>https://www.youtube.com/watch?v=OsNkcUq0veI</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>45</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR>Simon Stewart</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>How to create a test infrastructure using WebDriver.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2011: Lightning Talks II (Web Testing)</T><A>https://www.youtube.com/watch?v=bU5lb32EY8s</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>26</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR>Dounia Berrada</AUTHOR><AUTHOR>David Clarke</AUTHOR><AUTHOR>Matt DeVore</AUTHOR><AUTHOR>David Burns</AUTHOR><AUTHOR>Jerome Mueller</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>WebDriver for mobiles, writing tests in plain English, heat map, NativeDriver to test native iOS and Android applications&#x2026;</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality ='-1'><T>GTAC 2011: The Latest in Google Test Tools</T><A>https://www.youtube.com/watch?v=fQtBrmUU8Uk</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR>Ibrahim El Far</AUTHOR><AUTHOR>Jason Arbon</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>A presentation of BITE (the "head up display" bug reporting system that James Whittaker described in the past) and of some quality bots.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2011: Closing Keynote - Secrets of World Class Software Organizations</T><A>https://www.youtube.com/watch?v=EE-t5J7hnHE</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>3</MINUTE><SECOND>42</SECOND></DURATION></X><AUTHOR>Steve McConnell</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>The common traits of the best software companies: hiring the best talents, strong sense of mission, business accountability, commitment to quality, frequent introspection, practices adapted to teams, all of these resulting into a high commitment of the staff.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>  
        <ITEM><BLIST><TITLE>2013</TITLE>
          <ITEM><ARTICLE><X><T>GTAC 2013: WebDriver for Chrome</T><A>https://www.youtube.com/watch?v=dMwUZxRgJWs</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>15</MINUTE><SECOND>6</SECOND></DURATION></X><AUTHOR>Ken Kania</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE><COMMENT>A new version of WebDriver for Chrome is available, aiming at supporting all platforms. This talk quickly describes how this new version has been implemented.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2013: Karma - Test Runner for JavaScript</T><A>https://www.youtube.com/watch?v=YG5DEzaQBIc</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>15</MINUTE><SECOND>34</SECOND></DURATION></X><AUTHOR>Vojta Jina</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE><COMMENT>Description of Karma, a JavaScript Unit Test runner.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2013 Day 1 Closing Keynote: How Facebook Tests Facebook on Android</T><A>https://www.youtube.com/watch?v=HUE_yrd8tl0</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>46</MINUTE><SECOND>43</SECOND></DURATION></X><AUTHOR>Simon Stewart</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE><COMMENT>A description of Facebook development environment: each team develops its features on all platforms, Git with one branch, homemade build system, tests&#x2026;</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='1'><T>GTAC 2013 Day 2 Keynote: Testable JavaScript - Architecting Your Application for Testability</T><A>https://www.youtube.com/watch?v=JjqKQ8ezwKQ</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>45</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR>Mark Trostler</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>How to write testable JavaScript. This is mostly about applying the SOLID principles.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2013: Web Performance Testing with WebDriver</T><A>https://www.youtube.com/watch?v=0_kAPWSZNY4</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>14</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR>Michael Klepikov</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>Chrome WebDriver has been extended to support profiling, so it is now possible to automate performance tests with it.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='-1'><T>GTAC 2013: Finding Culprits Automatically in Failing Builds - i.e. Who Broke the Build?</T><A>https://www.youtube.com/watch?v=SZLuBYlq3OM</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>16</MINUTE><SECOND>34</SECOND></DURATION></X><AUTHOR>Celal Ziftci</AUTHOR><AUTHOR>Vivek Ramavajjala</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>A tool using heuristics to find which commit broke the build.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='-1'><T>GTAC 2013: Empirical Investigation of Software Product Line Quality</T><A>https://www.youtube.com/watch?v=fiG-SdNcjTE</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>44</MINUTE><SECOND>42</SECOND></DURATION></X><AUTHOR>Katerina Goseva-Popstojanova</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>Using statistics to try to build a predictive model of which modules will contain the most bugs.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2013: AddressSanitizer, ThreadSanitizer and MemorySanitizer -- Dynamic Testing Tools for C++</T><A>https://www.youtube.com/watch?v=Q2C2lP8_tNE</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>29</MINUTE><SECOND>14</SECOND></DURATION></X><AUTHOR>Kostya Serebryany</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GTAC 2013: Drinking the Ocean - Finding XSS at Google Scale</T><A>https://www.youtube.com/watch?v=rd5TZKRg-lc</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>31</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR>Claudio Criscione</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The history of how a Google team created a tool to detect XSS bugs.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Leah Stockley</TITLE>
        <ITEM><ARTICLE><X><T>Visual Test Models</T><A>http://www.inspiredtester.com/1/post/2013/04/visual-test-models.html</A><L>en</L><F>HTML</F></X><AUTHOR>Leah Stockley</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>25</DAY></DATE><COMMENT>Using a Visual Test Model, i.e. a mindmap representing the test coverage.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Roy Osherove</TITLE>
        <ITEM><ARTICLE><X><T>Naming standards for unit tests</T><A>http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html</A><L>en</L><F>HTML</F></X><AUTHOR>Roy Osherove</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>4</MONTH><DAY>3</DAY></DATE><COMMENT>Roy describes the MethodName_StateUnderTest_ExpectedBehavior naming convention for unit tests.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Refactoring and Design Skills for Test Driven Development SA2013</T><A>https://www.youtube.com/watch?v=9ZSbuwCmwuc</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>26</MINUTE><SECOND>30</SECOND></DURATION></X><AUTHOR>Roy Osherove</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE><COMMENT>(Conference: Software Architect 2013) How to do TDD for brand new applications and for legacy applications. There is nothing new in the first part, but this is still a good TDD explanation. The part about legacy code is more interesting because less frequently spoken about.</COMMENT></ARTICLE></ITEM>
        <ITEM><BLIST><TITLE>NDC 2009</TITLE>
          <ITEM><ARTICLE><X quality='2'><T>Understanding Test Driven Development</T><A>http://osherove.com/videos/2009/8/25/understanding-test-driven-development.html</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR>Roy Osherove</AUTHOR><DATE><YEAR>2009</YEAR></DATE><COMMENT>A good tutorial on how to write unit tests and an introduction to TDD.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='2'><T>Unit Testing Best Practices</T><A>http://osherove.com/videos/2009/8/25/unit-testing-best-practices.html</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR>Roy Osherove</AUTHOR><DATE><YEAR>2009</YEAR></DATE><COMMENT>Some good advice on writing good unit tests, i.e. unit test which are trustworthy, maintainable and readable.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='2'><T>TDD - Understanding Mock Objects</T><A>http://osherove.com/videos/2009/8/25/tdd-understanding-mock-objects.html</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR>Roy Osherove</AUTHOR><DATE><YEAR>2009</YEAR></DATE><COMMENT>A presentation of system isolation: a tutorial on isolation, an explanation of mock vs stub, a demo of NUnit, Rhino Mocks and Typemock's Isolator.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Mocking on the Edge - Isolation at the system level</T><A>http://osherove.com/videos/2009/8/25/mocking-on-the-edge-isolation-at-the-system-level.html</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>49</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR>Roy Osherove</AUTHOR><DATE><YEAR>2009</YEAR></DATE><COMMENT>A presentation of Typemock Open-AOP API and how to use it for stubbing Sharepoint and Silverlight.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><ARTICLE><X><T>Using Test Oracles in Automation</T><A>https://www.youtube.com/watch?v=Yusd_ogkiaQ</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>29</MINUTE><SECOND>28</SECOND></DURATION></X><AUTHOR>Douglas Hoffman</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>4</MONTH><DAY>25</DAY></DATE><COMMENT>This presentation presents some basic, but nevertheless interesting, ideas about strategies to determinate if an automated test succeeded or failed: no oracle, true oracle, consistency, self-referential, and heuristic.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Automation Frameworks</T><A>http://safsdev.sourceforge.net/FRAMESDataDrivenTestAutomationFrameworks.htm</A><L>en</L><F>HTML</F></X><AUTHOR>Carl Nagle</AUTHOR><COMMENT>A presentation of keyword driven automation and an architecture of a framework for such testing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Does my button look big in this? Building testable AJAX Applications</T><A>https://www.youtube.com/watch?v=SziACN56nxQ</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>50</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR>Adam Connors</AUTHOR><AUTHOR>Joe Walnes</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>An application split into MVC components is easier to test automatically (the View may still be manually tested).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>YUI Theater &#x2014; Ron Adams: &#x201C;Automated Integration Testing with YUI Test, Selenium and Hudson&#x201D;</T><A>http://www.yuiblog.com/blog/2009/11/05/video-adams-yuiconf2009/</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>46</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR>Ron Adams</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>11</MONTH><DAY>5</DAY></DATE><COMMENT>A presentation of a TDD environment: unit test framework (YUITest) + test driver (Selenium) + continuous integration (Hudson).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>John Resig: Testing, Performance Analysis, and jQuery 1.4</T><A>https://www.youtube.com/watch?v=72wh5PnEf1k</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>13</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR>John Resig</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>12</MONTH><DAY>11</DAY></DATE><COMMENT>A list of some JavaScript unit tests and performance tools, some JQuery news (performance improvements, event bubbling&#x2026;) and some comment on using HTML 5 on Internet Explorer.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test your app from right to left</T><A>http://googletesting.blogspot.com/2010/11/test-your-app-from-right-to-left.html</A><L>en</L><F>HTML</F></X><AUTHOR>Jason Elbaum</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>11</MONTH><DAY>3</DAY></DATE><COMMENT>Google releases bidichecker, an open source verifying bidirectional text.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Working with Microsoft Moles Framework</T><A>http://www.codeguru.com/csharp/.net/article.php/c18491</A><L>en</L><F>HTML</F></X><AUTHOR>Joydip Kanjilal</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>11</DAY></DATE><COMMENT>A description on how to start with Moles, a framework to mock .NET methods.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Efficient JavaScript unit testing</T><ST>Automate JavaScript code testing across browsers</ST><A>http://www.ibm.com/developerworks/library/os-jstesting/</A><L>en</L><F>HTML</F></X><AUTHOR>Hazem Saleh</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>27</DAY></DATE><COMMENT>An introduction to JSTestDriver.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Tools to unit test your JavaScript</T><ST>Using QUnit, YUI Test, and JSTestDriver</ST><A>http://www.ibm.com/developerworks/library/wa-tools/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Sebastiano Armeli-Battana</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>10</DAY></DATE><COMMENT>A presentation of QUnit, YUI Test, and JSTestDriver.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>JS Unit Testing</T><A>https://www.youtube.com/watch?v=-IYqgx8JxlU</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>55</MINUTE><SECOND>38</SECOND></DURATION></X><AUTHOR>Seth McLaughlin</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>7</MONTH><DAY>16</DAY></DATE><COMMENT>A presentation of Venus.js and a demo of Venus.js and Mocha.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Cost of Testing</T><A>http://googletesting.blogspot.com/2009/10/cost-of-testing.html</A><L>en</L><F>HTML</F></X><AUTHOR>Mi&#x161;ko Hevery</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>2</DAY></DATE><COMMENT>A personal evaluation of the cost of writing unit tests and their benefits.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Selenium</TITLE>
        <ITEM><ARTICLE><X><T>Automate acceptance tests with Selenium</T><ST>How to use the Selenium test tool for functional testing of a Ruby on Rails and Ajax application</ST><A>http://www.scribd.com/doc/924886/Automate-Acceptance-Tests-With-Selenium</A><L>en</L><F>HTML</F></X><AUTHOR>Christian Hellsten</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>12</MONTH><DAY>20</DAY></DATE><COMMENT>A short presentation of Selenium to test Ajax applications.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality='-1'><T>Selenium: The in-browser acceptance testing tool</T><A>https://www.youtube.com/watch?v=78mts_sKNGs</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>41</MINUTE><SECOND>0</SECOND></DURATION></X><AUTHOR>Jason Huggins</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT>Jason tried to demonstrate how a commit in Subversion could trigger CruiseControl which would run the new build accross several OSes and Browsers and generate Flash videos of the automated tests. But the presentation is very unclear and the demo failed&#x2026;</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Selenium Grid: Web Testing in Parallel</T><A>http://www.infoq.com/news/2007/09/selenium-grid-parallel-testing</A><L>en</L><F>HTML</F></X><AUTHOR>Geoffrey Wiseman</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>Selenium Grid can dispatch the tests on several PCs.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='zombie'><T>Watir and Selenium</T><A>http://www.io.com/~wazmo/blog/archives/2005_02.html#000229</A><L>en</L><F>HTML</F></X><AUTHOR>Bret Pettichord</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>A comparison of the two tools.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Fit</TITLE>
        <ITEM><ARTICLE><X quality='-1'><T>Using Fit: An Open-Source Testing Framework</T><A>https://www.youtube.com/watch?v=oLRBzDqucjQ</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR>Rick Mugridge</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>2</MONTH><DAY>9</DAY></DATE><COMMENT>This description of Fit is not clear: instead of speaking of the mechanisms of Fit (such as the fixtures between the storytests and the AUT), Mugridge spends his time trying to convince the audience about the interest of storytests, but his discourse is messy.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>xUnit</TITLE>
        <ITEM><ARTICLE><X><T>Automated Testing Patterns and Smells</T><A>https://www.youtube.com/watch?v=Pq6LHFM4JvE</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>59</MINUTE><SECOND>34</SECOND></DURATION></X><AUTHOR>Gerard Meszaros</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>How to detect and fix issues in unit tests: code smells (tests difficult to understand, tests containing coding errors, tests difficult / impossible to write), behavior smells (tests failing when they should succeed - erratic test, fragile test -, tests succeeding when they should fail), and project smells</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JUnit</TITLE>
        <ITEM><ARTICLE><X><T>Test Infected: Programmers Love Writing Tests</T><A>http://members.pingnet.ch/gamma/junit.htm</A><L>en</L><F>HTML</F></X><AUTHOR>Kent Beck</AUTHOR><AUTHOR>Eric Gamma</AUTHOR><COMMENT>The two authors describe the return of investment of unit testing and propose their own tool for Java: JUnit.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Incremental development with Ant and JUnit</T><A>http://carfield.com.hk/document/java/articles/ant+junit.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Malcolm Davis</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>The author describes how he used Ant for his build process, this one includes automatic unit tests with JUnit.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>JUnit antipatterns</T><ST>How to resolve</ST><A>http://www.ibm.com/developerworks/opensource/library/os-junit/</A><L>en</L><F>HTML</F></X><AUTHOR>Alex Garrett</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>Some common testing errors: testing only the expected case, forgetting boundary situations, breaking encapsulation, and too much test complexity.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Jasmine</TITLE>
        <ITEM><ARTICLE><X><T>Testing JavaScript Using the Jasmine Framework</T><A>http://www.htmlgoodies.com/beyond/javascript/testing-javascript-using-the-jasmine-framework.html</A><L>en</L><F>HTML</F></X><AUTHOR>Rob Gravelle</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>9</MONTH></DATE><COMMENT>A short introduction to writing JavaScript unit tests using Jasmine.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Mutation testing</TITLE>
    <ITEM><ARTICLE><X><T>Mutation Testing</T><A>http://blog.cleancoder.com/uncle-bob/2016/06/10/MutationTesting.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>10</DAY></DATE><COMMENT>An introduction to mutation testing.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Performance testing</TITLE>
      <ITEM><ARTICLE><X><T>Using open source tools for performance testing</T><A>https://www.youtube.com/watch?v=k9h51BM2h4w</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>4</MINUTE><SECOND>37</SECOND></DURATION></X><AUTHOR>Goranka Bjedov</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT>Some generalities about performance testing of Web applications: description of the different types of performances tests, architecture of a performance test environment, in-house vs vendor vs open source performance tools, keeping all the data for a while&#x2026;</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test coverage</TITLE>
      <ITEM><ARTICLE><X quality='1'><T>Software Negligence and Testing Coverage</T><A>http://www.kaner.com/pdfs/negligence_and_testing_coverage.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Cem Kaner</AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>After describing what is negligence and malpractice, explaining that tests must be prioritized depending on the risks, Cem gives a list of coverage measures as some food for thought..</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Coverage Analysis</T><A>http://www.bullseye.com/coverage.html</A><L>en</L><F>HTML</F></X><AUTHOR>Steve Cornett</AUTHOR><DATE><YEAR>2004</YEAR><MONTH>7</MONTH><DAY>29</DAY></DATE><COMMENT>An exhaustive list of the different types of coverage measurements, but some descriptions are not so clear&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>In pursuit of code quality: Don't be fooled by the coverage report</T><ST>Are your test coverage measurements leading you astray?</ST><A>http://www.ibm.com/developerworks/java/library/j-cq01316/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Glover</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>31</DAY></DATE><COMMENT>An introduction to code coverage. The coverage booby traps are clearly exposed, but this article is too much verbose.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code coverage goal: 80% and no less!</T><A>http://googletesting.blogspot.com/2010/07/code-coverage-goal-80-and-no-less.html</A><L>en</L><F>HTML</F></X><AUTHOR>Alberto Savoia</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>20</DAY></DATE><COMMENT>How much code coverage should we target?</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>The Clean Code Talks: writing testable code</TITLE>
      <ITEM><ARTICLE><X><T>Clean Code Talks - "GuiceBerry"</T><A>https://www.youtube.com/watch?v=4E4672CS58Q</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>49</MINUTE><SECOND>11</SECOND></DURATION></X><AUTHOR>Luiz-Otavio Zorzella</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE><COMMENT>A presentation of GuiceBerry.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>"The Clean Code Talks</T><ST>Unit Testing"</ST><A>https://www.youtube.com/watch?v=wEhu57pih5w</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>32</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR>Mi&#x161;ko Hevery</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>30</DAY></DATE><COMMENT>An introduction to unit testing and dependency injection.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Clean Code Talks - Don't Look For Things!</T><A>https://www.youtube.com/watch?v=RlfLCWKxHJ0</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>37</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR>Mi&#x161;ko Hevery</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>How to write testable code: dependency injection, separating the business logic and the builders, not asserting non-nullness (in my mind, this advice is very bad and the example he gives is badly exploited: the test assumes that the door is not repainted by the <CODEROUTINE>paint()</CODEROUTINE> method, if this is changed in the future, the test breaks)&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Clean Code Talks - "Global State and Singletons"</T><A>https://www.youtube.com/watch?v=-FRm3VPhseI</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR>Mi&#x161;ko Hevery</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>13</DAY></DATE><COMMENT>Why global state is evil and should be get rid of by using dependency injection.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>"The Clean Code Talks</T><ST>Inheritance, Polymorphism, &amp; Testing"</ST><A>https://www.youtube.com/watch?v=4F72VULWFvc</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>38</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR>Mi&#x161;ko Hevery</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>20</DAY></DATE><COMMENT>Nothing interesting here, this presentation is a basic teaching of the purpose of polymorphism.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Design Tech Talk Series Presents: OO Design for Testability</T><A>https://www.youtube.com/watch?v=acjvKJiOvXw</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>56</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR>Mi&#x161;ko Hevery</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>6</DAY></DATE><COMMENT>The same information as the previous videos: do not call <CODEROUTINE>new</CODEROUTINE> in the class constructor but inject the dependencies, do not perform work in the constructor, do not use global states, and avoid diving deep in the entities relationship to get some data.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How to Write Clean, Testable Code</T><A>https://www.youtube.com/watch?v=XcT4yYu_TTs</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>18</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR>Mi&#x161;ko Hevery</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>12</MONTH><DAY>15</DAY></DATE><COMMENT>Still the same information as the previous videos.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>

</CONTENT>
</PAGE>

