<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Java basics</TITLE>
<PATH>links/javabasics.xml</PATH>
<DATE><YEAR>2020</YEAR><MONTH>11</MONTH><DAY>2</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><CLIST><TITLE>Tutorials</TITLE>
    <ITEM><X><T>Java</T><A>https://docs.oracle.com/javase/tutorial/java/TOC.html</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Essential</T><A>https://docs.oracle.com/javase/tutorial/essential/TOC.html</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Collections</T><A>https://docs.oracle.com/javase/tutorial/collections/TOC.html</A><L>en</L><F>HTML</F></X></ITEM>
  </CLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles</TITLE>
    <ITEM><ARTICLE><X quality='1'><T>Programming With Assertions</T><A>https://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html</A><L>en</L><F>HTML</F></X><COMMENT>A detailed description of <CODEROUTINE>assert</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java theory and practice: To mutate or not to mutate?</T><ST>Immutable objects can greatly simplify your life</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp02183/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>2</MONTH><DAY>18</DAY></DATE><COMMENT>The advantage of immutable objects and how to implement them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java theory and practice: Is that your final answer?</T><ST>Guidelines for the effective use of the final keyword</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp1029/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>Some good and some bad reasons to use the <CODEROUTINE>final</CODEROUTINE> keyword.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Diagnosing Java code: Design for easy code maintenance</T><ST>Avoid unnecessary mutation and access to make code robust and easier to maintain</ST><A>https://www.ibm.com/developerworks/java/library/j-djc01153/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>1</MONTH></DATE><COMMENT>Immutability, <CODEROUTINE>final</CODEROUTINE> and unit test help code maintenance. But the maintenance issue is much more that the few points described in this article.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java theory and practice: Be a good (event) listener</T><ST>Guidelines for writing and supporting event listeners</ST><A>https://www.ibm.com/developerworks/library/j-jtp07265/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>7</MONTH><DAY>26</DAY></DATE><COMMENT>Some common mistakes when coding event dispatchers and event listeners: race conditions if we loop on the listener list while another thread adds/removes a listener, let "this" escape from the constructor, firing an event from a thread other than the EDT, forgetting to unregister a listener, throwing an unchecked exception in a listener.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Don’t Overdo the “Principle of Least Astonishment” Cargo Cult</T><A>https://blog.jooq.org/2017/07/18/dont-overdo-the-principle-of-least-astonishment-cargo-cult/</A><L>en</L><F>HTML</F></X><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>18</DAY></DATE><COMMENT>Advocating for labeled <CODEROUTINE>break</CODEROUTINE> and <CODEROUTINE>continue</CODEROUTINE> statements.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Yet 4 More Techniques for Writing Better Java</T><ST>Want to write better Java? Here's how to improve your coding with argument validation, in-depth knowledge of the Object class, jshell, and reading good code.</ST><A>https://dzone.com/articles/yet-4-more-techniques-for-writing-better-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Albano</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>22</DAY></DATE><COMMENT>The subtitle says all: <CODEROUTINE>Objects.requireNonNull()</CODEROUTINE>, <CODEROUTINE>Objects.requireNonNullElse()</CODEROUTINE>, <CODEROUTINE>Objects.requireNonNullElseGet()</CODEROUTINE>, <CODEROUTINE>Objects.checkFromIndexSize()</CODEROUTINE>, <CODEROUTINE>Objects.checkFromToIndex()</CODEROUTINE>, <CODEROUTINE>Objects.checkFromToIndex()</CODEROUTINE>, <CODEROUTINE>Object.equals()</CODEROUTINE>, <CODEROUTINE>Object.HashCode()</CODEROUTINE>…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java Challengers #1: Method overloading in the JVM</T><ST>Can you outthink the Java virtual machine?</ST><A>https://www.javaworld.com/article/3268983/learn-java/java-challengers-1-method-overloading-in-the-jvm.amp.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Chinelato Del Nero</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>25</DAY></DATE><COMMENT>The rules defining which versions of an overloaded method is called: first widening is considered, then boxing and, at last, varargs.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java Challengers #3: Polymorphism and inheritance</T><ST>Wrap your brain around method invocation in polymorphic method calls</ST><A>https://www.javaworld.com/article/3290403/core-java/java-challengers-3-polymorphism-and-inheritance.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Chinelato Del Nero</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>A basic explanation of method overriding.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-2'><T>Shallow and Deep Java Cloning</T><ST>While not recommended, cloning is a viable way to copy an object. Let's dive into Shallow Cloning, Deep Cloning, how to use them both, and when to avoid them.</ST><A>https://dzone.com/articles/shallow-and-deep-java-cloning</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Naresh</FIRSTNAME><LASTNAME>Joshi</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>8</MONTH><DAY>19</DAY></DATE><COMMENT>This classical description of shallow vs. deep cloning contains errors about overriding methods.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Modern Java toys that boost productivity, from type inference to text blocks</T><ST>Developers using older versions of the Java platform are missing out.</ST><A>https://blogs.oracle.com/javamagazine/modern-java-toys-that-boost-productivity-from-type-inference-to-text-blocks</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Angie</FIRSTNAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>23</DAY></DATE><COMMENT>A short presentation of local variable type inference, <CODEROUTINE>takeWhile</CODEROUTINE> / <CODEROUTINE>dropWhile</CODEROUTINE>, switch expressions, records, and text blocks.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE><CODEROUTINE>hashCode()</CODEROUTINE> and <CODEROUTINE>equals()</CODEROUTINE></TITLE>
      <ITEM><ARTICLE><X><T>Java theory and practice: Hashing it out</T><ST>Defining hashCode() and equals() effectively and correctly</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp05273/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>5</MONTH><DAY>27</DAY></DATE><COMMENT>When and how to define the <CODEROUTINE>hashCode()</CODEROUTINE> and <CODEROUTINE>equals()</CODEROUTINE> methods.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-2'><T>Java Challengers #4: Comparing Java objects with equals() and hashcode()</T><ST>What is the contract between equals() and hashcode()? Learn how these methods work together when comparing Java objects</ST><A>https://www.javaworld.com/article/3305792/learn-java/java-challengers-4-comparing-java-objects-with-equals-and-hashcode.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Chinelato Del Nero</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>This explanation contains errors.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Strings</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>When are two strings equal?</T><A>http://java.sun.com/developer/JDCTechTips/2004/tt0504.html#2</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Daniel</FIRSTNAME><MIDDLENAME>H.</MIDDLENAME><LASTNAME>Steinberg</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>5</MONTH><DAY>4</DAY></DATE><COMMENT>A quick introduction to the common string pool and the literal strings consolidation in a same package.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Text Normalization</T><A>http://blog.sinzy.net/ifyr/entry/12044</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sergey</FIRSTNAME><LASTNAME>Groznyh</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>2</MONTH></DATE><COMMENT>How to perform Unicode canonicalization.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Ropes: Theory and practice</T><ST>Why and when to use Ropes for Java for string manipulations</ST><A>https://www.ibm.com/developerworks/java/library/j-ropes/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Amin</FIRSTNAME><LASTNAME>Ahmad</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>2</MONTH><DAY>12</DAY></DATE><COMMENT>An introduction to Ropes, when to use them, when to not use them.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Unicode surrogate programming with the Java language</T><ST>Coding options and performance considerations</ST><A>https://www.ibm.com/developerworks/java/library/j-unicode/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Masahiko</FIRSTNAME><LASTNAME>Maedera</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>24</DAY></DATE><COMMENT>A good presentation of how to manipulate Unicode surrogates.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Do's and Don’ts of Java Strings</T><ST>This whirlwind tour of Java strings covers best practices for internationalization, localization, concatenation, and comparators, and more.</ST><A>https://dzone.com/articles/the-dos-and-donts-of-java-strings</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Lyndsey</FIRSTNAME><LASTNAME>Padget</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>I18N/L10N (the given definition is wrong), concatenation, comparison and collation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Challengers #2: String comparisons</T><ST>How String methods, keywords, and operators process comparisons in the String pool</ST><A>https://www.javaworld.com/article/3276354/java-language/java-challengers-2-string-comparisons.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Chinelato Del Nero</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>5</MONTH><DAY>29</DAY></DATE><COMMENT>Some very basics facts about <CODEROUTINE>String</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Check If a String Contains a Substring</T><A>https://www.baeldung.com/java-string-contains-substring</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>This article states the obvious.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Integers</TITLE>
      <ITEM><ARTICLE><X><T>Why YOU should use Integer.valueOf(int)</T><A>https://puredanger.github.io/tech.puredanger.com/2007/02/01/valueof/</A><L>en</L><F>HTML</F></X><DATE><YEAR>2007</YEAR><MONTH>2</MONTH><DAY>1</DAY></DATE><COMMENT>Some micro-optimisation by replacing <CODEROUTINE>new Integer()</CODEROUTINE> by <CODEROUTINE>Integer.valueOf()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Floating points</TITLE>
      <ITEM><ARTICLE><X><T>Java floating-point number intricacies</T><A>https://blog.csdn.net/jierui001/article/details/3278382</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Wang</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>8</MONTH></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Where's your point?</T><ST>Tricks and traps with floating point and decimal numbers</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp0114/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>1</MONTH></DATE><COMMENT>Some general advice about floating points and other ones about Java's <CODEROUTINE>Float</CODEROUTINE>, <CODEROUTINE>Double</CODEROUTINE> and <CODEROUTINE>BigDecimal</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java's new math, Part 1: Real numbers</T><A>https://www.ibm.com/developerworks/java/library/j-math1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A description of the Math methods added in Java 1.5: <CODEROUTINE>Math.hypoth()</CODEROUTINE>, <CODEROUTINE>Math.log10()</CODEROUTINE>, <CODEROUTINE>Math.cbrt()</CODEROUTINE>, <CODEROUTINE>Math.cosh()</CODEROUTINE>, <CODEROUTINE>Math.sinh()</CODEROUTINE>, <CODEROUTINE>Math.tanh()</CODEROUTINE>, and <CODEROUTINE>Math.signum()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE pred='https://www.ibm.com/developerworks/java/library/j-math1/'><X><T>Java's new math, Part 2: Floating-point numbers</T><A>https://www.ibm.com/developerworks/java/library/j-math2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>1</MONTH><DAY>13</DAY></DATE><COMMENT>Some functions to manipulate Floats and Doubles: <CODEROUTINE>Math.getExponent()</CODEROUTINE>, <CODEROUTINE>Math.nextUp()</CODEROUTINE>, <CODEROUTINE>Math.nextAfter()</CODEROUTINE>, <CODEROUTINE>Math.ulp()</CODEROUTINE>, <CODEROUTINE>Math.copySign()</CODEROUTINE>, <CODEROUTINE>Math.log1p()</CODEROUTINE>, and <CODEROUTINE>Math.expm1()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Four common pitfalls of the BigDecimal class and how to avoid them</T><ST>When doing currency calculations in Java, you might use java.math.BigDecimal—but beware of some of that class’s unique challenges.</ST><A>https://blogs.oracle.com/javamagazine/four-common-pitfalls-of-the-bigdecimal-class-and-how-to-avoid-them</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Frank</FIRSTNAME><LASTNAME>Kiwy</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>9</MONTH><DAY>11</DAY></DATE><COMMENT>Four pitfalls (the double constructor and the binary representation of doubles, the precision of doubles, <CODEROUTINE>equals</CODEROUTINE>, and rounding) and a proposal to avoid them.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Enums</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Enums in Java (One More Time)</T><A>http://www.onjava.com/pub/a/onjava/2003/04/23/jenum.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><MIDDLENAME>I.</MIDDLENAME><LASTNAME>Moore</LASTNAME><NAMESUFFIX>Jr.</NAMESUFFIX></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE><COMMENT>The author describes why and how he created a preprocessor to support enums in Java.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Java 1.5 Tiger: A Developer's Notebook - Enumerated Types</T><A>http://www.oreilly.com/catalog/javaadn/chapter/ch03.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Flanagan</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>8</MONTH></DATE><COMMENT>The enums are now part of the language. This book extract is a good description of them.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Dates</TITLE>
      <ITEM><ARTICLE><X><T>Calculating Java dates</T><ST>Take the time to learn how to create and use dates</ST><A>https://www.infoworld.com/article/2076270/calculating-java-dates.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><LASTNAME>Nielsen</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR><MONTH>12</MONTH></DATE><COMMENT>An introduction to <CODEROUTINE>Date</CODEROUTINE>, <CODEROUTINE>DateFormat</CODEROUTINE> and <CODEROUTINE>GregorianCalendar</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Making Sense of Java's Dates</T><A>http://www.onjava.com/pub/a/onjava/2003/06/05/java_calendar.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Philipp</FIRSTNAME><MIDDLENAME>K.</MIDDLENAME><LASTNAME>Janert</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>6</DAY></DATE><COMMENT>An overview of the date classes and some comments about their messy design (but this is a characteristic of the whole Java, isn't it?)</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Exceptions</TITLE>
      <ITEM><ARTICLE><X><T>The try-with-resources Statement</T><A>https://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html</A><L>en</L><F>HTML</F></X><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Reusing Exceptions</T><A>http://java.sun.com/developer/JDCTechTips/2003/tt0422.html#2</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>22</DAY></DATE><COMMENT>How to use <CODEROUTINE>fillInStackTrace</CODEROUTINE> to set the stack to its correct value when the exception has been created somewhere else.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Best Practices for Exceptions Handling</T><A>http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gunjan</FIRSTNAME><LASTNAME>Doshi</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>11</MONTH><DAY>19</DAY></DATE><COMMENT>Some good rules for designing and coding with exceptions.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Eye on performance: Exceptions to exceptions</T><ST>Understanding the real costs</ST><A>https://www.ibm.com/developerworks/library/j-perf02104.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH><DAY>10</DAY></DATE><COMMENT>The conclusion of this article is expected: using exceptions as a flow control is not performance effective.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Taming Tiger: Default exception handling in threads</T><ST>What to do with uncaught exceptions</ST><A>https://www.ibm.com/developerworks/java/library/j-tiger08104/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>8</MONTH><DAY>10</DAY></DATE><COMMENT>A longer-than-necessary example of using <CODEROUTINE>Thread.UncaughtExceptionHandler</CODEROUTINE></COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Exception-Handling Antipatterns</T><A>https://community.oracle.com/docs/DOC-983543</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tim</FIRSTNAME><LASTNAME>McCune</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>4</MONTH><DAY>6</DAY></DATE><COMMENT>After a short and clear introduction on Java exceptions, the author gives a list of worst practices.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Tip: When you can't throw an exception</T><ST>Working with exception-free superclasses</ST><A>https://www.ibm.com/developerworks/java/library/j-ce/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>6</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Implementing Custom Exceptions in Java</T><ST>Learn why, when, and how to use custom exceptions in Java projects, including best practices, coding techniques, and tips for documentation.</ST><A>https://dzone.com/articles/implementing-custom-exceptions-in-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thorben</FIRSTNAME><LASTNAME>Janssen</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>13</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Suppressed Exceptions</T><A>https://www.baeldung.com/java-suppressed-exceptions</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Amy</FIRSTNAME><LASTNAME>DeGregorio</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>A short presentation of <CODEROUTINE>Throwable.addSuppressed</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>11 Mistakes Java Developers make when Using Exceptions</T><A>https://javachallengers.com/11-mistakes-java-developers-make-when-using-exceptions/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Chinelato Del Nero</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>28</DAY></DATE><COMMENT>Some basic advice on using exceptions.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Collections</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Using Collections with JDK1.2</T><A>http://developer.java.sun.com/developer/technicalArticles/Collections/Using/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Glen</FIRSTNAME><LASTNAME>McCluskey</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR><MONTH>12</MONTH></DATE><COMMENT>This paper is a short but rather complete description of the collections (list, set and map) which are part of Java 2.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Introduction to the Collections Framework</T><A>http://developer.java.sun.com/developer/onlineTraining/collections/Collection.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>1999</YEAR><MONTH>10</MONTH></DATE><COMMENT>This is slightly more detailed description of the collections.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Magic with Merlin: Maintaining insertion order</T><ST>Working with the new linked HashSet and HashMap implementations</ST><A>https://www.ibm.com/developerworks/java/library/j-mer0821/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>8</MONTH></DATE><COMMENT>An introduction to the <CODEROUTINE>LinkedHashSet</CODEROUTINE> and <CODEROUTINE>LinkedHashMap</CODEROUTINE> classes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Taming Tiger: The Collections Framework</T><ST>Get a handle on the new collection types and additional features of existing classes and interfaces</ST><A>https://www.ibm.com/developerworks/java/library/j-tiger07195/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>The new <CODEROUTINE>Arrays</CODEROUTINE> and <CODEROUTINE>Collections</CODEROUTINE> methods and the <CODEROUTINE>Queue</CODEROUTINE> interface.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about … the Java Collections API, Part 1</T><ST>Customize and extend Java Collections</ST><A>https://www.ibm.com/developerworks/java/library/j-5things2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>20</DAY></DATE><COMMENT>Collection rather than arrays, <CODEROUTINE>addAll</CODEROUTINE> or <CODEROUTINE>removeAll</CODEROUTINE>, <CODEROUTINE>for</CODEROUTINE> loop, <CODEROUTINE>reverse</CODEROUTINE>, and creating a new collection class.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE pred='https://www.ibm.com/developerworks/java/library/j-5things2/index.html'><X status='dead'><T>5 things you didn't know about … the Java Collections API, Part 2</T><ST>Mutables to watch out for</ST><A>https://www.ibm.com/developerworks/java/library/j-5things3.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>10</DAY></DATE><COMMENT><CODEROUTINE>ArrayList</CODEROUTINE> vs arrays, <CODEROUTINE>Iterator.remove()</CODEROUTINE>, writing a custom <CODEROUTINE>Iterable</CODEROUTINE>, don't put mutable objects in a <CODEROUTINE>HashMap</CODEROUTINE>, and <CODEROUTINE>TreeSet</CODEROUTINE>'s use of <CODEROUTINE>compare()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Using the Java Arrays Binary Search Methods</T><A>https://www.htmlgoodies.com/beyond/java/using-the-java-arrays-binary-search-methods.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Gravelle</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>3</MONTH><DAY>15</DAY></DATE><COMMENT>A description of <CODEROUTINE>Arrays.binarySearch()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Collections Are Evolving</T><ST>Collections have seen a lot of changes in the past couple of JDKs. Let's look at how they've improved in Java 9 and Java 10.</ST><A>https://dzone.com/articles/java-collections-are-evolving</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>6</MONTH><DAY>6</DAY></DATE><COMMENT>A description of the APIs added in Java 10 to get an immutable collection from a <CODEROUTINE>Stream</CODEROUTINE> or by copying an existing <CODEROUTINE>Collection</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Difference Between Collection.stream().forEach() and Collection.forEach()</T><A>https://www.baeldung.com/java-collection-stream-foreach</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Krimgen</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>The subtle differences between <CODEROUTINE>Collection.stream().forEach()</CODEROUTINE> and <CODEROUTINE>Collection.forEach()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>The Developer's Guide to Collections</TITLE>
        <ITEM><ARTICLE><X><T>The Developer's Guide to Collections</T><ST>t's time for a deep dive into collections in Java, including the defining philosophy of collections, important methods, and advice for implementation.</ST><A>https://dzone.com/articles/a-deep-dive-into-collections</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Albano</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>13</DAY></DATE><COMMENT>A good description of the <CODEROUTINE>Collection</CODEROUTINE> interface.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Developer's Guide to Collections: Lists</T><ST>It's time for another deep dive into Java collections. This time, we'll explore the concept, proper usage, and tips for implementing lists.</ST><A>https://dzone.com/articles/the-developers-guide-to-collections-lists</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Albano</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>A good description of <CODEROUTINE>List</CODEROUTINE>s with a slight error in <CODEROUTINE>listIterator.set()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Developer's Guide to Collections: Sets</T><ST>Time for another deep dive into Java collections! This time, we focus on the concept of sets, the set interface, and everything you can do with sets.</ST><A>https://dzone.com/articles/the-developers-guide-to-collections-sets</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Albano</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>20</DAY></DATE><COMMENT>A good basic overview of <CODEROUTINE>Set</CODEROUTINE>s.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Developer's Guide to Collections: Queues</T><ST>Let's continue our journey into Java collections by examining the concept and proper usage of queues and deques in your code.</ST><A>https://dzone.com/articles/the-developers-guide-to-collections-queues</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Albano</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>A good basic introduction to <CODEROUTINE>Queue</CODEROUTINE>s and <CODEROUTINE>Deqe</CODEROUTINE>s.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Types</TITLE>
      <ITEM><ARTICLE><X><T>Type dependency in Java, Part 1</T><ST>Covariance and contravariance for array types, generic types, and the wildcard element</ST><A>https://www.infoworld.com/article/3172592/type-dependency-in-java-part-1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andreas</FIRSTNAME><LASTNAME>Solymosi</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>A detailled, but something unclear, description of type compatibilities, covariance, and contravariance.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE pred='https://www.infoworld.com/article/3172592/type-dependency-in-java-part-1.html'><X><T>Type dependency in Java, Part 2</T><ST>Using covariance and contravariance in your Java programs</ST><A>https://www.infoworld.com/article/3197118/type-dependency-in-java-part-2.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andreas</FIRSTNAME><LASTNAME>Solymosi</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>13</DAY></DATE><COMMENT>The covariance and contravariance for some Collection methods, generics, methods, and lambdas.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Generic types</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>A Generic MVC Model in Java</T><A>http://www.onjava.com/pub/a/onjava/2004/07/07/genericmvc.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Arjan</FIRSTNAME><LASTNAME>Vermeij</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>7</MONTH><DAY>7</DAY></DATE><COMMENT>An example of using the generic collections: the implementation of a MVC pattern.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Generics Considered Harmful</T><A>http://weblogs.java.net/blog/arnold/archive/2005/06/generics_consid_1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ken</FIRSTNAME><LASTNAME>Arnold</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>7</DAY></DATE><COMMENT>The author argues that generics are a feature too complex for the benefit they return. Most commentors seem to disagree…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: The pseudo-typedef antipattern</T><ST>Extension is not type definition</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp02216/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>2</MONTH><DAY>21</DAY></DATE><COMMENT>Using an empty class extending a generic type to mimick the C's <CODEROUTINE>typedef</CODEROUTINE> is a bad idea.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Covariance and Contravariance In Java</T><A>https://dzone.com/articles/covariance-and-contravariance</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Edwin</FIRSTNAME><LASTNAME>Dalorzo</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT>A short description of when to use <CODEROUTINE>&lt;? extends T&gt;</CODEROUTINE> and <CODEROUTINE>&lt;? super T&gt;</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Diagnosing Java code: Java generics without the pain: Some discussion about Java generics, these points may be relevant or not to Java 1.5 since not all the discussed features are part of that release</TITLE>
        <ITEM><ARTICLE><X><T>Diagnosing Java code: Java generics without the pain</T><ST>A guide to generics in the Java Tiger version and the JSR-14 prototype compiler</ST><A>https://www.ibm.com/developerworks/java/library/j-djc02113/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>2</MONTH><DAY>11</DAY></DATE><COMMENT>A preview of the support of generic types in Java 1.5.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE pred='https://www.ibm.com/developerworks/java/library/j-djc02113/index.html'><X status='zombie'><T>Diagnosing Java code: Java generics without the pain, Part 2</T><ST>Some limitations of generics in the JSR-14 prototype compiler</ST><A>https://www.ibm.com/developerworks/java/library/j-djc03113.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>11</DAY></DATE><COMMENT>Some limitations and their rationals: parameters types cannot be used in static member, the primitive types cannot be used and parameter types cannot be used for cast or <CODEROUTINE>instanceof</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE pred='https://www.ibm.com/developerworks/java/library/j-djc03113.html'><X status='zombie'><T>Diagnosing Java code: Java generics without the pain, Part 3</T><ST>Overcoming the limitations of generics in the JSR-14 prototype compiler</ST><A>https://www.ibm.com/developerworks/java/library/j-djc04093.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>9</DAY></DATE><COMMENT>Two issues of generic types: how to ensure that the generic class is instantiated with a type having the right constructor and polymorphic recursion.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE pred='https://www.ibm.com/developerworks/java/library/j-djc04093.html'><X status='zombie'><T>Diagnosing Java code: Java generics without the pain, Part 4</T><ST>How generic types can conquer mischievous mixins</ST><A>https://www.ibm.com/developerworks/java/library/j-djc05133.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>5</MONTH><DAY>13</DAY></DATE><COMMENT>Mixins (class parameterized by their parent class) have similar issues.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Lambda expressions</TITLE>
      <ITEM><ARTICLE><X><T>It’s Java Jim, But Not As We Know It by Simon Ritter</T><A>https://www.youtube.com/watch?v=bhSBpNXwa60</A><L>en</L><F>MP4</F><DURATION><MINUTE>15</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Ritter</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>10</DAY></DATE><COMMENT>Using lambda expressions to do some lambda calculus.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>The Factory Pattern Using Lambda Expressions in Java 8</T><ST>The factory pattern is one of the best known patterns in Java. If you're using lambda expressions, you can use those to implement the pattern, though beware scaling.</ST><A>https://dzone.com/articles/factory-pattern-using-lambda-expression-in-java-8</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Monika</FIRSTNAME><LASTNAME>Goel</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>1</DAY></DATE><COMMENT>A simplistic usage of Lambdas.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-2'><T>Leveraging Lambda Expressions for Lazy Evaluation in Java</T><ST>Want to learn more about the lazy evaluation in Java? Check out this tutorial on how to use lambda expressions for the purpose of lazy loading data and lazy evaluation.</ST><A>https://dzone.com/articles/leveraging-lambda-expressions-for-lazy-evaluation</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Grzegorz</FIRSTNAME><LASTNAME>Piwowarek</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>8</MONTH><DAY>18</DAY></DATE><COMMENT>This article aims at presenting a classical cached and thread-safe evaluation of a lambda expression, but it contains errors spotted by a reader and the double-checked lock implementation is still not correct.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Functional Exceptions In Java</T><A>https://8thlight.com/blog/brian-gerstle/2019/01/22/fnl-exceptions-in-java.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Gerstle</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>22</DAY></DATE><COMMENT>The author describes how to handle exceptions in lambda expressions.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Functional interfaces</TITLE>
      <ITEM><ARTICLE><X><T>Cheatsheet: Java Functional Interfaces</T><ST>Want a quick breakdown of Java's functional interfaces? Here's a great compilation of predicates, operators, and functions, as well as their uses.</ST><A>https://dzone.com/articles/cheatsheet-java-functional-interfaces</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tonny</FIRSTNAME><LASTNAME>Tapper</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>9</DAY></DATE><COMMENT>A list of the functional interfaces (defined in the <CODEROUTINE>java.util.function</CODEROUTINE> package).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Joy: Combining Predicates</T><ST>Learn the joy of combining Predicates in Java.</ST><A>https://dzone.com/articles/java-joy-combining-predicates</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Hubert</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Klein Ikkink</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>9</MONTH><DAY>12</DAY></DATE><COMMENT>Some examples of using <CODEROUTINE>Predicate.and()</CODEROUTINE>, <CODEROUTINE>Predicate.or()</CODEROUTINE>, <CODEROUTINE>Predicate.negate()</CODEROUTINE> and <CODEROUTINE>Predicate.not()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Quiz Yourself: Using Core Functional Interfaces: Predicate (Advanced)</T><ST>Predicate interfaces can be complicated, so be careful when working out the results.</ST><A>https://blogs.oracle.com/javamagazine/quiz-yourself-using-core-functional-interfaces-predicate-advanced</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mikalai</FIRSTNAME><LASTNAME>Zaikin</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>4</MONTH><DAY>6</DAY></DATE><COMMENT>A small quizz about predicates.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Quiz Yourself: Using Core Functional Interfaces: Consumer (Advanced)</T><ST>The consumer interface can be confusing, even for advanced coders.</ST><A>https://blogs.oracle.com/javamagazine/quiz-yourself-using-core-functional-interfaces-consumer-advanced</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mikalai</FIRSTNAME><LASTNAME>Zaikin</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>4</MONTH><DAY>6</DAY></DATE><COMMENT>A small quizz about <CODEROUTINE>Consumer</CODEROUTINE> and streams.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Streams</TITLE>
      <ITEM><ARTICLE><X><T>Why, when and how to return Stream from your Java API instead of a collection</T><A>https://blog.softwaremill.com/why-when-and-how-to-return-stream-from-your-java-api-instead-of-a-collection-c30e7ebc5407</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tomasz</FIRSTNAME><LASTNAME>Kiełbowicz</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>10</DAY></DATE><COMMENT>Some simple examples demonstrating the benefits of Streams: handling a large amount of data, fast access to some part of the data, avoiding computation of data that will be discarted.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Type inference</TITLE>
      <ITEM><ARTICLE><X><T>Java Feature Spotlight: Local Variable Type Inference</T><A>https://www.infoq.com/articles/java-local-variable-type-inference/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>1</DAY></DATE><COMMENT>A description of type inference, with a focus on local variable type inference (<CODEROUTINE>var</CODEROUTINE>) and some guidelines to use this one.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Optional</TITLE>
      <ITEM><ARTICLE><X><T>Optional Is a Law-breaking Monad but a Good Type</T><A>https://medium.com/97-things/optional-is-a-law-breaking-monad-but-a-good-type-7667eb821081</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicolai</FIRSTNAME><LASTNAME>Parlog</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>18</DAY></DATE><COMMENT><CODEROUTINE>Optional</CODEROUTINE> does not respect the rules of a monad, but it is better like this.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>12 recipes for using the Optional class as it’s meant to be used</T><ST>Follow these dozen best practices to protect your applications against ugly null pointer exceptions—and make your code more readable and concise.</ST><A>https://blogs.oracle.com/javamagazine/12-recipes-for-using-the-optional-class-as-its-meant-to-be-used</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mohamed</FIRSTNAME><LASTNAME>Taman</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>6</MONTH><DAY>22</DAY></DATE><COMMENT>Some code snippets showing how to properly use <CODEROUTINE>Optional</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE pred='https://blogs.oracle.com/javamagazine/12-recipes-for-using-the-optional-class-as-its-meant-to-be-used'><X><T>The Java Optional class: 11 more recipes for preventing null pointer exceptions</T><ST>How to avoid Optional class antipatterns and design smells—all while streamlining application development</ST><A>https://blogs.oracle.com/javamagazine/the-java-optional-class-11-more-recipes-for-preventing-null-pointer-exceptions</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mohamed</FIRSTNAME><LASTNAME>Taman</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>7</MONTH><DAY>20</DAY></DATE><COMMENT>The continuation of the previous article.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Optional – orElse() vs orElseGet()</T><A>https://www.baeldung.com/java-optional-or-else-vs-or-else-get</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>8</MONTH><DAY>13</DAY></DATE><COMMENT>A description of the difference between <CODEROUTINE>orElse()</CODEROUTINE> and <CODEROUTINE>orElseGet()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Regular expressions</TITLE>
      <ITEM><ARTICLE><X status='zombie'><T>Magic with Merlin: Parse sequences of characters with the new regex library</T><ST>Moving beyond StreamTokenizer and StringTokenizer for pattern matching</ST><A>https://www.ibm.com/developerworks/java/library/j-mer0827.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH></DATE><COMMENT>The <CODEROUTINE>Matcher</CODEROUTINE> and <CODEROUTINE>Pattern</CODEROUTINE> class support the Perl 5 regexp syntax.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Regular Expressions in J2SE</T><A>http://www.onjava.com/pub/a/onjava/2003/11/26/regex.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Hetal</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Shah</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>11</MONTH><DAY>26</DAY></DATE><COMMENT>Another introductionary article on the <CODEROUTINE>Matcher</CODEROUTINE> and <CODEROUTINE>Pattern</CODEROUTINE> classes. It is more basic than the previous one, but it covers more Java regexp features.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Properties/preferences</TITLE>
      <ITEM><ARTICLE><X><T>Preferences API</T><A>https://docs.oracle.com/javase/1.5.0/docs/guide/preferences/index.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>2002</YEAR></DATE><COMMENT>A presentation of the <CODEROUTINE>Preferences</CODEROUTINE> class.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Taming Tiger: Loading Properties from XML</T><ST>Stop the key-value pair insanity</ST><A>https://www.ibm.com/developerworks/library/j-tiger02254/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH><DAY>25</DAY></DATE><COMMENT>The <CODEROUTINE>Properties</CODEROUTINE> class now supports saving to/restoring from an XML file.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Preferences : Java Glossary</T><A>https://mindprod.com/jgloss/preferences.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Roedy</FIRSTNAME><LASTNAME>Green</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>3</DAY></DATE><COMMENT>Some notes (in particular how is recorded the data) on <CODEROUTINE>Preferences</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Reflection</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Using Java Reflection</T><A>http://developer.java.sun.com/developer/technicalArticles/ALT/Reflection/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Glen</FIRSTNAME><LASTNAME>McCluskey</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR><MONTH>1</MONTH></DATE><COMMENT>As usual with Glen, this is a short complete description of a particular Java feature. This time, he speaks about the reflection.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java programming dynamics, Part 2: Introducing reflection</T><ST>Use run-time class information to limber up your programming</ST><A>https://www.ibm.com/developerworks/java/library/j-dyn0603/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>3</DAY></DATE><COMMENT>An overview of Java refection and its performance.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java programming dynamics, Part 3: Applied reflection</T><ST>Building a framework for command line arguments</ST><A>https://www.ibm.com/developerworks/java/library/j-dyn0715/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>7</MONTH><DAY>15</DAY></DATE><COMMENT>The author creates a command line parser as an example of using reflection.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>I/O</TITLE>
      <ITEM><ARTICLE><X><T>Watching a Directory for Changes</T><A>https://docs.oracle.com/javase/tutorial/essential/io/notification.html</A><L>en</L><F>HTML</F></X><COMMENT>How to use <CODEROUTINE>WatchService</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Magic with Merlin: Character sets</T><ST>Conversions and encoding schemes</ST><A>https://www.ibm.com/developerworks/java/library/j-mer1022.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>How to read ASCII, EBCDIC, Latin-1… files.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Magic with Merlin: The ins and outs of Merlin's new I/O buffers</T><ST>Learn how to manipulate J2SE 1.4's new I/O package</ST><A>https://www.ibm.com/developerworks/java/library/j-mer03253/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>A short presentation of NIO in Java 1.4.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Eye on Performance: MegaJogos scales up with NIO</T><ST>The case of the fully utilized CPU</ST><A>https://www.ibm.com/developerworks/library/j-perf03174.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>3</MONTH><DAY>17</DAY></DATE><COMMENT>A subtle bug using NIO select.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Taming Tiger: Formatted output</T><ST>Let there be printf</ST><A>http://opensourcetutorials.com/tutorials/Server-Side-Coding/Java/formatted-output/page1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>A short presentation of <CODEROUTINE>Formatter</CODEROUTINE> to format a la <CODEROUTINE>printf</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The New NIO, aka JSR-203</T><A>https://www.youtube.com/watch?v=yNRS1ssLPdQ</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Alan</FIRSTNAME><LASTNAME>Bateman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Carl</FIRSTNAME><LASTNAME>Quinn</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>The new I/O features that will be implemented in Java 1.7: file system, socket channel, asynchronous I/O…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Efficient data transfer through zero copy</T><ST>Zero copy, zero overhead</ST><A>https://developer.ibm.com/articles/j-zerocopy/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sathish</FIRSTNAME><MIDDLENAME>K.</MIDDLENAME><LASTNAME>Palaniappan</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Pramod</FIRSTNAME><MIDDLENAME>B.</MIDDLENAME><LASTNAME>Nagaraja</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>9</MONTH><DAY>2</DAY></DATE><COMMENT>Using the <CODEROUTINE>FileChannel.transfertTo()</CODEROUTINE> routine to exploit Linux kernel zero-copy mechanism.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java NIO vs. IO</T><A>http://tutorials.jenkov.com/java-nio/nio-vs-io.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>23</DAY></DATE><COMMENT>A comparison of IO and NIO.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Apprentice Blog of the Week: Did Java Break My byte?</T><A>https://8thlight.com/blog/dave-torre/2014/09/10/did-java-break-my-byte.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Torre</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>The danger of using <CODEROUTINE>InputStream.read()</CODEROUTINE> which treats bytes as unsigned.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Guide to WatchService in Java NIO2</T><A>https://www.baeldung.com/java-nio2-watchservice</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Networking</TITLE>
      <ITEM><ARTICLE><X><T>Jini: New technology for a networked world</T><ST>How Jini raises the level of abstraction for distributed systems programming</ST><A>https://www.infoworld.com/article/2076430/jini--new-technology-for-a-networked-world.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Venners</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>This article is an introduction to Jini.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Magic with Merlin: Java networking enhancements</T><ST>A look at the latest networking features in J2SE 1.4</ST><A>https://www.ibm.com/developerworks/java/library/j-mer02243.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>2</MONTH><DAY>25</DAY></DATE><COMMENT>Java 1.4 improves networking support: IPv6, SSL, listing the available networking interfaces…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Validating URL Links</T><A>http://178.32.81.228/developer/JDCTechTips/2003/tt0422.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>22</DAY></DATE><COMMENT>A very simple code to check the status of URL links.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 11 HttpClient Examples</T><A>https://www.mkyong.com/java/java-11-httpclient-examples/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Yong</FIRSTNAME><LASTNAME>Mook Kim</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>10</MONTH><DAY>11</DAY></DATE><COMMENT>Some examples of common uses of <CODEROUTINE>HttpClient</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Persistence</TITLE>
      <ITEM><ARTICLE><X status='zombie'><T>Magic with Merlin: Long-term persistence</T><ST>Serialize JavaBean component state to XML</ST><A>https://www.ibm.com/developerworks/java/library/j-mer0731/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>7</MONTH></DATE><COMMENT>Using XMLEncoder and XMLDecoder to save/restore objects to/from XML files.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Using XMLEncoder</T><A>https://oracle.com/technetwork/java/persistence4-140124.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Philip</FIRSTNAME><LASTNAME>Milne</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>1</MONTH><DAY>11</DAY></DATE><COMMENT>A complete description of XMLEncoder.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Using Simple for XML serialization</T><ST>Really does make it simple to go from Java objects to XML</ST><A>https://www.ibm.com/developerworks/java/library/x-simplexobjs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Carey</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>11</MONTH><DAY>24</DAY></DATE><COMMENT>A presentation of Simple, a library for serializing/deserializing POJO into/from XML.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about … Java Object Serialization</T><ST>You thought serialized data was safe? Think again.</ST><A>https://www.ibm.com/developerworks/java/library/j-5things1/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT>Some less known serialization features: handling class refactorings, hooks in serialization/deserialization, signing/sealing serialized data, replacing the serialized/deserialized object, and validating the deserialization.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Hibernate</TITLE>
        <ITEM><ARTICLE><X><T>La persistance des données avec Hibernate 2.1.8</T><A>https://gfx.developpez.com/tutoriel/java/hibernate/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Romain</FIRSTNAME><LASTNAME>Guy</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>7</MONTH><DAY>3</DAY></DATE><COMMENT>An introduction to Hibernate with a very simple example.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java development 2.0: Sharding with Hibernate Shards</T><ST>Horizontal scalability for relational databases</ST><A>https://www.ibm.com/developerworks/java/library/j-javadev2-11/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>31</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>How to avoid the Hibernate Query Cache N+1 issue</T><A>https://vladmihalcea.com/hibernate-query-cache-n-plus-1-issue/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vlad</FIRSTNAME><LASTNAME>Mihalcea</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>A short description of the N+1 problem.</COMMENT></ARTICLE></ITEM>
        <ITEM><BLIST><TITLE>Lazy vs. eager</TITLE>
          <ITEM><ARTICLE><X><T>Hibernate Eager vs Lazy Fetch Type</T><A>https://howtoprogramwithjava.com/hibernate-eager-vs-lazy-fetch-type/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trevor</FIRSTNAME><LASTNAME>Page</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>25</DAY></DATE><COMMENT>A basic presentation of lazy vs. eager loading.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Eager/Lazy Loading In Hibernate</T><A>https://www.baeldung.com/hibernate-lazy-eager-loading</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>A shorter description of the same.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>XML</TITLE>
      <ITEM><ARTICLE><X status='zombie'><T>Parsing, indexing, and searching XML with Digester and Lucene</T><ST>These open source projects can ease your XML-handling tasks</ST><A>https://www.ibm.com/developerworks/library/j-lucene</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Otis</FIRSTNAME><LASTNAME>Gospodnetic</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>3</DAY></DATE><COMMENT>Disgester is a simple to use parser ala SAX. Lucene is a text indexer.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>XML Matters: The XOM Java XML API</T><ST>A rigorously correct tree-oriented XML model</ST><A>https://www.ibm.com/developerworks/xml/library/x-matters32/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Mertz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>12</MONTH><DAY>17</DAY></DATE><COMMENT>A cleaner DOM…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Simplify document handler programs with the SAX parser</T><ST>A design strategy for SAX parsers</ST><A>https://www.ibm.com/developerworks/xml/library/x-dochan.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gianluigi</FIRSTNAME><LASTNAME>Colaiacomo</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>14</DAY></DATE><COMMENT>I don't believe the solution proposed by the author, creating one class per node type and using reflection to instantiate it, is usable for non trivial XML schemas where the XML elements are not fully independent.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What's new in JAXP 1.3? Part 1</T><ST>An overview of the technology, and a look at parsing API changes and a new validation API</ST><A>https://www.ibm.com/developerworks/xml/library/x-jaxp13a.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neil</FIRSTNAME><LASTNAME>Grahamand</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Elena</FIRSTNAME><LASTNAME>Litani</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>11</MONTH><DAY>9</DAY></DATE><COMMENT>A description of the new features of JAXP 1.3 and some details on the <CODEROUTINE>javax.xml.validation</CODEROUTINE> package enabling validation support.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>The Java XML Validation API</T><ST>Check your documents for conformance to schemas</ST><A>https://www.ibm.com/developerworks/library/x-javaxmlvalidapi/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Elena</FIRSTNAME><LASTNAME>Litani</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>8</MONTH><DAY>8</DAY></DATE><COMMENT>A good introduction to the of <CODEROUTINE>javax.xml.validation</CODEROUTINE> package.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>