<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Black Box Software Testing Course</TITLE>
<PATH>links/bbst.xml</PATH>
<DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>28</DAY></DATE>
<CONTENT>
Update: The videos are now available on <X><T>Youtube</T><A>https://www.youtube.com/user/TestingEducation/</A><L>en</L><F>HTML</F></X>. When I will have some time, I'll update all the broken links below…<BR/><BR/><BR/>

<BLIST><TITLE>Cem Kaner &amp; James Bach's Black Box Software Testing Course<BR/>The complete course with notes, slides, quizzes… is available in <X quality='2'><T>http://www.testingeducation.org/BBST</T><A>http://www.testingeducation.org/BBST</A><L>en</L><F>HTML</F></X> (an older version).</TITLE>
  <ITEM>Overview for Instructors</ITEM>
  <ITEM><BLIST><TITLE>Overview for Students</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>Overview for Students (BBST)</T><A>http://video.google.com/videoplay?docid=-1349971266149738478</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>14</MINUTE><SECOND>17</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>An overview of testing: black box test vs glass box testing, unit/integration/system tests, acceptance testing, independent testing… Cem also gives some learning guidelines for his students at Florida Tech.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Introduction: The strategy problem and the oracle problem</TITLE>
    <ITEM><ARTICLE><X status='dead' quality='1'><T>Fundamental Issues in Software Testing (Part 1/3) (BBST)</T><A>http://video.google.com/videoplay?docid=-4416096053366863048</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>5</MINUTE><SECOND>51</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem describes the environment of software testing (evolving specifications, changing code…). He lists some questions testers should ask themselves: why are you testing? how to know if the program passed of failed the test? how much testing is enough?…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead' quality='1'><T>Fundamental Issues in Software Testing (Part 2/3) (BBST)</T><A>http://video.google.com/videoplay?docid=-2043042543477727277</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>7</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem details the definition of testing. He also speaks about the fact that the mission of the test must be defined first. This mission and the project context must be taken into account to define the testing strategy.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead' quality='1'><T>Fundamental Issues in Software Testing (Part 3/3) (BBST)</T><A>http://video.google.com/videoplay?docid=-5375740557289410095</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem deals with the Oracle problem: how do we evaluate if the AUT has passed or failed the test? Due to some environment variables we do not take into account, to inattentional blindness… the decision is always a heuristic which may be incorrect in some cases.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Introduction 2: The measurement problem and the impossibility of complete testing</TITLE>
    <ITEM><ARTICLE><X status='dead' quality='2'><T>Impossibility of Complete Testing (Part 1/2) (BBST)</T><A>http://video.google.com/videoplay?docid=5944968645632664130</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>29</MINUTE><SECOND>37</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem explains that metrics (code coverage, bug find rates, Weibull model…) are often used improperly and have bad side effects by corrupting the way the team behaves. So they cannot be used to decide when testing is complete enough. Then, he states that complete testing is impossible and gives the examples of a bad square root computation, Easter Eggs…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead' quality='1'><T>Impossibility of Complete Testing (Part 2/2) (BBST)</T><A>http://video.google.com/videoplay?docid=-6521823314472831058</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>26</MINUTE><SECOND>43</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>After explaining the explosion of test cases due to variable combinations, state combinations… Cem gives an example of a particularly hidden bug which could have had some very bad impact.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Bug advocacy: How to win friends, influence programmers, and stomp bugs</TITLE>
    <ITEM><ARTICLE><X status='dead' quality='1'><T>Bug Advocacy (Part 1 of 1) (BBST)</T><A>http://video.google.com/videoplay?docid=6889335684288708018</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>33</MINUTE><SECOND>26</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>After speaking about the bug fix workflow and about the definition of what is a bug, Cem describes how to report a bug so this one will be get fixed: find the worst impact (you need to do some follow-up when you notice something strange), clearly state the configurations where the bug is present…</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Quality cost analysis</TITLE>
    <ITEM><ARTICLE><X><T>Quality Cost Analysis in Software Testing (Part 1/1) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/QualityCost.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>12</MINUTE><SECOND>0</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem describes the usual idea that bugs found later in the lifecycle are more expensive to fix. But he enlarges the analysis by noting that<BLIST><ITEM>first, other departments are impacted (marketing, technical writers, localization, hotline…) for bugs found late and</ITEM><ITEM>second, the cost of bugs delivered to the customers should not limited to the cost to the company, but the cost for the customers themselves should also be taken into account.</ITEM></BLIST></COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><X status='dead'><T>More on bug advocacy, your credibility, and the mission of the tracking system</T><A>http://www.testingeducation.org/BBST/Bugs2.html</A><L>en</L><F>HTML</F></X>
  </ITEM>
  <ITEM><BLIST><TITLE>Domain testing</TITLE>
    <ITEM><BLIST><TITLE>Part 1</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing (Part 1/6) (BBST)</T><A>http://video.google.com/videoplay?docid=5239615883823160963</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>6</MINUTE><SECOND>34</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Domain testing consists in subdividing the infinite space of all possible tests in some smaller manageable parts. The first tests to be done should ensure that the software works for basic scenarios, fulfilling user needs, before testing the features more aggressively.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing (Part 2/6) (BBST)</T><A>http://video.google.com/videoplay?docid=5796318209827771163</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>10</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>The classical domain testing approach: split the test space using the boundary values and choose a test sample in each subspace.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing (Part 3/6) (BBST)</T><A>http://video.google.com/videoplay?docid=1965911579587872413</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>12</MINUTE><SECOND>12</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem gives some exercises to prove that domain testing is not so simple, you also have to look at ordered sets combinations, invalid input type, too many/too few inputs… He starts to look at Myers triangle.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing (Part 4/6) (BBST)</T><A>http://video.google.com/videoplay?docid=-4698627842585260411</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Some other examples of things you can look at: bad inputs, overflows, timing issues (e.g. timeout handling), memory leaks in error management… The tests must be defined from the potential risks in the tested software.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing (Part 5/6) (BBST)</T><A>http://video.google.com/videoplay?docid=-3126268154895211815</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>4</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>A summary of the previous parts.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing (Part 6/6) (BBST)</T><A>http://video.google.com/videoplay?docid=-1508693302849754546</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>51</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem speaks about some examples he has given in previous parts. He deals with floating point precision and the "greater" vs "greater or equal" difference, and with looking at the input domain of the process/device receiving the output of the feature being tested.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Part 2</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing--Perspective (Part 1/3) (BBST)</T><A>http://video.google.com/videoplay?docid=-3399664682857311087</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>16</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem starts this presentation with the fact that requirements are ambiguous. Some test parameters are not on a line with a range of allowed values, two boundaries, and the values too small or too large. Cem gives an example of such a non-ordered set: printers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing--Perspective (Part 2/3) (BBST)</T><A>http://video.google.com/videoplay?docid=-2338335640616733353</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>12</MINUTE><SECOND>22</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem describes four ways to define the equivalence set: intuitive similarity (the tester feels that two values are equivalent), specification (the specification says which values are equivalent), same code path (two values are equivalent because both will make the software runs the same code path), and risk based (two values are equivalent because they would trigger the same bug if this one is in the code). Then, he deals which choosing the best representative in each set.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Domain Testing--Perspective (Part 3/3) (BBST)</T><A>http://video.google.com/videoplay?docid=5526189625932343132</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>31</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Domain analysis is slightly more difficult when variables interact (for example, day, month, and year). Cem closes this presentation with a summary of pros and cons of domain testing.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Scenario testing</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>Scenario Testing (Part 1/2) (BBST)</T><A>http://www.testingeducation.org/BBST/ScenarioTesting.html</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>23</MINUTE><SECOND>9</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>(The video sound is corrupted on <X status='dead'><T>Google</T><A>http://video.google.com/videoplay?docid=-9168632147593921488</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>23</MINUTE><SECOND>9</SECOND></DURATION></X>.) Cem describes the characteristics test scenarios should have: realistic, credible and motivating to stakeholders, test the program in a complex way and have results easy to evaluate. He also gives some examples of its usage: learn the product, make bug report more motivating, point to requirement issues…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Scenario Testing (Part 2/2) (BBST)</T><A>http://www.testingeducation.org/BBST/ScenarioTesting.html</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>(The video sound is corrupted on <X status='dead'><T>Google</T><A>http://video.google.com/videoplay?docid=7260487442734201536</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>23</MINUTE><SECOND>9</SECOND></DURATION></X>.) Cem describes Hans Buwalda's soap operas: a real-life scenario where each aspect is exaggerated. Then, he lists 16 ways to create stories. Cem closes this presentation with some incorrect use of scenario testing: do not use them early in the project, they give poor test coverage, and they are not interesting to reuse.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Function testing</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>Function Testing (Part 1/1) (BBST)</T><A>http://video.google.com/videoplay?docid=7183219442859155681</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>20</MINUTE><SECOND>16</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>(You will have to increase the volume during the OOo UI exploration.) Function testing requires first to build the list of all functions, this can be done by scanning the UI, the online help, the user manual, the specification… Then we have to deal with the Oracle question: how do we know that the feature works properly? Cem continues by reminding some usual stuff such as the fact that positive and negative testing must be performed. He closes his presentation by prescribing function testing as a testing baseline, but not as a the primary testing method.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Test design: Understanding, selecting among, and applying test techniques</TITLE>
    <ITEM><ARTICLE><X status='dead' quality='2'><T>Test Design (Part 1/3) (BBST)</T><A>http://video.google.com/videoplay?docid=8877049435292271766</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem starts by summarizing the ten categories of test techniques he has defined: function testing, specification-based testing, domain testing, risk-based testing, scenario testing, regression testing, stress testing, user testing, state-model based testing, and high volume automated testing. Then he explains that the set of tests is not constant, but it evolves as our knowledge of the software matures: it is meaningless to execute many times the same successful test, this one should change, for example by being combined with other tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead' quality='2'><T>Test Design (Part 2/3) (BBST)</T><A>http://video.google.com/videoplay?docid=7274604696752447179</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>21</MINUTE><SECOND>17</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem starts with a teaser: it is better to focus on buggy parts of the software or to distribute the testing effort on the whole software? Then, he explains that choosing the test technique to use depends on the information we want to get from the test results (this required information varies along the project life), the attributes of the test technique, and the development context (e.g. the available tools).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead' quality='1'><T>Test Design Example (Part 3/3) (BBST)</T><A>http://video.google.com/videoplay?docid=9054987994423136847</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>7</MINUTE><SECOND>40</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem speaks once again about his teaser and explains that the best test group is the one that fulfils the testing needs of the project.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Risk-Based Testing</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>Risk-Based Software Testing (Part 1/5) (BBST)</T><A>http://video.google.com/videoplay?docid=1654562043483913279</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>14</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>(The video sound is sometimes very noisy.) After reminding the basic of risk analysis (imagine a possible failure, what is the probability of this failure, and what are the consequences of this failure), Cem describes three types of heuristics to imagine a way a program could fail:<BR/>- recognize common project warning signs,<BR/>- apply FMEA to the software components or to the desired quality attributes, and<BR/>- quick tests.<BR/>Then he deals with the first point.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Risk-Based Software Testing (Part 2/5) (BBST)</T><A>http://video.google.com/videoplay?docid=-3281455603968783117</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>13</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem details the use of bug catalogs and FMEA. This one can be organized according to the software components or to the quality attributes.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Risk-Based Software Testing (Part 3/5) (BBST)</T><A>http://video.google.com/videoplay?docid=-6410529125113778238</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>41</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem describes quicktests: cheap tests that target a common error and does not require preparation or knowledge. Then he gives some examples: shoe test, Whittaker's "How to Break Software", interference testing, following up recent code changes, exploring data relationship… He tells some anecdotes and gives advice about using them as a political weapon.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Risk-Based Software Testing (Part 4/5) (BBST)</T><A>http://video.google.com/videoplay?docid=-7201998212497607857</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>12</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>In the first part, Cem describes operational profiles. These ones must be based on data, not on intuition. In the second part, he criticizes the usage of RPN (risk priority number = probability x severity).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Risk-Based Software Testing (Part 5/5) (BBST)</T><A>http://video.google.com/videoplay?docid=-1358839507973691257</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>9</MINUTE><SECOND>38</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>After summarizing the risk-based testing technique, Cem explains that it is limited by the tester imagination, there will be some blind spots in the risk analysis, so, as any other test techniques, it must be used in conjunction with other techniques. At last, Cem describes an analogy with testing of scientific theories and draws a list of traits that a good tester should have.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Combination testing--testing multiple variables together</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>Combination Testing (Part 1/6) (BBST)</T><A>http://video.google.com/videoplay?docid=-6776222979204471764</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>16</MINUTE><SECOND>31</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>This is an introduction to combination testing: using domain testing to get the test values for each variables, mechanical vs risk-based vs scenario-based approaches, weak vs strong testing, normal vs robust testing, all n-tuples vs all singles vs all pairs…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Combination Testing (Part 2/6) (BBST)</T><A>http://video.google.com/videoplay?docid=-714799982230463850</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>10</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem manually builds all-pairs tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Combination Testing (Part 3/6) (BBST)</T><A>http://video.google.com/videoplay?docid=-6940670582699418439</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>15</MINUTE><SECOND>55</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>(There are some strange sound issues: the sound disappears on some segment, but if you rewind slightly the video -at least in Google Video player -, it magically comes back!) Cem continues to manually build all-pairs tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Combination Testing (Part 4/6) (BBST)</T><A>http://video.google.com/videoplay?docid=6567978816086318005</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>9</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Some tools are available on <X><T>pairwise.org</T><A>http://www.pairwise.org</A><L>en</L><F>HTML</F></X>. Cem cites orthogonals arrays (DOE). Then he speaks about variables that can have many values of interest and he finishes with variables that interact.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Combination Testing (Part 5/6) (BBST)</T><A>http://video.google.com/videoplay?docid=7933067078474305882</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>10</MINUTE><SECOND>39</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem explains (by giving the example of OpenOffice Format Page dialog) that it may be much too complex to test all-pairs. He explains that all-pairs is limited to independent variables or to variables with a small number of constraints, otherwise, cause-effect graphing should be used.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Combination Testing (Part 6/6) (BBST)</T><A>http://video.google.com/videoplay?docid=3379634616177277246</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>15</MINUTE><SECOND>58</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem reminds that some follow-up must be done to evaluate the full impact of a found bug. He gives an example of table usable to analyze complex data relationship and he lists some types of such relationships. He sums up this combination testing presentation by explaining that management loves its theoritical bases, but it is not based on risk analysis and found issues may be far from the real use of the product.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Specification-based testing</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>Specification-Based Software Testing (Part 1/4) (BBST)</T><A>http://video.google.com/videoplay?docid=2730364058201786892</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>22</MINUTE><SECOND>9</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>The first step consists in understanding what it the purpose of the specification: Is it a vision? Is it part of the contract with the customer? Are there some implicit specifications?… Then, Cem explains how to use active reading (using the cubing technique).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Specification-Based Software Testing (Part 2/4) (BBST)</T><A>http://video.google.com/videoplay?docid=-7412753870810929579</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>24</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem lists some questions to understand and to check that you understand the specification. Then he also uses questions to help defining the test plan. At last, he gives another example of active reading methodology used by James Bach.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Specification-Based Software Testing (Part 3/4) (BBST)</T><A>http://video.google.com/videoplay?docid=-2361291446047275053</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>17</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem describes the review of the specification for adequacy, completeness, ambiguity, and testability.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Specification-Based Software Testing (Part 4/4) (BBST)</T><A>http://video.google.com/videoplay?docid=-3461965536553559726</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>22</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem speaks about specification review meetings and cites some books to help handle them (and some advertisement for his brother…). Then he deals with the traceability matrix and its potential dangerous uses. He finishes with the potential legal consequences of wrong claims in the product documentation.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Regression testing</TITLE>
    <ITEM><ARTICLE><X><T>Regression Testing Overview (Part 1/3) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/bbstRegressionPart1.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>20</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem explains why regression testing are needed: code change involve regression risk, some clients/regulations require this. On the other side, he spends some time to explain why the analogy to manufacturing is plainly wrong. Then he focuses on the risk due to code change: incorrect correction, bad side effects, problem in the build process or in the localization.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality ='2'><T>Regression Testing Overview (Part 2/3) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/bbstRegressionPart2.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>24</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem speaks about the factory school (having some smart people writing tests executed by dumb people). He makes a side note about the fact that his teaching is biased. Then he deals with automating the GUI regression tests. He finishes with the question of reusing good tests and having some variability in the tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality ='1'><T>Regression Testing Overview (Part 3/3) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/bbstRegressionPart3.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>19</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem explains that the choice of the tests to be reused or to be written in order to perform non-regression testing is based on economics (what is the cost to maintain/re-execute the test?) and risks. He also describes why unit tests are an efficient way to check for regression when refactoring the code.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Test procedures and scripts</TITLE>
    <ITEM><ARTICLE><X quality ='2'><T>Scripted Testing (Part 1/3) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/BBSTscriptTest1.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>15</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem explains his assumption: people executing scripted tests focus only on test instructions and not on the product being tested, they are becoming robots and they lose their critical eye.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality ='2'><T>Scripted Testing (Part 2/3) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/BBSTscriptTest2.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>28</MINUTE><SECOND>6</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem spends some time discribing a rat experiment. Then he speaks about the differences when the person executing the test script is a novice or a skilled tester: the novice will simply follow the script, the tester will perform some side analysis every time he notices something strange. When using script based testing, most bugs are found during the writing of the scripts. Cem reminds the differences between a script and a check list. He concludes with suggesting that except for regulatory environments where scripted tests are expected, they are a big expensive mistake.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Scripted Testing (Part 3/3) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/BBSTscriptingPartB.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>4</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem comments an experiment demonstrating the inattentional blindness effect.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Exploratory Testing</TITLE>
    <ITEM><ARTICLE><X status='dead' quality='2'><T>Exploratory Testing (Part 1/??) (BBST)</T><A>http://video.google.com/videoplay?docid=-6217339535521340225</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>15</MINUTE><SECOND>59</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR></DATE><COMMENT>After defining exploratory testing, Cem explains that scripted testing has some advantages, but it is much too expensive to update when the risks are changing.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Test documentation and documentation requirements</TITLE>
    <ITEM><ARTICLE><X quality='1'><T>Test Documentation (Part 1/2) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/TestDocs1.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>22</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem gives some examples of test documentation and some types of documentation components (lists, outlines, tables, and matrices). Then he speaks about IEEE 829. He finishes by explaining that documentation is expensive to write and to maintain.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Test Documentation (Part 2/2) (BBST)</T><A>http://www.testingeducation.org/BBST/extras/TestDocs2.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>28</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem explains that we need to get the requirements for the test documentation. In order to do this, we have to identify who will use this documentation and what for. Cem provides a list of questions helping this identification. He suggests then to write a mission statement in order to help the test documentation effort be focused in the right direction.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>GUI-level test automation and its requirements</TITLE>
    <ITEM><ARTICLE><X quality='2'><T>GUI-Level Regression Testing (Part 1/3)</T><A>http://www.testingeducation.org/BBST/extras/BBSTguiAuto1.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>23</MINUTE><SECOND>46</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem starts by explaining that we are doing computer assisted testing, not automated testing. Then he gives some thoughts about the cost/benefit analysis: maintenance costs, indirect costs… He explains that automated regression tests have a real benefit for future releases. At last, he notives that the code of the tests is programming, but it is not handled as such: no version control, no modularity…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>GUI-Level Regression Testing (Part 2/3)</T><A>http://www.testingeducation.org/BBST/extras/BBSTguiAuto2.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>40</MINUTE><SECOND>42</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>Cem lists the variations that automated tests will have to handle: the input devices, the output devices, the desired results, the GUI, and the test tool itself. Cem presents the data driven testing technique: the table of test data, the interpreter, and the supervisor. Then he describes evolutions of that methodology: creating domain-specific languages.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>GUI-Level Regression Testing (Part 3/3)</T><A>http://www.testingeducation.org/BBST/extras/BBSTguiAuto3.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>17</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>In general, the payback of test automation is long term, but Cem gives some examples where the benefit is immediate: smoke tests, load/stress tests, performance tests… He lists some common mistakes on test automation. He finishes by explaining that, as for any human test, a requirement analysis must be done and he proposes some questions helping define the test requirements.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Interest Analysis</TITLE>
    <ITEM><ARTICLE><X><T>Requirements Analysis</T><A>http://www.testingeducation.org/BBST/extras/CopyrightInterestAnalysis.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>16</MINUTE><SECOND>1</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR></DATE><COMMENT>(The video title is incorrect, it should have been "Interest Analysis".) Cem explains how to perform an interest analysis: list the stakeholders with their interests, principles, and preferences; then, see what their objectives are and what impacts the product will have on them.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Grading Exams</TITLE>
    <ITEM><ARTICLE><X quality='1'><T>Grading Exams (Part 1/2) (BBST)</T><A>http://www.testingeducation.org/BBST/takingexams/BBSTGradingFirstSet.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>16</MINUTE><SECOND>5</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH></DATE><COMMENT>This is not related to software testing, but Cem's explanation of the exams he proposes and how he grades them is interesting.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Grading Exams (Part 2/2) (BBST)</T><A>http://www.testingeducation.org/BBST/takingexams/BBSTGradingSecondSet.wmv</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>26</MINUTE><SECOND>31</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH></DATE><COMMENT>Cem gives an example of his grading methodology on four answers to a given question.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
</BLIST>
</CONTENT>
</PAGE>