<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>ML</TITLE>
<PATH>links/ml.xml</PATH>
<DATE><YEAR>2025</YEAR><MONTH>6</MONTH><DAY>7</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><BLIST><TITLE>F#</TITLE>
      <ITEM><X><T>Try F#</T><A>https://try.fsharp.org/</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE><ANCHOR>ocaml</ANCHOR>OCaml</TITLE>
      <ITEM><X><T>ocaml.org</T><A>https://ocaml.org/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>source</T><A>https://github.com/ocaml</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Awesome OCaml</T><A>https://github.com/ocaml-community/awesome-ocaml</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Js_of_ocaml</T><A>https://github.com/ocsigen/js_of_ocaml</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>Playgrounds</TITLE>
        <ITEM><X><T>Playground</T><A>https://ocaml.org/play</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Try OCaml</T><A>https://try.ocamlpro.com/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Courses</TITLE>
        <ITEM><X quality="1"><T>OCaml Programming: Correct + Efficient + Beautiful</T><A>https://cs3110.github.io/textbook/cover.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Gabriel Scherer</T><A>http://gallium.inria.fr/~scherer/tmp/cours-ocaml-paris8-2020.org.html</A><L>fr</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Initiation à OCaml</T><A>https://www.enseignement.polytechnique.fr/profs/informatique/Jean-Christophe.Filliatre/14-15/INF549/ocaml.pdf</A><L>fr</L><F>PDF</F></X></ITEM>
        <ITEM><X><T>Real World OCaml</T><A>https://dev.realworldocaml.org/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Learn-OCaml</T><A>https://ocaml-sf.org/learn-ocaml/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Learn Programming with OCaml</T><A>https://usr.lmf.cnrs.fr/lpo/</A><L>en</L><F>PDF</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><CLIST><TITLE><X><T>dune</T><A>https://dune.build/</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>documentation</T><A>https://dune.readthedocs.io/en/latest/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>source</T><A>https://github.com/ocaml/dune</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><CLIST><TITLE><X><T>opam</T><A>https://opam.ocaml.org/</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>documentation</T><A>https://opam.ocaml.org/doc/Install.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>source</T><A>https://github.com/ocaml/opam</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><X><T>odoc</T><A>https://ocaml.github.io/odoc/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>personal notes</T><A>../notes/ocaml.html</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>The origin of the pipeline operator (|&gt;)</T><A>https://batsov.com/articles/2025/05/22/the-origin-of-the-pipeline-operator/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Bozhidar</FIRSTNAME><LASTNAME>Batsov</LASTNAME></AUTHOR><DATE><YEAR>2025</YEAR><MONTH>5</MONTH><DAY>22</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Curry-Howard Correspondence</TITLE>
      <ITEM><ARTICLE><X><T>The Curry-Howard Correspondence</T><A>https://www.youtube.com/watch?v=GdcOy6zVFC4</A><L>en</L><F>MP4</F><DURATION><MINUTE>45</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><MIDDLENAME>Ryan</MIDDLENAME><LASTNAME>Clarkson</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>8</MONTH><DAY>9</DAY></DATE><COMMENT>An introduction to <KEYWORD><KEYID>Curry–Howard correspondence</KEYID><KEYEDTEXT>Curry–Howard correspondence</KEYEDTEXT></KEYWORD>: the equivalence between types / programs / evaluation on one side and propositions / proofs / simplification on the other side.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Deep Link Equating Math Proofs and Computer Programs</T><ST>Mathematical logic and the code of computer programs are, in an exact way, mirror images of each other.</ST><A>https://www.quantamagazine.org/the-deep-link-equating-math-proofs-and-computer-programs-20231011/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sheon</FIRSTNAME><LASTNAME>Han</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>10</MONTH><DAY>11</DAY></DATE><COMMENT>A description of the Curry-Howard correspondence with no mathematical examples.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>F#</TITLE>
      <ITEM><ARTICLE><X status="removed"><T>YUI Theater — Adam Granicz: “Robust and Rapid Web Development with WebSharper” (57 min.)</T><A>https://yuiblog.com/blog/2010/04/23/video-granicz/</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>12</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Adam</FIRSTNAME><LASTNAME>Granicz</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>21</DAY></DATE><COMMENT>A marketing presentation of WebSharper, a platform to write both the client and server sides using F#.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed" quality="-1"><T>An Introduction to F# with Don Syme (#1 of 4)</T><A>https://channel9.msdn.com/Blogs/David+Gristwood/An-Introduction-to-F-with-Don-Syme-1-of-4</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>26</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Brown</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Don</FIRSTNAME><LASTNAME>Syme</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH></DATE><COMMENT>A verbose presentation of the advantages of F# with no technical information, this is mostly marketing bullshit.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>An F# Tutorial with Don Syme (#2 of 4)</T><A>https://channel9.msdn.com/Blogs/David+Gristwood/An-F-Tutorial-with-Don-Syme-2-of-4</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>26</MINUTE><SECOND>46</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Brown</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Don</FIRSTNAME><LASTNAME>Syme</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH></DATE><COMMENT>Some simple code samples to discover F#.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>F# and Windows Azure with Don Syme (#3 of 4)</T><A>https://channel9.msdn.com/Blogs/David+Gristwood/F-and-Windows-Azure-with-Don-Syme-3-of-4</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>19</MINUTE><SECOND>40</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Brown</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Don</FIRSTNAME><LASTNAME>Syme</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH></DATE><COMMENT>A presentation of the asynchronous features of F# used to build a Web service provider.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>F# in use at Microsoft Research (#4 of 4)</T><A>https://channel9.msdn.com/Blogs/David+Gristwood/F-in-use-at-Microsoft-Research-4-of-4</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>40</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Brown</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Stern</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Jurgen</FIRSTNAME><LASTNAME>van Gael</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Anton</FIRSTNAME><LASTNAME>Schwaighofer</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Thore</FIRSTNAME><LASTNAME>Graepel</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Joaquin</FIRSTNAME><MIDDLENAME>Quiñonrero</MIDDLENAME><LASTNAME>Candela</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH></DATE><COMMENT>Three projects (analysis of Twitter feeds, Bing’s AdPredictor, and a Go game) explain why they have chosen F#.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>F# Tools and Resources</T><A>https://learn.microsoft.com/en-us/archive/msdn-magazine/2011/april/msdn-magazine-toolbox-fsharp-tools-and-resources</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Terrence</FIRSTNAME><LASTNAME>Dorsey</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>4</MONTH></DATE><COMMENT>F# tools, books, blogs…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Fun(ctional) Domain Driven Design (featuring Ukulele) (Jérémie CHASSAING)</T><A>https://www.youtube.com/watch?v=TLKtbm8NsPg</A><L>fr</L><F>MP4</F><DURATION><MINUTE>45</MINUTE><SECOND>46</SECOND></DURATION><DATE><YEAR>2023</YEAR><MONTH>4</MONTH><DAY>26</DAY></DATE></X><AUTHOR><FIRSTNAME>Jérémie</FIRSTNAME><LASTNAME>Chassaing</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>4</MONTH><DAY>13</DAY></DATE><COMMENT>A demo of writing some methods related to music theory.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>OCaml</TITLE>
      <ITEM><ARTICLE><X><T>Why OCaml</T><A>https://www.youtube.com/watch?v=v1CmGbOGb2I</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>39</SECOND></DURATION><DATE><YEAR>2016</YEAR><MONTH>3</MONTH><DAY>31</DAY></DATE></X><AUTHOR><FIRSTNAME>Yaron</FIRSTNAME><LASTNAME>Minsky</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>6</MONTH></DATE><COMMENT>A short presentation of OCaml characteristics and why Jane Street chose it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Custom operators in OCaml</T><A>https://blog.shaynefletcher.org/2016/09/custom-operators-in-ocaml.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shayne</FIRSTNAME><LASTNAME>Fletcher</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH><DAY>20</DAY></DATE><COMMENT>How to define infix and prefix operators.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Python, OCaml, and Machine Learning</T><A>https://signalsandthreads.com/python-ocaml-and-machine-learning/</A><L>en</L><F>MP4</F><DURATION><MINUTE>59</MINUTE><SECOND>33</SECOND></DURATION></X><X><T>Python, OCaml, and Machine Learning with Laurent Mazare</T><A>https://www.youtube.com/watch?v=d4SoT7rP28k</A><L>en</L><F>MP4</F><DURATION><MINUTE>59</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Laurent</FIRSTNAME><LASTNAME>Mazare</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Yaron</FIRSTNAME><LASTNAME>Minsky</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>7</DAY></DATE><COMMENT>A comparison of OCaml and Python: typing, garbage collector, data managements and visualisation libraries, Jupyter notebooks…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Language Design</T><A>https://signalsandthreads.com/language-design/</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>7</MINUTE><SECOND>59</SECOND></DURATION></X><X><T>Language Design with Leo White</T><A>https://www.youtube.com/watch?v=t7eNBh-zrOQ</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>7</MINUTE><SECOND>59</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Leo</FIRSTNAME><LASTNAME>White</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Yaron</FIRSTNAME><LASTNAME>Minsky</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>A discussion on language features: variant types, dependent types, Algebraic effects…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Effective Programming in OCaml • KC Sivaramakrishnan • YOW! 2021</T><A>https://www.youtube.com/watch?v=X28PFYvZ_V8</A><L>en</L><F>MP4</F><DURATION><MINUTE>32</MINUTE><SECOND>16</SECOND></DURATION><DATE><YEAR>2023</YEAR><MONTH>8</MONTH><DAY>21</DAY></DATE></X><AUTHOR><FIRSTNAME>KC</FIRSTNAME><LASTNAME>Sivaramakrishnan</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR></DATE><COMMENT>A good presentation of <CODEROUTINE>Effect</CODEROUTINE>s.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Building a UI Framework with Ty Overby</T><A>https://signals-threads.simplecast.com/episodes/building-a-ui-framework-with-ty-overby</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>3</SECOND></DURATION></X><X><T>Building a UI Framework with Ty Overby</T><A>https://www.youtube.com/watch?v=NT1_A1AfBL0</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>3</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ty</FIRSTNAME><LASTNAME>Overby</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Yaron</FIRSTNAME><LASTNAME>Minsky</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>10</MONTH><DAY>6</DAY></DATE><COMMENT>The creation on Bonsai, a Web UI library.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What is an Operating System?</T><A>https://signalsandthreads.com/what-is-an-operating-system/</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>11</SECOND></DURATION></X><X><T>What is an Operating System? with Anil Madhavapeddy</T><A>https://www.youtube.com/watch?v=QQKD3ul0R0U</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>11</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Anil</FIRSTNAME><LASTNAME>Madhavapeddy</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Yaron</FIRSTNAME><LASTNAME>Minsky</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>11</MONTH><DAY>3</DAY></DATE><COMMENT>The stories of MirageOS and of multicore OCaml.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality="1"><T>Memory Management</T><A>https://signalsandthreads.com/memory-management/</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>22</MINUTE><SECOND>34</SECOND></DURATION></X><X><T>Memory Management with Stephen Dolan</T><A>https://www.youtube.com/watch?v=SetLtBH43_U</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>22</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>Dolan</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Yaron</FIRSTNAME><LASTNAME>Minsky</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>1</MONTH><DAY>5</DAY></DATE><COMMENT>An interesting technical discussion on memory management in OCaml.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>OCaml 5 With Multicore Support Is Here!</T><A>https://tarides.com/blog/2022-12-19-ocaml-5-with-multicore-support-is-here/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christine</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>12</MONTH><DAY>19</DAY></DATE><COMMENT>A short announcement of OCaml 5.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Building the OCaml GPT library</T><A>https://medium.com/@playersrebirth/building-the-ocaml-gpt-library-650c00b4d72b</A><L>en</L><F>HTML</F></X><AUTHOR><GIVENNAME>PixieDust</GIVENNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>8</MONTH><DAY>22</DAY></DATE><COMMENT>An overview of using dune for a project, but this is too high-level to be really useful.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>WebAssembly Support for OCaml: Introducing Wasm_of_Ocaml</T><A>https://tarides.com/blog/2023-11-01-webassembly-support-for-ocaml-introducing-wasm-of-ocaml/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Isabella</FIRSTNAME><LASTNAME>Leandersson</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>11</MONTH><DAY>1</DAY></DATE><COMMENT>The projects to port OCaml to Wasm and, in particular <CODEROUTINE>wasm_of_ocaml</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality="-1"><T>OCaml: Memory Safety and Beyond</T><A>https://tarides.com/blog/2023-12-14-ocaml-memory-safety-and-beyond/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Gazagnaire</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>12</MONTH><DAY>14</DAY></DATE><COMMENT>An advertisement for OCaml, explaining that it is a safer language. This is an answer to a paper, but the main point of that one is to stop using C/C++.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Meet odoc, OCaml's Documentation Generator</T><A>https://tarides.com/blog/2024-01-10-meet-odoc-ocaml-s-documentation-generator/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christine</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>1</MONTH><DAY>10</DAY></DATE><COMMENT>A very short presentation of <CODEROUTINE>odoc</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How to Setup OCaml on Windows with WSL</T><A>https://tarides.com/blog/2024-05-08-how-to-setup-ocaml-on-windows-with-wsl/</A><L>en</L><F>HTML</F></X><AUTHOR><GIVENNAME>Pizie Dust</GIVENNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>5</MONTH><DAY>8</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>7 OCaml Gotchas</T><A>https://dev.to/chshersh/7-ocaml-gotchas-207e</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dmitrii</FIRSTNAME><LASTNAME>Kovanikov</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Getting OCaml Through the Eye of a Needle</T><A>https://hypirion.com/musings/getting-ocaml-through-the-eye-of-a-needle</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jean Niklas</FIRSTNAME><LASTNAME>L’orange</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>An experiment of coding a small web service ends up being painful, mostly because the tools and libraries are not properly maintained.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why I Like Ocaml</T><ST>I like OCaml and this is why</ST><A>https://priver.dev/blog/ocaml/why-i-like-ocaml/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Emil</FIRSTNAME><LASTNAME>Privér</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>7</MONTH><DAY>21</DAY></DATE><COMMENT>The author likes that OCaml is functional, typed, and infers types.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Pragmatic Category Theory | Part 1: Semigroup Intro</T><A>https://chshersh.com/blog/2024-07-30-pragmatic-category-theory-part-01.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dmitrii</FIRSTNAME><LASTNAME>Kovanikov</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>7</MONTH><DAY>30</DAY></DATE><COMMENT>The definition of a Semigroup and some basic examples of Semigroups.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://chshersh.com/blog/2024-07-30-pragmatic-category-theory-part-01.html"><X><T>Pragmatic Category Theory | Part 2: Composing Semigroups</T><A>https://chshersh.com/blog/2024-08-19-pragmatic-category-theory-part-02.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dmitrii</FIRSTNAME><LASTNAME>Kovanikov</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>8</MONTH><DAY>19</DAY></DATE><COMMENT>More examples of Semigroups, using a <CODEROUTINE>Pair</CODEROUTINE> to combine two Semigroups, and the fact that this allows to compute several results from a set of values by traversing the set only once.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://chshersh.com/blog/2024-08-19-pragmatic-category-theory-part-02.html"><X><T>Pragmatic Category Theory | Part 3: Associativity</T><A>https://chshersh.com/blog/2024-12-20-pragmatic-category-theory-part-03.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dmitrii</FIRSTNAME><LASTNAME>Kovanikov</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>12</MONTH><DAY>20</DAY></DATE><COMMENT>These three examples of using Semigroups for real programming (List of Chunks, Treaps, and MapReduce) could have been better explained.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Introducing Dune: The Essential Build System for OCaml Developers</T><A>https://tarides.com/blog/2024-09-26-introducing-dune-the-essential-build-system-for-ocaml-developers/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christine</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>A non-technical and short presentation of Dune.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://tarides.com/blog/2024-09-26-introducing-dune-the-essential-build-system-for-ocaml-developers/"><X><T>Dune Package Management: Revolutionising OCaml Development</T><A>https://tarides.com/blog/2024-10-09-dune-package-management-revolutionising-ocaml-development/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christine</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE><COMMENT>Some little additional information about Dune: its current status and its future.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://tarides.com/blog/2024-10-09-dune-package-management-revolutionising-ocaml-development/"><X><T>Dune Developer Preview: Installing The OCaml Compiler With Dune Package Management</T><A>https://tarides.com/blog/2024-10-16-dune-developer-preview-installing-the-ocaml-compiler-with-dune-package-management/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christine</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>10</MONTH><DAY>16</DAY></DATE><COMMENT>Dune manages the installation of the OCaml compiler.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Making OCaml Mainstream: Support Our Open Source Work on GitHub</T><A>https://tarides.com/blog/2024-11-06-making-ocaml-mainstream-support-our-open-source-work-on-github/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Isabella</FIRSTNAME><LASTNAME>Leandersson</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>The projects to which Tarides contributes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Learn OCaml the Easy Way - Including the Hard Bits</T><A>https://tarides.com/blog/2024-12-18-learn-ocaml-the-easy-way-including-the-hard-bits/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Isabella</FIRSTNAME><LASTNAME>Leandersson</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>12</MONTH><DAY>18</DAY></DATE><COMMENT>Some tutorials, the community, the events, and Tarides’ trainings.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Most Elegant Configuration Language</T><A>https://chshersh.com/blog/2025-01-06-the-most-elegant-configuration-language.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dmitrii</FIRSTNAME><LASTNAME>Kovanikov</LASTNAME></AUTHOR><DATE><YEAR>2025</YEAR><MONTH>1</MONTH><DAY>6</DAY></DATE><COMMENT>A simple configuration file parser, but the simplicity is for the person implementing the parser, not for the developer using that parser who needs to implement more logic and to document the syntax of the configuration, neither for the user who has to read and apply that syntax. Many usual configuration syntaxes are too complex, but the one proposed here is too simplistic. Json would be a better choice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Using clang-cl With OCaml 5</T><A>https://tarides.com/blog/2025-01-15-using-clang-cl-with-ocaml-5/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Antonin</FIRSTNAME><LASTNAME>Décimo</LASTNAME></AUTHOR><DATE><YEAR>2025</YEAR><MONTH>1</MONTH><DAY>15</DAY></DATE><COMMENT>Tarides has added the support of building OCaml with Clang on Windows.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The First Wasm_of_ocaml Release is Out!</T><A>https://tarides.com/blog/2025-02-19-the-first-wasm-of-ocaml-release-is-out/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Olivier</FIRSTNAME><LASTNAME>Nicole</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Isabella</FIRSTNAME><LASTNAME>Leandersson</LASTNAME></AUTHOR><DATE><YEAR>2025</YEAR><MONTH>2</MONTH><DAY>19</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Simple Ways to Run OCaml Code</T><A>https://batsov.com/articles/2025/02/23/simple-ways-to-run-ocaml-code/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Bozhidar</FIRSTNAME><LASTNAME>Batsov</LASTNAME></AUTHOR><DATE><YEAR>2025</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Full blown productivity in VSCode with OCaml</T><A>https://tarides.com/blog/2025-02-28-full-blown-productivity-in-vscode-with-ocaml/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pizie</FIRSTNAME><LASTNAME>Dust</LASTNAME></AUTHOR><DATE><YEAR>2025</YEAR><MONTH>2</MONTH><DAY>28</DAY></DATE><COMMENT>The new features of Tarides’ VSCode extension.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>OCaml Web Development: Essential Tools and Libraries in 2025</T><A>https://tarides.com/blog/2025-05-15-ocaml-web-development-essential-tools-and-libraries-in-2025/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Isabella</FIRSTNAME><LASTNAME>Leandersson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Van de Woestyne</LASTNAME></AUTHOR><DATE><YEAR>2025</YEAR><MONTH>5</MONTH><DAY>15</DAY></DATE><COMMENT>A long list of frameworks to implement Web applications, both client and server sides.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>ReasonML</TITLE>
      <ITEM><ARTICLE><X quality="-1"><T>X Marks the Spot (Part 1): ReasonML</T><A>https://8thlight.com/insights/x-marks-the-spot-part-1-reasonml</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>3</MONTH><DAY>19</DAY></DATE><COMMENT>An unclear presentation of ReasonML.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://8thlight.com/insights/x-marks-the-spot-part-1-reasonml"><X quality="-1"><T>X Marks the Spot (Part 2): ReasonReact</T><A>https://8thlight.com/insights/x-marks-the-spot-part-2-reasonreact</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>9</DAY></DATE><COMMENT>This description of ReasonReact, a Reason library for React, is also difficult to understand.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>