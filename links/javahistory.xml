<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Java history</TITLE>
<PATH>links/javahistory.xml</PATH>
<DATE><YEAR>2020</YEAR><MONTH>11</MONTH><DAY>15</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><X><T>Wikipedia</T><A>https://en.wikipedia.org/wiki/Java_version_history</A><L>en</L><F>HTML</F></X></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>Java City: The Java Enterprise Ecosystem</T><A>http://www.onjava.com/pub/a/onjava/2005/06/22/javacity.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Farley</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>22</DAY></DATE><COMMENT>A description of the current Java landscape, from the standards to the open source tools and frameworks used by everybody. The current fashionable meme is also present here: Sun should give away some control of the Java standards.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='zombie'><T>Essential Java resources</T><ST>A comprehensive listing of must-have books, sites, blogs, events, and more developerWorks</ST><A>https://www.ibm.com/developerworks/java/library/j-javaresources/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>1</MONTH><DAY>23</DAY></DATE><COMMENT>A good overview of the current Java world.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>James Gosling on Apple, Apache, Google, Oracle and the Future of Java</T><A>https://www.youtube.com/watch?v=9ei-rbULWoA</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>20</MINUTE><SECOND>9</SECOND></DURATION><DATE><YEAR>2010</YEAR><MONTH>11</MONTH><DAY>29</DAY></DATE></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Gosling</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>11</MONTH><DAY>17</DAY></DATE><COMMENT>A Q&amp;A session about Gosling's personal opinions on many subjects.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Largest Survey Ever of Java Developers</T><ST>What 10,500 Java developers tell us about their projects, their tools, and themselves</ST><A>http://www.javamagazine.mozaicreader.com/NovemberDecember2018#&amp;pageSet=15&amp;page=0</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Mapple</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Binstock</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Best of the JDK Face-Off</T><ST>Twenty-five years of Java development saw many innovations in languages, libraries, tooling, and runtimes. Tell us what you think matters most.</ST><A>https://blogs.oracle.com/javamagazine/the-best-of-the-jdk-face-off</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sharat</FIRSTNAME><LASTNAME>Chander</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>18</DAY></DATE><COMMENT>A tournarment to designate the best recent Java feature.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>The 25 greatest Java apps ever written</T><ST>From space exploration to genomics, from reverse compilers to robotic controllers, Java is at the heart of today’s world. Here are a few of the countless Java apps that stand out from the crowd.</ST><A>https://blogs.oracle.com/javamagazine/the-top-25-greatest-java-apps-ever-written</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alexa</FIRSTNAME><LASTNAME>Morales</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>6</MONTH><DAY>5</DAY></DATE><COMMENT>A biased list of applications.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The role of preview features in Java 14, Java 15, Java 16, and beyond</T><ST>How Oracle gathers feedback on new JDK functionality with preview, experimental, and incubating features</ST><A>https://blogs.oracle.com/javamagazine/the-role-of-previews-in-java-14-java-15-java-16-and-beyond</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Delabassee</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE><COMMENT>A description of the mechanisms used to preview language, JVM or JDK new features.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Future</TITLE>
      <ITEM><ARTICLE><X><T>Java Type Inference Won't Support Mutability Specification</T><A>https://www.infoq.com/news/2016/12/java-type-inference-mutability/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abraham</FIRSTNAME><LASTNAME>Marín Pérez</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>12</MONTH><DAY>22</DAY></DATE><COMMENT>A description of the cases where type inference would be supported.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Enums to Be Enhanced with Sharper Type Support</T><A>https://www.infoq.com/news/2017/01/java-enhanced-enums/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abraham</FIRSTNAME><LASTNAME>Marín Pérez</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>10</DAY></DATE><COMMENT>Improving enums so they support generics and methods.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 10 Could Bring Upgraded Lambdas</T><A>https://www.infoq.com/news/2017/01/java10-lambda-leftovers/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abraham</FIRSTNAME><LASTNAME>Marín Pérez</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>17</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Pattern Matching for Java</T><A>http://cr.openjdk.java.net/~briangoetz/amber/pattern-match.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gavin</FIRSTNAME><LASTNAME>Bierman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH></DATE><COMMENT>The authors describe many possible language features related to pattern matching.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Project Amber: The Future of Java Exposed</T><A>https://blog.overops.com/project-amber-the-future-of-java-exposed/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Henn</FIRSTNAME><LASTNAME>Idan</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>20</DAY></DATE><COMMENT>A description of Amber, the project trying to implement the features described in the previous articles.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Pattern Matching for Java -- Runtime and Translation</T><A>http://cr.openjdk.java.net/~briangoetz/amber/pattern-match-translation.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH></DATE><COMMENT>An analysis of the implementation, at the compilation level, of pattern matching.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Project Loom: Fibers and Continuations for the Java Virtual Machine</T><A>http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ron</FIRSTNAME><LASTNAME>Pressler</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>Some initial thoughts about implementing fibers in Java.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Nestmates Makes Progress</T><A>https://www.infoq.com/news/2018/03/Nestmates/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>15</DAY></DATE><COMMENT>The problem with the way nested classes are currently implemented and the proposal of JEP 181 to add Nest-Based Access Control.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Inside the Language: Sealed Types</T><ST>How Java is moving toward pattern matching, improved enums, and better switch statements</ST><A>https://blogs.oracle.com/javamagazine/inside-the-language-sealed-types</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>10</MONTH><DAY>16</DAY></DATE><COMMENT>A description of sealed types and their interest.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is it time for operator overloading in Java?</T><ST>Love it or loathe it, this article makes the case that operator overloading is essential for making code easier to read, writer, and debug.</ST><A>https://blogs.oracle.com/javamagazine/is-it-time-for-overloading-in-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mahmoud</FIRSTNAME><LASTNAME>Abdelghany</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE><COMMENT>Some advocacy for adding operator overloading in Java.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Inline classes</TITLE>
        <ITEM><ARTICLE><X><T>Valhalla Update with Brian Goetz</T><A>https://www.youtube.com/watch?v=1H4vmT-Va4o</A><L>en</L><F>MP4</F><DURATION><MINUTE>35</MINUTE><SECOND>21</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>29</DAY></DATE><COMMENT>The current status of the protoype implementation of inline classes and the many remaining questions.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java: Benefit from Inline Class Properties Starting from Java 8</T><A>https://minborgsjavapot.blogspot.com/2019/08/java-benefit-from-inline-class.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Per-Åke</FIRSTNAME><LASTNAME>Minborg</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>8</MONTH><DAY>5</DAY></DATE><COMMENT>How to emulate inline classes with Java 8.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>A First Look at Java Inline Classes</T><A>https://www.infoq.com/articles/inline-classes-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>10</MONTH><DAY>17</DAY></DATE><COMMENT>A description of inline classes and they current status in the LW2 Prototype.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 5</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Readable Java 1.5</T><A>http://www.onjava.com/pub/a/onjava/2003/09/24/readable_java.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>Jungels</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>9</MONTH><DAY>29</DAY></DATE><COMMENT>A discussion about the readability of loop on collection content, generics and variance in Java 1.5.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Magic with Merlin: The generics prototype</T><ST>Merlin peers into the future and sees language-level changes in Tiger</ST><A>https://www.ibm.com/developerworks/java/library/j-mer12193.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>12</MONTH><DAY>19</DAY></DATE><COMMENT>An overview of the 1.5 release: generics, enumerations, varargs, autoboxing, new loop syntax and static imports.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Java 1.5 Tiger: A Developer's Notebook - Creating Varargs in Java 1.5 Tiger</T><A>http://www.onjava.com/catalog/javaadn/excerpt/javaadn_ch05.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Flanagan</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>8</MONTH></DATE><COMMENT>A presentation of varargs and their traps.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 7</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>The Open Road: Superpackages</T><A>http://today.java.net/pub/a/today/2008/03/06/jsr-294-superpackages.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>The current status of JSR 294 for solving the intra vs. inter-package visibility issue.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1' status='zombie'><T>Java platform roundtable, Spring 2010</T><ST>Forces shaping the future of the Java industry</ST><A>https://www.ibm.com/developerworks/java/library/j-javaroundtable/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jenni</FIRSTNAME><LASTNAME>Aloi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Athen</FIRSTNAME><LASTNAME>O'Shea</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>20</DAY></DATE><COMMENT>Some notes from a roundtable about Java status and future: impact of Oracle buying Sun, the other JVM languages, closures… These notes are too concise to be really informative for the reader.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>7 Things About Java 7</T><A>http://skillsmatter.com/podcast/java-jee/7-things-about-java-7</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>15</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>Automatic resource management, type annotations, New I/O 2, collection syntax, strings in <CODEROUTINE>switch</CODEROUTINE>, <CODEROUTINE>InvokeDynamic</CODEROUTINE>, and closures.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='2'><T>Better Resource Management with Java SE 7: Beyond Syntactic Sugar</T><A>https://oracle.com/technical-resources/articles/java/trywithresources.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Julien</FIRSTNAME><LASTNAME>Ponge</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH></DATE><COMMENT>A detailed presentation of the try-with-resources statement: syntax, <CODEROUTINE>java.lang.AutoCloseable</CODEROUTINE> interface, suppressed exceptions, and bytecodes generated under the hood.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Showtime! Java 7 is here</T><A>http://www.oraclejavamagazine-digital.com/javamagazine/premiere2011?pg=21#pg21</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Reinhold</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Meloan</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH></DATE><COMMENT>Yet another quick overview of the new features.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Trent Gray-Donald on IBM SDK Java Technology Edition V7</T><A>https://www.youtube.com/watch?v=wGiHFyqGfOk</A><L>en</L><F>MP4</F><DURATION><MINUTE>9</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Trent</FIRSTNAME><LASTNAME>Gray-Donald</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Laningham</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>20</DAY></DATE><COMMENT>Some information about the new SDK: some new Java 7 features, project Coin, IBM joins OpenJDK, better support of dynamic languages…</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 8</TITLE>
      <ITEM><ARTICLE><X><T>Lambda: A Peek Under the Hood</T><A>https://www.youtube.com/watch?v=f9UvX2xhxa8</A><L>en</L><F>MP4</F><DURATION><MINUTE>59</MINUTE><SECOND>5</SECOND></DURATION><DATE><YEAR>2015</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>30</DAY></DATE><COMMENT>An explanation on how are implemented lambdas and the rational for this implementation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 8 – Interfaces fonctionnelles</T><A>https://blog.ippon.fr/2014/03/18/java-8-interfaces-fonctionnelles/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alexis</FIRSTNAME><LASTNAME>Seigneurin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>18</DAY></DATE><COMMENT>An overview of Functional Interfaces.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 8 – Gestion du temps</T><A>https://blog.ippon.fr/2014/03/19/java-8-gestion-du-temps/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pierre</FIRSTNAME><LASTNAME>Templier</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>19</DAY></DATE><COMMENT>A short overview of <CODEROUTINE>java.time</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 8 language changes</T><ST>Learn how Lambda expressions and changes to interface classes make Java 8 a new language</ST><A>https://www.ibm.com/developerworks/library/j-java8lambdas/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT>A short overview of lambda expressions.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>8 Great Java 8 Features No One's Talking about</T><A>https://www.infoq.com/articles/Java-8-Quiet-Features/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tal</FIRSTNAME><LASTNAME>Weiss</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT><CODEROUTINE>StampedLock</CODEROUTINE>, <CODEROUTINE>LongAdder</CODEROUTINE>, <CODEROUTINE>Arrays.parallelSort()</CODEROUTINE>, the new date/time API, <CODEROUTINE>Process. destroyForcibly()</CODEROUTINE> and <CODEROUTINE>Process. isAlive()</CODEROUTINE>, the exact <CODEROUTINE>Math</CODEROUTINE> methods, <CODEROUTINE>SecureRandom.getInstanceStrong()</CODEROUTINE>, and <CODEROUTINE>Optional&lt;T&gt;</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Optional</TITLE>
        <ITEM><ARTICLE><X><T>Tired of Null Pointer Exceptions? Consider Using Java SE 8's Optional!</T><A>https://oracle.com/technical-resources/articles/java/java8-optional.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Raoul-Gabriel</FIRSTNAME><LASTNAME>Urla</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH></DATE><COMMENT>A good explanation on how to use <CODEROUTINE>Optional</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java 8’s new Optional type is worthless</T><A>https://medium.com/@bgourlie/java-8-s-new-optional-type-is-worthless-448a00fa672d</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>W.</FIRSTNAME><MIDDLENAME>Brian</MIDDLENAME><LASTNAME>Gourlie</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Optional Anti-Patterns</T><ST>Optionals have proven so useful that some devs have taken them out of their native habitat. Here are anti-patterns and code smells to avoid.</ST><A>https://dzone.com/articles/optional-anti-patterns</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Przemyslaw</FIRSTNAME><LASTNAME>Magda</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>13</DAY></DATE><COMMENT>Some examples of bad code are contrived, I wonder if someone already wrote such code.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>A look at the Optional datatype in Java and some anti-patterns when using it</T><A>https://medium.freecodecamp.org/optional-in-java-and-anti-patterns-using-it-7d87038362ba</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mervyn</FIRSTNAME><LASTNAME>McCreight</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mehmet</FIRSTNAME><MIDDLENAME>Emin</MIDDLENAME><LASTNAME>Tok</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>12</DAY></DATE><COMMENT>Some more realistic examples of improperly using <CODEROUTINE>Optional</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Interface default and static methods</TITLE>
        <ITEM><ARTICLE><X><T>Interfaces in Java</T><A>https://developers.redhat.com/blog/2017/11/10/interfaces-in-java/8</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abdul Azeez</FIRSTNAME><LASTNAME>Idris</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>10</DAY></DATE><COMMENT>A very short description of the new features of interfaces: default methods and static methods.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Static and Default Methods in Interfaces in Java</T><A>https://www.baeldung.com/java-static-default-methods</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>9</MONTH><DAY>20</DAY></DATE><COMMENT>A longer explanation of the same.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Streams</TITLE>
        <ITEM><ARTICLE><X><T>API Stream – Une nouvelle façon de gérer les Collections en Java 8</T><A>https://blog.ippon.fr/2014/03/17/api-stream-une-nouvelle-facon-de-gerer-les-collections-en-java-8/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Luc</FIRSTNAME><LASTNAME>Clément</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>17</DAY></DATE><COMMENT>An overview of <CODEROUTINE>Stream</CODEROUTINE>s.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>3 Reasons why You Shouldn’t Replace Your for-loops by Stream.forEach()</T><A>https://blog.jooq.org/2015/12/08/3-reasons-why-you-shouldnt-replace-your-for-loops-by-stream-foreach/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Luka</FIRSTNAME><LASTNAME>Seder</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>12</MONTH><DAY>8</DAY></DATE><COMMENT>The title says all: do use blindly <CODEROUTINE>Stream.forEach()</CODEROUTINE>, but consider performance, readability and maintainability.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>JDK 8: Lessons Learnt With Lambdas and Streams - Simon Ritter</T><A>https://www.youtube.com/watch?v=w0Fd5PfI8TQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>50</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Ritter</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>2</DAY></DATE><COMMENT>A few, but good, pieces of advice for using Streams.</COMMENT></ARTICLE></ITEM>
        <ITEM><BLIST><TITLE>Brian Goetz's Java Streams</TITLE>
          <ITEM><ARTICLE><X quality='1'><T>An introduction to the java.util.stream library</T><ST>Run functional-style queries on collections and other data sets</ST><A>https://developer.ibm.com/articles/j-java-streams-1-brian-goetz/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>An introduction to streams.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='1'><T>Aggregating with Streams</T><ST>Slice, dice, and chop data with ease</ST><A>https://developer.ibm.com/articles/j-java-streams-2-brian-goetz/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>Using <CODEROUTINE>Collector</CODEROUTINE> to perform the reduction.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='1'><T>Streams under the hood</T><ST>Understand java.util.stream internals</ST><A>https://developer.ibm.com/articles/j-java-streams-3-brian-goetz/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>Some details to know in order to get good performance: <CODEROUTINE>Spliterator</CODEROUTINE>, stream flags, encounter order…</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='1'><T>From concurrent to parallel</T><ST>Understanding the factors influencing parallel performance</ST><A>https://developer.ibm.com/articles/j-java-streams-4-brian-goetz/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>7</MONTH><DAY>18</DAY></DATE><COMMENT>A basic but good overview of the factors to determinate if parallelization is worthwhile.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality='1'><T>Parallel stream performance</T><ST>Optimizing stream pipelines for parallel processing</ST><A>https://developer.ibm.com/articles/j-java-streams-5-brian-goetz/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>7</MONTH><DAY>18</DAY></DATE><COMMENT>A description of some factors resulting in good or bad performance gain when parallelizing a Stream.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java 8 idioms</TITLE>
        <ITEM><ARTICLE><X><T>An easier path to functional programming in Java</T><ST>Think declaratively to adopt functional techniques in your Java programs</ST><A>https://developer.ibm.com/articles/j-java8idioms1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>A simple introduction to imperative style vs. declarative style vs. functional style.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Function composition and the Collection Pipeline pattern</T><ST>Functional patterns for iterating collections in Java</ST><A>https://developer.ibm.com/articles/j-java8idioms2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>A very basic explanation of the benefits of using the Collection Pipeline pattern with Streams.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Functional alternatives to the traditional for loop</T><ST>Three newer methods that cut the fuss out of even complex iterations</ST><A>https://developer.ibm.com/articles/j-java8idioms3/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>How to rewrite a <CODEROUTINE>for</CODEROUTINE> loop using Streams.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>In praise of helpful coding</T><ST>The surprising benefits of a Java 8 convention</ST><A>https://developer.ibm.com/articles/j-java8idioms4/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>How to properly write functional code.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>An alternative to passing through</T><ST>Learn how to recognize and replace pass-through lambdas with method references in your Java code</ST><A>https://developer.ibm.com/articles/j-java8idioms5/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>7</DAY></DATE><COMMENT>A good description of replacing lambdas by method references.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Why the perfect lambda expression is just one line</T><ST>Write single-line lambdas for code that is easier to read, test, and reuse</ST><A>https://developer.ibm.com/articles/j-java8idioms6/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>2</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Functional interfaces</T><ST>Learn how to create custom functional interfaces, and why you should use built-ins whenever possible</ST><A>https://developer.ibm.com/articles/j-java8idioms7/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT>The subtitle says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java knows your type</T><ST>Learn how to use type inference in lambda expressions, and get tips for improving parameter naming</ST><A>https://developer.ibm.com/articles/j-java8idioms8/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>11</DAY></DATE><COMMENT>The subtitle says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Cascading lambdas</T><ST>Reusable functions help make your code highly concise, but does conciseness ever go too far?</ST><A>https://developer.ibm.com/articles/j-java8idioms9/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>7</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Using closures to capture state</T><ST>Lambdas are stateless, but your programs don't have to be</ST><A>https://developer.ibm.com/articles/j-java8idioms10/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>6</DAY></DATE><COMMENT>The difference between lambdas and closures.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Functional purity</T><ST>Understanding streams and mutables in the functional pipeline</ST><A>https://developer.ibm.com/articles/j-java8idioms11/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>5</DAY></DATE><COMMENT>The streams are evaluated lazily and, possibly, in parallel, but this imposes to only call pure fonctions.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 9</TITLE>
      <ITEM><ARTICLE><X><T>JShell: The new Java 9 REPL</T><A>https://www.theserverside.com/tip/JShell-The-new-Java-9-REPL</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Barry</FIRSTNAME><LASTNAME>Burd</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>8</MONTH></DATE><COMMENT>A presentation of JShell.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Tutoriel pour comprendre les futures fonctionnalités modulaires de Java 9</T><A>https://soat.developpez.com/tutoriels/java/futures-fonctionnalites-modulaires-java9/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abdelmajid</FIRSTNAME><LASTNAME>Lali</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>3</MONTH><DAY>22</DAY></DATE><COMMENT>A short history of the Java modularization effort and what will be done in Java 9.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What's Cool in Java 8, and New in Java 9</T><A>https://www.youtube.com/watch?v=o-YQLLHc-xg</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>5</MINUTE><SECOND>15</SECOND></DURATION><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>29</DAY></DATE></X><AUTHOR><FIRSTNAME>Aurelio</FIRSTNAME><LASTNAME>Garcia-Ribeyro</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>The main Java 8 features (lambda expressions, default methods, method references, date/time) and a long list of Java 9 changes (Strings using less memory, Javadoc search, Jigsaw, enhanced deprecation, easier creation of small Collections, jshell, multi-release JAR files, Unicode 8, UTF8 property files, OCSP support, SHA-3, HTML5 Javadoc, HTTP/2, encapsulated internal APIs, new version-string scheme…).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>55 New Features in JDK 9 by Simon Ritter</T><A>https://www.youtube.com/watch?v=CMMzG8I23lY</A><L>en</L><F>MP4</F><DURATION><MINUTE>51</MINUTE><SECOND>46</SECOND></DURATION><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>11</DAY></DATE></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Ritter</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>An overview of Java 9.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 9 : le comité exécutif du JCP rejette la spécification actuelle des modules Java (Jigsaw)</T><ST>Qui a voté « Non » et pourquoi ?</ST><A>https://www.developpez.com/actu/135508/Java-9-le-comite-executif-du-JCP-rejette-la-specification-actuelle-des-modules-Java-Jigsaw-qui-a-vote-Non-et-pourquoi/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Guilloux</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>4 Hidden Features in Java 9</T><A>https://blog.idrsolutions.com/2017/05/4-hidden-features-java-9/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kieran</FIRSTNAME><LASTNAME>France</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT><BLIST><TITLE>A quick description of</TITLE><ITEM>the Process API updates</ITEM><ITEM>Ahead-of-Time Compilation</ITEM><ITEM>private methods in interfaces</ITEM><ITEM>Multi-Resolution Images</ITEM></BLIST></COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 9 Optional API Additions</T><A>https://www.baeldung.com/java-9-optional</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>The new methods of <CODEROUTINE>Optional</CODEROUTINE>: <CODEROUTINE>or()</CODEROUTINE>, <CODEROUTINE>ifPresentOrElse()</CODEROUTINE>, and <CODEROUTINE>stream()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Faster and Easier Use and Redistribution of Java SE</T><A>https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Donald</FIRSTNAME><LASTNAME>Smith</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>6</DAY></DATE><COMMENT>Oracle wants to release a new version of Java SE every six months and will open source some of its commercial products.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Opening Up Java EE - An Update</T><A>https://blogs.oracle.com/theaquarium/opening-up-ee-update</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Delabassee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>12</DAY></DATE><COMMENT>Oracle moves Java EE to the Eclipse Foundation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>9 Java Champions on Java 9: Part 1</T><A>https://zeroturnaround.com/rebellabs/9-java-champions-java-9-part-1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Winterhalter</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martijn</FIRSTNAME><LASTNAME>Verburg</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Heinz</FIRSTNAME><LASTNAME>Kabutz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>13</DAY></DATE><COMMENT>Some short opinions about Java 9.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE pred='https://zeroturnaround.com/rebellabs/9-java-champions-java-9-part-1/'><X><T>9 Java Champions on Java 9: Part 2</T><A>https://zeroturnaround.com/rebellabs/9-java-champions-on-java-9-part-2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Henri</FIRSTNAME><LASTNAME>Tremblay</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><LASTNAME>Torre</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Bruno</FIRSTNAME><LASTNAME>Souza</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Ritter</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>The continuation of the previous article.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 9: Cleaning up your default methods using private interface methods</T><A>https://www.deadcoderising.com/java-9-cleaning-up-your-default-methods-using-private-interface-methods/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Marius</FIRSTNAME><LASTNAME>Herring</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>7</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>String concatenation in Java 9 (part 1): Untangling invokeDynamic</T><A>https://www.guardsquare.com/en/blog/string-concatenation-java-9-untangling-invokedynamic</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tim</FIRSTNAME><LASTNAME>van Den Broecke</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>30</DAY></DATE><COMMENT>A description of the invokedynamic mechanism, how javac uses it for string concatenation and how DexGuard translates it back to Java 8.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Compact Strings in Java 9</T><A>https://www.baeldung.com/java-9-compact-string</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>A description of compact Strings.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Reactive Streams</TITLE>
        <ITEM><ARTICLE><X><T>Reactive Streams in Java 9</T><ST>Let's take a deep dive into Reactive Streams in JDK 9, their defining philosophy of asynchronous communication, and how best to use them in your code.</ST><A>https://dzone.com/articles/reactive-streams-in-java-9</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Albano</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>10</DAY></DATE><COMMENT>An explanation of the need for the API and its presentation.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality='-1'><T>Java 9 Reactive Streams</T><A>https://www.baeldung.com/java-9-reactive-streams</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>9</MONTH><DAY>2</DAY></DATE><COMMENT>A short introduction to <CODEROUTINE>Flow.Publisher</CODEROUTINE>, <CODEROUTINE>Flow.Subscriber</CODEROUTINE> and <CODEROUTINE>Flow.Processor</CODEROUTINE>, but the comments report some errors.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 10</TITLE>
      <ITEM><ARTICLE><X><T>JEP draft: Time-Based Release Versioning</T><A>http://openjdk.java.net/jeps/8192828</A><L>en</L><F>HTML</F></X><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>1</DAY></DATE><COMMENT>A proposal for changing the way the Java SE /JDK version is numbered.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Immutable Versus Unmodifiable in JDK 10</T><A>https://marxsoftware.blogspot.com/2018/01/schopenhauers-law-immutability.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dustin</FIRSTNAME><LASTNAME>Marx</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>JDK 10 documentation tries to clarify immutability vs. unmodifiability, and new copy factory methods are added to create unmodifiable collections.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What’s new in Java 10: Episode 1</T><A>https://blog.gypsyengineer.com/en/tech/what-is-new-in-java-10-episode-one.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Artem</FIRSTNAME><LASTNAME>Smotrakov</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>7</DAY></DATE><COMMENT>A rather detailed list of the changes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE pred='https://blog.gypsyengineer.com/en/tech/what-is-new-in-java-10-episode-one.html'><X><T>What’s new in Java 10: Episode 2</T><A>https://blog.gypsyengineer.com/en/tech/whats-new-in-java-10-episode-two.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Artem</FIRSTNAME><LASTNAME>Smotrakov</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>18</DAY></DATE><COMMENT>The continuation of the previous article.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 10 Local Variable Type Inference</T><A>https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Raoul-Gabriel</FIRSTNAME><LASTNAME>Urma</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Warburton</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>19</DAY></DATE><COMMENT>A good overview of local variable type inference: what is supported and what isn't, some advice when to use <CODEROUTINE>var</CODEROUTINE> and when to use an explicit type.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about ... Java 10</T><ST>Local-variable type inference is the controversial headliner, but Java 10 brings welcome changes to garbage collection and container awareness in the JVM</ST><A>https://www.ibm.com/developerworks/java/library/j-5things17/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>17</DAY></DATE><COMMENT>Release cadence, <CODEROUTINE>var</CODEROUTINE>, removals/deprecations, container support, and application class data sharing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Unlocking Intersection Types With ‘var’ In Java 10</T><A>https://blog.codefx.org/java/intersection-types-var/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicolai</FIRSTNAME><LASTNAME>Parlog</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>6</MONTH><DAY>11</DAY></DATE><COMMENT>Using <CODEROUTINE>var</CODEROUTINE> partially helps handling intersection types, a language feature missing in Java.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 11</TITLE>
      <ITEM><ARTICLE><X quality='-1'><T>Java 11 Will Include More Than Just Features</T><ST>What are the upcoming features in Java 11, and how will it be different from Java 9 and 10?</ST><A>https://blog.takipi.com/java-11-will-include-more-than-just-features/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Henn</FIRSTNAME><LASTNAME>Idan</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>15</DAY></DATE><COMMENT>Some little information about Java 11: features (<CODEROUTINE>var</CODEROUTINE> for lamba parameters, Epsilon garbage collector, dynamic class-file constants and removal of the Java EE and CORBA modules) and long term support.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>JDK 11 is in Rampdown Phase One</T><ST>Making its way towards a general release</ST><A>https://jaxenter.com/jdk-11-rampdown-phase-one-146293.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>2018</YEAR><MONTH>6</MONTH><DAY>29</DAY></DATE><COMMENT>The complete list of features added or removed from Java 11.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 11 API Change Proposals</T><ST>Want to know what's next for Java 11? Check out this post on the proposed Java 11 API changes to learn more.</ST><A>https://dzone.com/articles/java-11-api-changes-so-far</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Naoki</FIRSTNAME><LASTNAME>Kishida</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE><COMMENT>Some minor API changes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 11 String API Updates</T><A>https://4comprehension.com/java-11-string-api-updates/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Grzegorz</FIRSTNAME><LASTNAME>Piwowarek</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>Some marginal improvements of <CODEROUTINE>String</CODEROUTINE> with some extracts of the JDK source code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Eleven Hidden Gems In Java 11</T><A>https://blog.codefx.org/java/java-11-gems/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicolai</FIRSTNAME><LASTNAME>Parlog</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH><DAY>12</DAY></DATE><COMMENT>A description of some of the small improvements available in Java 11</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Scripting</TITLE>
        <ITEM><ARTICLE><X><T>Scripting Java 11, Shebang And All</T><A>https://blog.codefx.org/java/scripting-java-shebang/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicolai</FIRSTNAME><LASTNAME>Parlog</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>Java 11 can run a single source file.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Single File Source Code with Java 11</T><A>https://medium.com/oracledevs/single-file-source-code-with-java-11-74d1a4c3d31</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Uday</FIRSTNAME><LASTNAME>Tatiraju</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>21</DAY></DATE><COMMENT>This other explanation is less complete.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 12</TITLE>
      <ITEM><ARTICLE><X><T>JDK 12: Switch Statements/Expressions in Action</T><ST>Want to learn more about the use of Switch statements and expressions in JDK 12 Early Access Builds? Check out this post to learn more!</ST><A>https://dzone.com/articles/jdk-12-switch-statementsexpressions-in-action</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dustin</FIRSTNAME><LASTNAME>Marx</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>A detailed description of the new <CODEROUTINE>switch</CODEROUTINE> syntax.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>39 New Features (and APIs) in JDK 12</T><ST>Learn more about the newest features and APIs in JDK 12.</ST><A>https://dzone.com/articles/39-new-features-and-apis-in-jdk-12</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Ritter</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>A list of JDK 12 changes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>String API Updates in Java 12</T><A>https://www.baeldung.com/java12-string-api</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ganesh</FIRSTNAME><LASTNAME>Pagade</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>17</DAY></DATE><COMMENT>The new <CODEROUTINE>String</CODEROUTINE> methods: <CODEROUTINE>indent()</CODEROUTINE> and <CODEROUTINE>transform()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 13</TITLE>
      <ITEM><ARTICLE><X quality='1'><T>Programmer's Guide To Text Blocks</T><A>http://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Laskey</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Stuart</FIRSTNAME><LASTNAME>Marks</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>8</MONTH><DAY>6</DAY></DATE><COMMENT>A good detailed description of text blocks.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Inside Java 13’s switch Expressions and Reimplemented Socket API</T><ST>Incremental changes bring future benefits in this release.</ST><A>https://blogs.oracle.com/javamagazine/inside-java-13s-switch-expressions-and-reimplemented-socket-api</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Raoul-Gabriel</FIRSTNAME><LASTNAME>Urma</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Warburton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>10</MONTH><DAY>16</DAY></DATE><COMMENT>The <CODEROUTINE>yield</CODEROUTINE> statement in switch expressions and the rewrite of <CODEROUTINE>java.net.Socket</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 14</TITLE>
      <ITEM><ARTICLE><X><T>OpenJDK Startup - Late 2019 Edition</T><A>https://cl4es.github.io/2019/11/20/OpenJDK-Startup-Update.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Claes</FIRSTNAME><LASTNAME>Redestad</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>20</DAY></DATE><COMMENT>The improvements done to improve the JVM startup time and some benchmarks.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>JDK 14: The new features in Java 14</T><ST>Flight recorder event streaming, switch expressions, NVM support, and records are slated for the next version of standard Java</ST><A>https://www.infoworld.com/article/3436795/jdk-14-the-new-features-in-java-14.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Krill</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>10</DAY></DATE><COMMENT>A list of the new features.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 14 Arrives with a Host of New Features</T><ST>Java 14 contains more new features than the previous two releases—most of them aimed at easing coding.</ST><A>https://blogs.oracle.com/javamagazine/java-14-arrives-with-a-host-of-new-features</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Raoul-Gabriel</FIRSTNAME><LASTNAME>Urma</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>27</DAY></DATE><COMMENT>A description of some changes in Java 14: <CODEROUTINE>switch</CODEROUTINE> expressions, text blocks, <CODEROUTINE>instanceof</CODEROUTINE> pattern matching, records, and improved <CODEROUTINE>NullPointerException</CODEROUTINE> messages.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Flight Recorder and JFR Event Streaming in Java 14</T><ST>Get a stream of high-volume data points about your running app.</ST><A>https://blogs.oracle.com/javamagazine/java-flight-recorder-and-jfr-event-streaming-in-java-14</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>27</DAY></DATE><COMMENT>A description of Java Flight Recorder (JFR) and Java Mission Control (JMC) and the new event streaming.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Serializing Records</T><A>https://www.javaspecialists.eu/archive/Issue276.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Heinz</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Kabutz</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>29</DAY></DATE><COMMENT>Some differences between class serialization and record serialization.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Pattern Matching for instanceof in Java 14</T><ST>Use pattern matching for instanceof to simplify the use of the instanceof operator in Java, thereby making your code safer and easier to write.</ST><A>https://blogs.oracle.com/javamagazine/pattern-matching-for-instanceof-in-java-14</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mala</FIRSTNAME><LASTNAME>Gupta</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>18</DAY></DATE><COMMENT>A description of pattern matching for <CODEROUTINE>instanceof</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java 14 - Preview Features and their APIs</T><A>https://delabassee.com/Java14-Preview-API/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Delabassee</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>6</MONTH><DAY>18</DAY></DATE><COMMENT>Preview APIs are now properly handled and cannot be used witout the <CODEROUTINE>--enable-preview</CODEROUTINE> flag.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Records</TITLE>
        <ITEM><ARTICLE><X quality='1'><T>Records Come to Java</T><ST>A first look at how Java 14’s data records will change the way you code</ST><A>https://blogs.oracle.com/javamagazine/records-come-to-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>10</DAY></DATE><COMMENT>A clear explanation of the usage of <CODEROUTINE>record</CODEROUTINE>'s current implementation and the rational for it.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Serializable Records</T><A>https://inside.java/2020/07/20/serializablerecords/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Hegarty</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Buckley</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>7</MONTH><DAY>20</DAY></DATE><COMMENT>The differences when serializing/deserializing a record vs. a standard object.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java 15</TITLE>
      <ITEM><ARTICLE><X><T>Inside Java 15: Fourteen JEPs in five buckets</T><ST>Hidden classes, sealed classes, text blocks, records, and EdDSA: There’s lots of goodness in JDK 15.</ST><A>https://blogs.oracle.com/javamagazine/inside-java-15-fourteen-jeps-in-five-buckets</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alan</FIRSTNAME><LASTNAME>Zeichick</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>8</MONTH><DAY>28</DAY></DATE><COMMENT>The list of new features, previews, and removals.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Diving into Java records: Serialization, marshaling, and bean state validation</T><ST>Existing frameworks and libraries that access instance variables through getters and setters won’t work with records. Here’s what to do.</ST><A>https://blogs.oracle.com/javamagazine/diving-into-java-records-serialization-marshaling-and-bean-state-validation</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Frank</FIRSTNAME><LASTNAME>Kiwy</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>Some technical details of records: how to use annotations on them, how is performed the deserialisation, the fact that most marshaling/unmarshaling libraries will not work, and how to use bean validation.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>