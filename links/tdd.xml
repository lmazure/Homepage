<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Test Driven Development / Behavior Driven Development</TITLE>
<PATH>links/tdd.xml</PATH>
<DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>22</DAY></DATE>
<CONTENT>

TDD:
<X><T>Wikipedia</T><A>http://en.wikipedia.org/wiki/Test-driven_development</A><L>en</L><F>HTML</F></X><BR/>

BDD:
<X><T>Wikipedia</T><A>http://en.wikipedia.org/wiki/Behavior-driven_development</A><L>en</L><F>HTML</F></X><BR/>

<LINE/>

<BLIST><TITLE>Articles</TITLE>
  <ITEM><BLIST><TITLE>Test Driven Development</TITLE>
    <ITEM><ARTICLE><X><T>Evolutionary architecture and emergent design: Test-driven design, Part 1</T><ST>Allowing tests to drive and improve your design</ST><A>http://www.ibm.com/developerworks/java/library/j-eaed2/</A><L>en</L><F>HTML</F></X><AUTHOR>Neal Ford</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>The author tries to convince that writing tests first results into a better design.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Evolutionary architecture and emergent design: Test-driven design, Part 2</T><ST>More on allowing tests to drive and improve your design</ST><A>http://www.ibm.com/developerworks/java/library/j-eaed3/</A><L>en</L><F>HTML</F></X><AUTHOR>Neal Ford</AUTHOR><DATE><YEAR>2009</YEAR><MONTH>4</MONTH><DAY>7</DAY></DATE><COMMENT>The continuation of the previous article.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>An Introduction to Test Driven Development in C#</T><A>http://www.youtube.com/watch?v=f60aIlNhMoE</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>9</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR>Richard Banks</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>1</MONTH><DAY>19</DAY></DATE><COMMENT>A quick introduction to TDD using C# and NUnit.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>J.B. Rainsberger</T><A>http://vimeo.com/37595051</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR>J. B. Rainsberger</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>28</DAY></DATE><COMMENT>Another introduction, this one in Java.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Larry and Jen do Roman Numerals in C++</T><A>http://www.slideshare.net/JonJagger/larry-and-jen-do-roman-numerals-in-c</A><L>en</L><F>HTML</F></X><AUTHOR>Jon Jagger</AUTHOR><AUTHOR>Olve Maudal</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>An example of C++ TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What Really Matters in Test-Driven Development -- It isn't about the tests</T><ST>it's about the feedback.</ST><A>http://visualstudiomagazine.com/articles/2013/08/01/what-really-matters-in-developer-testing.aspx</A><L>en</L><F>HTML</F></X><AUTHOR>Peter Provost</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>28</DAY></DATE><COMMENT>More than writing tests first, the important point is to have a very short code / test loop.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test First</T><A>http://blog.8thlight.com/uncle-bob/2013/09/23/Test-first.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>23</DAY></DATE><COMMENT>Tests should be written first, clean first, maintain first.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>MountainWest RubyConf 2013 Trolls of 2013 by Ryan Davis</T><A>http://www.youtube.com/watch?v=r1JMxJ06I98</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>36</MINUTE><SECOND>38</SECOND></DURATION></X><AUTHOR>Ryan Davis</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>Writing an interpreter in Ruby while using TDD. Ryan Davis finishes with a lightning talk, presenting Flay, a code analysis tool detecting similar code pieces.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Transformation Priority Premise</T><A>http://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>12</MONTH><DAY>19</DAY></DATE><COMMENT>Uncle Bob proposes a prioritized list of transformations (giving higher priority to simpler transformations) to be applied when the code must be changed to get the last added test green. Each transformation results in a more generic code. Uncle Bob claims that, by privileging the simplest transformations, the risk of an impasse (i.e. having to rewrite an important part of the production code in order to get the next test green) is reduced.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Robert C Martin - The Transformation Priority Premise</T><A>http://www.youtube.com/watch?v=B93QezwTQpI</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>42</SECOND></DURATION></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE><COMMENT>A speech with the same content as the previous article.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Ian Cooper: TDD, where did it all go wrong</T><A>http://vimeo.com/68375232</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>37</SECOND></DURATION></X><AUTHOR>Ian Cooper</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH></DATE><COMMENT>Coming back to the initial ideas of Kent Beck with some good advice on how to do TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Right Tests in the Wrong Order</T><A>http://blog.8thlight.com/mike-jansen/2013/07/18/the-right-tests-in-the-wrong-order.html</A><L>en</L><F>HTML</F></X><AUTHOR>Mike Jansen</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>18</DAY></DATE><COMMENT>The order of the tests will have an important impact on the final production code. This article does not help determinating this order. Its main conclusion if that if too much code must be changed for getting the next test green, the developer should back up and consider another approach.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Domain Discontinuity</T><A>http://blog.8thlight.com/uncle-bob/2014/01/27/TheChickenOrTheRoad.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>14</DAY></DATE><COMMENT>Architecture is an up-front decision and is expensive to change after; code design is driven by the tests and is continuously refactored.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When TDD doesn't work.</T><A>http://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>TDD cannot be used for the physical boundary and the layer just before it, this one should be as thin as possible, business logic should be moved elsewhere.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Professionalism and TDD (Reprise)</T><A>http://blog.8thlight.com/uncle-bob/2014/05/02/ProfessionalismAndTDD.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>2</DAY></DATE><COMMENT>TDD may have the same impact, in the future, on the software industry as washing hands had on medicine.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When Should You Think?</T><A>http://blog.8thlight.com/uncle-bob/2014/03/11/when-to-think.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>11</DAY></DATE><COMMENT>When to think: before, during and after coding. An answer to those who claim that TDD results into developers not thinking enough.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test-Driving the Game Loop pt. 1</T><A>http://blog.8thlight.com/eric-smith/2014/08/18/test-driving-the-game-loop-part-1.html</A><L>en</L><F>HTML</F></X><AUTHOR>Eric Smith</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>8</MONTH><DAY>18</DAY></DATE><COMMENT>Applying TDD to the classical game loop. This is typical the case where you can wonder if you are testing too much give the simplicity of the production code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test-Driving the Game Loop pt. 2</T><A>http://blog.8thlight.com/eric-smith/2014/10/14/test-driving-the-game-loop-part-2%20copy.html</A><L>en</L><F>HTML</F></X><AUTHOR>Eric Smith</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>10</MONTH><DAY>14</DAY></DATE><COMMENT>This is the continuation of the previous blog. Code is getting less trivial, tests are making sense.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test Time</T><A>http://blog.cleancoder.com/uncle-bob/2014/09/03/TestTime.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>3</DAY></DATE><COMMENT>Uncle Bob explains that tests must be fast and the design should be such to enable this. (This gets back to DHH who explains that design should not be corrupted for the only purpose of getting fast tests.)</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Thorns around the Gold</T><A>http://blog.cleancoder.com/uncle-bob/2014/11/19/GoingForTheGold.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>19</DAY></DATE><COMMENT>Uncle Bob advices to write first tests for exceptional behaviors, then degenerate behaviors, then ancillary behaviors, before testing the core feature.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Brett L. Schuchert</TITLE>
      <ITEM><BLIST><TITLE>RPN calculator in Java using Eclipse</TITLE>
        <ITEM><ARTICLE><X><T>Getting Started with Tdd in Java using Eclipse</T><A>http://vimeo.com/10569751</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>51</MINUTE><SECOND>47</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>A rather slow but clear introduction to TDD using Java and Eclipse : creating a RPN calculator.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Adding Basic Operators to the RpnCalcualtor</T><A>http://vimeo.com/10570537</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>13</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>Adding add, subtract and factorial to the previous example.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Removing Duplication and the Ocp</T><A>http://vimeo.com/10597511</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>10</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>31</DAY></DATE><COMMENT>Modifying the API of the previously implemented operators.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Extracting to strategy</T><A>http://vimeo.com/10597797</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>31</DAY></DATE><COMMENT>Implementing the Strategy pattern.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Removing Duplication by Refactoring</T><A>http://vimeo.com/10639853</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>Factoring common code into a base class and adding multiply.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Removing Duplication Via TDD using Mockito</T><A>http://vimeo.com/10647496</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>46</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>Using Mockito, a mocking framework.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Introducing an Abstract Factory</T><A>http://vimeo.com/10647851</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>24</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>Explaining how to use dependency injection to be able to mock a class.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Adding a Sum Operator</T><A>http://vimeo.com/10679730</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>22</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>Using what has been done previously to add a sum operator.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Adding a Prime Factors Operator</T><A>http://vimeo.com/10681803</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>46</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>Using human readable (kind of BDD) test naming.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Composing Math Operators and Programming the Calculator</T><A>http://vimeo.com/10685388</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>17</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>An implementation of the composite pattern, but this does not teach new things about writing Unit Tests.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Using FitNesse to Program The Calculator</T><A>http://vimeo.com/10686005</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>13</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>A short demonstration on how to download, install, and write the fixtures for FitNesse.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Shunting Yard Algorithm in C# using Visual Studio and ReSharper</TITLE>
        <ITEM><ARTICLE><X><T>Shunting Yard Algorithm in C#, Part 1</T><A>http://vimeo.com/10941784</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>A demonstration on using TDD in Visual Studio. The pace is quite fast.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Shunting Yard Algorithm in C#, Part 2</T><A>http://vimeo.com/10942447</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>13</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>Implementation of operator precedence.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Shunting Yard Algorithm in C#, Part 3</T><A>http://vimeo.com/10943328</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>12</MINUTE><SECOND>1</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>Implementation of parentheses. The design is dubious and the way he adds division support is even more hacky: he does not add a simple test for this one.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Shunting Yard Algorithm in C#, Part 4</T><A>http://vimeo.com/10944334</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>37</MINUTE><SECOND>23</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>Managing functions.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Removing Duplicate Operator Representation, (part 6 of 4)</T><A>http://vimeo.com/10994492</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>27</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR>Brett L. Schuchert</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>16</DAY></DATE><COMMENT>Defining the list of operators at a single place. His usage of regexp is very dubious.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Is TDD dead?</TITLE>
      <ITEM><X><T>Martin Fowler's notes</T><A>http://martinfowler.com/articles/is-tdd-dead/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><ARTICLE><X><T>Test-induced design damage</T><A>http://david.heinemeierhansson.com/2014/test-induced-design-damage.html</A><L>en</L><F>HTML</F></X><AUTHOR>David Heinemeier Hansson</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>29</DAY></DATE><COMMENT>Changing the design in order to unit test all layers is damaging it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Induced Design Damage?</T><A>http://blog.8thlight.com/uncle-bob/2014/05/01/Design-Damage.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>1</DAY></DATE><COMMENT>An answer to the previous blog: separation of concerns is a good thing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is TDD dead?</T><A>https://www.youtube.com/watch?v=z9quxZsLcfo</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>30</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR>David Heinemeier Hansson</AUTHOR><AUTHOR>Kent Beck</AUTHOR><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>TDD is more or less adequate, depending on the developer, depending on the situation. TDD is just one way to get self-testing code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is TDD dead? [Part II]</T><A>https://www.youtube.com/watch?v=JoTB2mcjU7w</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>35</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR>David Heinemeier Hansson</AUTHOR><AUTHOR>Kent Beck</AUTHOR><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>Is (too much) decoupling bad design? Is bad design due to TDD?</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>First</T><A>http://blog.8thlight.com/uncle-bob/2014/05/19/First.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>19</DAY></DATE><COMMENT>Uncle Bob tries to participate to the "Is TDD dead?" debate. Tests provide some up-to-date documentation, force some decoupling in the design, and give confidence to change the code. They are so important that they must be done first.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is TDD dead? [Part III]</T><A>https://www.youtube.com/watch?v=YNw4baDz6WA</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>28</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR>David Heinemeier Hansson</AUTHOR><AUTHOR>Kent Beck</AUTHOR><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>The tradeoffs of testing:<BR/>- Instant feedback is not possible, how much frequent should be the feedback we need?<BR/>- How accurate/fidelitous should be the tests?<BR/>- Lifespan? For how long will the software be used? With which probability?<BR/>Feedback is not only about knowing if the users are satisfied by the new feature, but also to know if there are some regressions with previously existing features and if the code base is still healthy.<BR/>TDD gave overconfidence to developers, they thought they could deliver quality software without someone else, such as a QA team, looking at it. TDD focused only on the test speed, without looking at what is traded of. Listening to feedback of real users is necessary, believing that the quality is good because all tests are green and the testing code coverage is 100% is an error.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is TDD dead? [Part IV]</T><A>https://www.youtube.com/watch?v=dGtasFJnUxI</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>35</MINUTE><SECOND>17</SECOND></DURATION></X><AUTHOR>David Heinemeier Hansson</AUTHOR><AUTHOR>Kent Beck</AUTHOR><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>27</DAY></DATE><COMMENT>How much test is required? TDD advocates tend to say that tests are more important than the production code, this leads to refactoring being neglected.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is TDD dead? [Part V &amp; VI]</T><A>https://www.youtube.com/watch?v=gWD6REVeKW4</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR>David Heinemeier Hansson</AUTHOR><AUTHOR>Kent Beck</AUTHOR><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>Answering some questions (examples of open-source projects where TDD was successful or a failure, is there a way to write software so TDD would be redundant, TDD and inexperienced developers...) and concluding the debate.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is TDD Dead? Final Thoughts about Teams.</T><A>http://blog.cleancoder.com/uncle-bob/2014/06/17/IsTddDeadFinalThoughts.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>TDD is a team practice, not an individual choice. Uncle Bob predicts that teams, then companies, will choose between TDD and non-TDD, and the first ones will win.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Behavior Driven Development</TITLE>
    <ITEM><ARTICLE><X quality='1'><T>Beyond Test Driven Development: Behaviour Driven</T><A>http://www.youtube.com/watch?v=XOkHh8zF33o</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>47</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR>Dave Astels</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>3</MONTH><DAY>17</DAY></DATE><COMMENT>An introduction to BDD and RSpec.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>mvcConf 2 - Brandon Satrom: BDD in ASP.NET MVC using SpecFlow, WatiN and WatiN Test Helpers</T><A>http://channel9.msdn.com/Series/mvcConf/mvcConf-2-Brandom-Satrom-BDD-in-ASPNET-MVC-using-SpecFlow-WatiN-and-WatiN-Test-Helpers</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>55</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR>Brandon Satrom</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH></DATE><COMMENT>BDD in C#'s MVC.Net using SpecFlow and WatiN.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>BDD all the way down - Enrico Campidoglio</T><A>https://www.youtube.com/watch?v=zMX588nshao</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>40</SECOND></DURATION></X><AUTHOR>Enrico Campidoglio</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>2</MONTH><DAY>19</DAY></DATE><COMMENT>BDD in C# using SpecFlow, MSpec and AutoFixture.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
</BLIST>

</CONTENT>
</PAGE>
