<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Test-Driven Development</TITLE>
<PATH>links/tdd.xml</PATH>
<DATE><YEAR>2021</YEAR><MONTH>5</MONTH><DAY>7</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><X><T>Wikipedia</T><A>https://en.wikipedia.org/wiki/Test-driven_development</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>The Three Laws of TDD.</T><A>http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>10</MONTH><DAY>7</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> defines the TDD process and explains its big advantages.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>An Introduction to Test Driven Development in C#</T><A>https://www.youtube.com/watch?v=f60aIlNhMoE</A><L>en</L><F>MP4</F><DURATION><MINUTE>9</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Banks</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>1</MONTH><DAY>19</DAY></DATE><COMMENT>A quick introduction to TDD using C# and NUnit.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="zombie"><T>Evolutionary architecture and emergent design: Test-driven design, Part 1</T><ST>Allowing tests to drive and improve your design</ST><A>https://www.ibm.com/developerworks/java/library/j-eaed2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>The author tries to convince that writing tests first results into a better design.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-eaed2/"><X status="zombie"><T>Evolutionary architecture and emergent design: Test-driven design, Part 2</T><ST>More on allowing tests to drive and improve your design</ST><A>https://www.ibm.com/developerworks/java/library/j-eaed3/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>4</MONTH><DAY>7</DAY></DATE><COMMENT>The continuation of the previous article.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Transformation Priority Premise</T><A>https://blog.cleancoder.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>12</MONTH><DAY>19</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> proposes a prioritized list of transformations (giving higher priority to simpler transformations) to be applied when the code must be changed to get the last added test green. Each transformation results in a more generic code. He claims that, by privileging the simplest transformations, the risk of an impasse (i.e. having to rewrite an important part of the production code in order to get the next test green) is reduced.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://blog.cleancoder.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html"><X quality="1"><T>Robert C Martin - The Transformation Priority Premise</T><A>https://www.youtube.com/watch?v=B93QezwTQpI</A><L>en</L><F>MP4</F><DURATION><MINUTE>53</MINUTE><SECOND>42</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>5</DAY></DATE></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE><COMMENT>A speech with the same content as the previous article.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="1"><T>J.B. Rainsberger</T><A>https://vimeo.com/37595051</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>J.</FIRSTNAME><MIDDLENAME>B.</MIDDLENAME><LASTNAME>Rainsberger</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>28</DAY></DATE><COMMENT>Another introduction, this one in Java.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>MountainWest RubyConf 2013 Trolls of 2013 by Ryan Davis</T><A>https://www.youtube.com/watch?v=r1JMxJ06I98</A><L>en</L><F>MP4</F><DURATION><MINUTE>36</MINUTE><SECOND>38</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>29</DAY></DATE></X><AUTHOR><FIRSTNAME>Ryan</FIRSTNAME><LASTNAME>Davis</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>Writing an interpreter in Ruby while using TDD. <AUTHOR><FIRSTNAME>Ryan</FIRSTNAME><LASTNAME>Davis</LASTNAME></AUTHOR> finishes with a lightning talk, presenting Flay, a code analysis tool detecting similar code pieces.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Straw Man TDD</T><A>http://codemanship.co.uk/parlezuml/blog/?postid=1170</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Gorman</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>17</DAY></DATE><COMMENT>Refuting some arguments about TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="1"><T>Ian Cooper: TDD, where did it all go wrong</T><A>https://vimeo.com/68375232</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>37</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ian</FIRSTNAME><LASTNAME>Cooper</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH></DATE><COMMENT>Coming back to the initial ideas of <AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR> with some good advice on how to do TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Larry and Jen do Roman Numerals in C++</T><A>https://www.slideshare.net/JonJagger/larry-and-jen-do-roman-numerals-in-c</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jon</FIRSTNAME><LASTNAME>Jagger</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Olve</FIRSTNAME><LASTNAME>Maudal</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>An example of C++ TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Right Tests in the Wrong Order</T><A>https://8thlight.com/blog/mike-jansen/2013/07/18/the-right-tests-in-the-wrong-order.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Jansen</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>18</DAY></DATE><COMMENT>The order of the tests will have an important impact on the final production code. This article does not help determining this order. Its main conclusion if that if too much code must be changed for getting the next test green, the developer should back up and consider another approach.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What Really Matters in Test-Driven Development</T><ST>It isn't about the tests -- it's about the feedback.</ST><A>https://visualstudiomagazine.com/articles/2013/08/01/what-really-matters-in-developer-testing.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Provost</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>28</DAY></DATE><COMMENT>More than writing tests first, the important point is to have a very short code / test loop.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test First</T><A>https://blog.cleancoder.com/uncle-bob/2013/09/23/Test-first.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>23</DAY></DATE><COMMENT>Tests should be written first, clean first, maintain first.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Domain Discontinuity</T><A>https://blog.cleancoder.com/uncle-bob/2014/01/27/TheChickenOrTheRoad.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>14</DAY></DATE><COMMENT>Architecture is an up-front decision and is expensive to change after; code design is driven by the tests and is continuously refactored.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When Should You Think?</T><A>https://blog.cleancoder.com/uncle-bob/2014/03/11/when-to-think.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>11</DAY></DATE><COMMENT>When to think: before, during and after coding. An answer to those who claim that TDD results into developers not thinking enough.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When TDD doesn't work.</T><A>https://blog.cleancoder.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>TDD cannot be used for the physical boundary and the layer just before it, this one should be as thin as possible, business logic should be moved elsewhere.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Professionalism and TDD (Reprise)</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/02/ProfessionalismAndTDD.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>2</DAY></DATE><COMMENT>TDD may have the same impact, in the future, on the software industry as washing hands had on medicine.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test-Driving the Game Loop pt. 1</T><A>https://8thlight.com/blog/eric-smith/2014/08/18/test-driving-the-game-loop-part-1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Smith</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>8</MONTH><DAY>18</DAY></DATE><COMMENT>Applying TDD to the classical game loop. This is typical the case where you can wonder if you are testing too much give the simplicity of the production code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://8thlight.com/blog/eric-smith/2014/08/18/test-driving-the-game-loop-part-1.html"><X><T>Test-Driving the Game Loop pt. 2</T><A>https://8thlight.com/blog/eric-smith/2014/10/14/test-driving-the-game-loop-part-2%20copy.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Smith</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>10</MONTH><DAY>14</DAY></DATE><COMMENT>This is the continuation of the previous blog. Code is getting less trivial, tests are making sense.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test Time</T><A>https://blog.cleancoder.com/uncle-bob/2014/09/03/TestTime.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>3</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> explains that tests must be fast and the design should be such to enable this. (This gets back to DHH who explains that design should not be corrupted for the only purpose of getting fast tests.)</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Thorns around the Gold</T><A>https://blog.cleancoder.com/uncle-bob/2014/11/19/GoingForTheGold.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>19</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> advices to write first tests for exceptional behaviours, then degenerate behaviours, then ancillary behaviours, before testing the core feature.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Cycles of TDD</T><A>https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>12</MONTH><DAY>17</DAY></DATE><COMMENT>The coding cycle levels: the three laws of TDD for the seconds cycle, Red/Green/Refactor for the minutes cycle, the specific/generic transform for the 10 minutes cycles, and the Clean Architecture for the hours cycle.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test-Driven Development is Stupid</T><A>https://geometrian.com/programming/tutorials/testing/test-first.php</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ian</FIRSTNAME><LASTNAME>Mallett</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>21</DAY></DATE><COMMENT>The guy writes against TDD, he gets some buzz and a lot of hate mails, then he understands he does not know what is TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The MODE-B Imperative</T><A>https://blog.cleancoder.com/uncle-bob/2015/02/21/ModeBImperative.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>21</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> wrote a PDP8 emulator and explains the difference between the very long code / compile / test loop of that time, which required carefulness and deliberateness, and the same loop which must be keep very short today.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>An External Replication on the Effects of Test-driven Development Using a Multi-site Blind Analysis Approach</T><A>http://people.brunel.ac.uk/~csstmms/FucciEtAl_ESEM2016.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Davide</FIRSTNAME><LASTNAME>Fucci</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Giuseppe</FIRSTNAME><LASTNAME>Scanniello</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Simone</FIRSTNAME><LASTNAME>Romano</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Shepperd</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Boyce</FIRSTNAME><LASTNAME>Sigweni</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Fernando</FIRSTNAME><LASTNAME>Uyaguari</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Burak</FIRSTNAME><LASTNAME>Turhan</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Natalia</FIRSTNAME><LASTNAME>Juristo</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Markku</FIRSTNAME><LASTNAME>Oivo</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH></DATE><COMMENT>A inconclusive study on the analysis of TDD. But the study conditions (the implementation of a very small piece of software) were probably not adequate to demonstrate something.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="http://people.brunel.ac.uk/~csstmms/FucciEtAl_ESEM2016.pdf"><X><T>TDD Doesn't Work</T><A>https://blog.cleancoder.com/uncle-bob/2016/11/10/TDD-Doesnt-work.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>10</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> analyzes the previous study.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Dijkstra's Algorithm</T><A>https://blog.cleancoder.com/uncle-bob/2016/10/26/DijkstrasAlg.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>An example of using TDD. The exercise is interesting: the whole algorithm is done in a single final step…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>TDD Lesson - Terrain Generation</T><A>https://blog.cleancoder.com/uncle-bob/2017/01/09/DiamondSquare.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>Writing unit tests spying the actions of the production code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Symmetry Breaking</T><A>https://blog.cleancoder.com/uncle-bob/2017/03/07/SymmetryBreaking.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>The analogy between TDD and accounting, and the difference due to the fact that, contrarily to credit / debit, production code / test code cannot be written in any order, test must be written first.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What I’m talking about when I talk about TDD</T><A>https://medium.com/@ramtop/what-im-talking-about-when-i-talk-about-tdd-546a383468be</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Uberto</FIRSTNAME><LASTNAME>Barbini</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>25</DAY></DATE><COMMENT>TDD allows the author to test different designs without having to keep in mind all the details during that time.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Excuses</T><A>https://blog.cleancoder.com/uncle-bob/2017/12/18/Excuses.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>18</DAY></DATE><COMMENT>There is nothing new in this blog which describes once again the analogy between TDD and accounting, and tries to use it to kill the anti-TDD arguments.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Five Underplayed Premises Of TDD</T><A>https://www.geepawhill.org/2018/01/18/five-underplayed-premises-of-tdd-2/</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>10</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Hill</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>17</DAY></DATE><COMMENT>The title says it all, but these basis ideas are applicable to software development, they are not specific to TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://www.geepawhill.org/2018/01/18/five-underplayed-premises-of-tdd-2/"><X><T>The Citizenship Argument</T><A>https://blog.cleancoder.com/uncle-bob/2018/01/18/TheCitizenshipArgument.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>Some comments about the previous video, but this is the usual rant about TDD and good citizenship.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When Test Driven Development Goes Wrong • Dave Farley • GOTO 2021</T><A>https://www.youtube.com/watch?v=-4Ybn0Cz2oU</A><L>en</L><F>MP4</F><DURATION><MINUTE>21</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Farley</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>5</MONTH><DAY>7</DAY></DATE><COMMENT>Some examples of tests which have been very badly driven, because the code is badly designed.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Brett L. Schuchert</TITLE>
      <ITEM><BLIST><TITLE>RPN calculator in Java using Eclipse</TITLE>
        <ITEM><ARTICLE><X><T>Getting Started with Tdd in Java using Eclipse</T><A>https://vimeo.com/10569751</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>51</MINUTE><SECOND>47</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>A rather slow but clear introduction to TDD using Java and Eclipse: creating a RPN calculator.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10569751"><X><T>Adding Basic Operators to the RpnCalcualtor</T><A>https://vimeo.com/10570537</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>13</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>Adding add, subtract and factorial to the previous example.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10570537"><X><T>Removing Duplication and the Ocp</T><A>https://vimeo.com/10597511</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>10</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>31</DAY></DATE><COMMENT>Modifying the API of the previously implemented operators.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10597511"><X><T>Extracting to strategy</T><A>https://vimeo.com/10597797</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>31</DAY></DATE><COMMENT>Implementing the Strategy pattern.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10597797"><X><T>Removing Duplication by Refactoring</T><A>https://vimeo.com/10639853</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>Factoring common code into a base class and adding multiply.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10639853"><X><T>Removing Duplication Via TDD using Mockito</T><A>https://vimeo.com/10647496</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>46</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>Using Mockito, a mocking framework.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10647496"><X><T>Introducing an Abstract Factory</T><A>https://vimeo.com/10647851</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>24</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>Explaining how to use dependency injection to be able to mock a class.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10647851"><X><T>Adding a Sum Operator</T><A>https://vimeo.com/10679730</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>8</MINUTE><SECOND>22</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>Using what has been done previously to add a sum operator.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10679730"><X><T>Adding a Prime Factors Operator</T><A>https://vimeo.com/10681803</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>46</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>Using human readable (kind of BDD) test naming.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10681803"><X><T>Composing Math Operators and Programming the Calculator</T><A>https://vimeo.com/10685388</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>17</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>An implementation of the composite pattern, but this does not teach new things about writing Unit Tests.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10685388"><X><T>Using FitNesse to Program The Calculator</T><A>https://vimeo.com/10686005</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>13</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>A short demonstration on how to download, install, and write the fixtures for FitNesse.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Shunting Yard Algorithm in C# using Visual Studio and ReSharper</TITLE>
        <ITEM><ARTICLE><X><T>Shunting Yard Algorithm in C#, Part 1</T><A>https://vimeo.com/10941784</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>18</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>A demonstration on using TDD in Visual Studio. The pace is quite fast.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10941784"><X><T>Shunting Yard Algorithm in C#, Part 2</T><A>https://vimeo.com/10942447</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>13</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>Implementation of operator precedence.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10942447"><X><T>Shunting Yard Algorithm in C#, Part 3</T><A>https://vimeo.com/10943328</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>12</MINUTE><SECOND>1</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>Implementation of parentheses. The design is dubious and the way he adds division support is even more hacky: he does not add a simple test for this one.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://vimeo.com/10943328"><X><T>Shunting Yard Algorithm in C#, Part 4</T><A>https://vimeo.com/10944334</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>37</MINUTE><SECOND>23</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>Managing functions.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Removing Duplicate Operator Representation, (part 6 of 4)</T><A>https://vimeo.com/10994492</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>27</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>16</DAY></DATE><COMMENT>Defining the list of operators at a single place. His usage of regexp is very dubious.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Is TDD dead? (<X><T>Martin Fowler's notes</T><A>https://martinfowler.com/articles/is-tdd-dead/</A><L>en</L><F>HTML</F></X>)</TITLE>
      <ITEM><ARTICLE><X><T>TDD is dead. Long live testing.</T><A>https://dhh.dk/2014/tdd-is-dead-long-live-testing.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE><COMMENT>TDD has been useful by making developer aware of the need for automated regression testing, but focusing only on fast unit tests appears now not as the best way to test software and make the design overly complex.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test-induced design damage</T><A>https://dhh.dk/2014/test-induced-design-damage.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>29</DAY></DATE><COMMENT>Changing the design in order to unit test all layers is damaging it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://dhh.dk/2014/test-induced-design-damage.html"><X><T>Test Induced Design Damage?</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/01/Design-Damage.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>1</DAY></DATE><COMMENT>An answer to the previous blog: separation of concerns is a good thing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>TW Hangouts   |   Is TDD dead?</T><A>https://www.youtube.com/watch?v=z9quxZsLcfo</A><L>en</L><F>MP4</F><DURATION><MINUTE>30</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>TDD is more or less adequate, depending on the developer, depending on the situation. TDD is just one way to get self-testing code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=z9quxZsLcfo"><X><T>TW Hangouts   |   Is TDD dead? [Part II]</T><A>https://www.youtube.com/watch?v=JoTB2mcjU7w</A><L>en</L><F>MP4</F><DURATION><MINUTE>35</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>Is (too much) decoupling bad design? Is bad design due to TDD?</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=JoTB2mcjU7w"><X><T>TW Hangouts   |   Is TDD dead? [Part III]</T><A>https://www.youtube.com/watch?v=YNw4baDz6WA</A><L>en</L><F>MP4</F><DURATION><MINUTE>28</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>The tradeoffs of testing:<BR/>- Instant feedback is not possible, how much frequent should be the feedback we need?<BR/>- How accurate/fidelitous should be the tests?<BR/>- Lifespan? For how long will the software be used? With which probability?<BR/>Feedback is not only about knowing if the users are satisfied by the new feature, but also to know if there are some regressions with previously existing features and if the code base is still healthy.<BR/>TDD gave overconfidence to developers, they thought they could deliver quality software without someone else, such as a QA team, looking at it. TDD focused only on the test speed, without looking at what is traded of. Listening to feedback of real users is necessary, believing that the quality is good because all tests are green and the testing code coverage is 100% is an error.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=YNw4baDz6WA"><X><T>TW Hangouts   |   Is TDD dead? [Part IV]</T><A>https://www.youtube.com/watch?v=dGtasFJnUxI</A><L>en</L><F>MP4</F><DURATION><MINUTE>35</MINUTE><SECOND>17</SECOND></DURATION></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>27</DAY></DATE><COMMENT>How much test is required? TDD advocates tend to say that tests are more important than the production code, this leads to refactoring being neglected.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=dGtasFJnUxI"><X><T>TW Hangouts   |   Is TDD dead? [Part V &amp; VI]</T><A>https://www.youtube.com/watch?v=gWD6REVeKW4</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>Answering some questions (examples of open-source projects where TDD was successful or a failure, is there a way to write software so TDD would be redundant, TDD and inexperienced developers…) and concluding the debate.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>First</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/19/First.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>19</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> tries to participate to the "Is TDD dead?" debate. Tests provide some up-to-date documentation, force some decoupling in the design, and give confidence to change the code. They are so important that they must be done first.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Is TDD Dead? Final Thoughts about Teams.</T><A>https://blog.cleancoder.com/uncle-bob/2014/06/17/IsTddDeadFinalThoughts.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>TDD is a team practice, not an individual choice. <AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> predicts that teams, then companies, will choose between TDD and non-TDD, and the first ones will win.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Pecha Kucha @ OOP 2015 "Is TDD dead?" von Uncle Bob</T><A>https://www.youtube.com/watch?v=9NANcPTbDBQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>28</SECOND></DURATION><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>16</DAY></DATE></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>30</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> is still upset to not having been invited to the discussion.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>TDD Harms Architecture</T><A>https://blog.cleancoder.com/uncle-bob/2017/03/03/TDD-Harms-Architecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>3</DAY></DATE><COMMENT>A more constructive answer to the fact that TDD generates bad design: the design is defined by the developer, not by TDD.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Discovery Testing the Game of Life</TITLE>
      <ITEM><ARTICLE><X><T>Discovery Testing the Game of Life (Part 1)</T><A>https://www.youtube.com/watch?v=aeX5OXO-w30</A><L>en</L><F>MP4</F><DURATION><MINUTE>40</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Searls</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>9</MONTH><DAY>9</DAY></DATE><COMMENT>A high level presentation of the differences between Detroit-school TDD and London-school TDD.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=aeX5OXO-w30"><X><T>Discovery Testing the Game of Life (Part 2)</T><A>https://www.youtube.com/watch?v=jGs55tQS7ww</A><L>en</L><F>MP4</F><DURATION><MINUTE>29</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Searls</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>9</MONTH><DAY>9</DAY></DATE><COMMENT>Coding the high level of the application.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=jGs55tQS7ww"><X quality="-1"><T>Discovery Testing the Game of Life (Part 3)</T><A>https://www.youtube.com/watch?v=iL2l_pbOlug</A><L>en</L><F>MP4</F><DURATION><MINUTE>42</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Searls</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>The continuation of the development is getting very painful.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=iL2l_pbOlug"><X quality="-1"><T>Discovery Testing the Game of Life (Part 4)</T><A>https://www.youtube.com/watch?v=Z7h696C0Du8</A><L>en</L><F>MP4</F><DURATION><MINUTE>42</MINUTE><SECOND>22</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Justin</FIRSTNAME><LASTNAME>Searls</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>… and we get an application which is far from being finished, is overly complex (a bunch of small simple classes), and much slower and memory consumming than necessary. A pragmatic implementation of the game of life would be simpler, faster and use less memory. This series is just the proof that TDD can result in a stupid implementation.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>