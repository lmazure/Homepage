<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Automated testing</TITLE>
<PATH>links/autotest.xml</PATH>
<DATE><YEAR>2021</YEAR><MONTH>1</MONTH><DAY>19</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><BLIST><TITLE>Unit tests</TITLE>
      <ITEM><X><T>The Art Of Unit Testing</T><A>https://www.artofunittesting.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Wikipedia list</T><A>https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>JUnit</T><A>https://junit.org</A><L>en</L><F>HTML</F></X>:
          <X><T>JUNit 4 FAQ</T><A>https://junit.org/junit4/faq.html</A><L>en</L><F>HTML</F></X>,
          <X status='obsolete'><T>GuiceBerry</T><A>https://github.com/zorzella/guiceberry</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>TestNG</T><A>https://testng.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Agitar</T><A>http://www.agitar.com</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>NUnit</T><A>https://nunit.org/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Fixie</T><A>http://fixie.github.io</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>NCrunch</T><A>https://www.ncrunch.net</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>QUnit</T><A>https://qunitjs.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Mocha</T><A>https://mochajs.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Sinon</T><A>https://sinonjs.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Jest</T><A>https://jestjs.io</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status='obsolete'><T>Google JS Test</T><A>https://code.google.com/p/google-js-test/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status='obsolete'><T>js-test-driver</T><A>https://code.google.com/p/js-test-driver/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>SQL</TITLE>
        <ITEM><X status='obsolete'><T>T.S.T.</T><A>https://archive.codeplex.com/?p=tst</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><X><T>personal notes</T><A>../notes/unittest.html</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mocking</TITLE>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>Moq</T><A>https://github.com/moq</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>Mockito</T><A>https://site.mockito.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mutation testing</TITLE>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X status='obsolete'><T>Jester</T><A>http://jester.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>PIT</T><A>http://pitest.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>BDD</TITLE>
      <ITEM><X status='obsolete'><T>Fit</T><A>http://fit.c2.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>FitNesse</T><A>http://fitnesse.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Cucumber</T><A>https://cucumber.io</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Concordion</T><A>https://concordion.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Gauge</T><A>https://gauge.org/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Serenity</T><A>http://www.thucydides.info</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Robot Framework</T><A>https://robotframework.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>SpecFlow</T><A>https://specflow.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>JBehave</T><A>https://jbehave.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>JGiven</T><A>https://jgiven.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Ruby</TITLE>
        <ITEM><X><T>RSpec</T><A>https://rspec.info</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>Jasmine</T><A>https://jasmine.github.io</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Chai</T><A>https://www.chaijs.com/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Frameworks</TITLE>
      <ITEM><X><T>Software Testing Automation Framework (STAF)</T><A>http://staf.sourceforge.net</A><L>en</L><F>HTML</F></X>: driving tests executed on remote machines</ITEM>
      <ITEM><X><T>Software Automation Framework Support (SAFS)</T><A>http://safsdev.sourceforge.net</A><L>en</L><F>HTML</F></X>: keyword driven tests</ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Fuzz testing</TITLE>
      <ITEM><X><T>University of Wisconsin</T><A>http://pages.cs.wisc.edu/~bart/fuzz/fuzz.html</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>GUI tests</TITLE>
        <ITEM><X><T>Ranorex</T><A>https://www.ranorex.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>X11/Motif</TITLE>
        <ITEM><X><T>Xnee</T><A>https://xnee.wordpress.com/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Qt</TITLE>
        <ITEM><X><T>squish</T><A>https://www.froglogic.com/pg?id=Products&amp;category=squish</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>Marathon</T><A>https://marathontesting.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Abbot</T><A>http://abbot.sourceforge.net/doc/overview.shtml</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Jubula</T><A>https://www.eclipse.org/jubula/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>SWTBot</T><A>https://www.eclipse.org/swtbot/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>RedDeer</T><A>https://github.com/eclipse/reddeer</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Web</TITLE>
        <ITEM><X><T>Watir</T><A>http://watir.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Test &amp; Feedback</T><A>https://marketplace.visualstudio.com/items?itemName=ms.vss-exploratorytesting-web</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><CLIST><TITLE><X><T>Selenium</T><A>https://selenium.dev/</A><L>en</L><F>HTML</F></X></TITLE>
          <ITEM><X><T>Elemental Selenium</T><A>https://elementalselenium.com</A><L>en</L><F>HTML</F></X></ITEM>
        </CLIST></ITEM>
        <ITEM><X><T>Protractor</T><A>https://www.protractortest.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Cypress</T><A>https://www.cypress.io</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Taiko</T><A>https://taiko.dev/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Katalon</T><A>https://www.katalon.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Nightwatch.js</T><A>https://nightwatchjs.org/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>TestCaf√©</T><A>https://devexpress.github.io/testcafe/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Mobile</TITLE>
        <ITEM><X><T>Appium</T><A>http://appium.io/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Detox</T><A>https://github.com/wix/Detox</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Comparison tests</TITLE>
      <ITEM><CLIST><TITLE>Scientist</TITLE>
        <ITEM><X><T>Ruby</T><A>https://github.com/github/scientist</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>.Net</T><A>https://github.com/github/Scientist.net</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Java</T><A>https://github.com/rawls238/Scientist4J</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>PHP</T><A>https://github.com/daylerees/scientist</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Service testing</TITLE>
      <ITEM><X><T>SoapUI</T><A>https://www.soapui.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>REST Assured</T><A>https://rest-assured.io/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Postman</T><A>https://www.getpostman.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Load tests</TITLE>
      <ITEM><X><T>JMeter</T><A>https://jmeter.apache.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>The Grinder</T><A>http://grinder.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Gatling</T><A>https://gatling.io</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Web application tests</TITLE>
      <ITEM><X><T>Sauce Labs</T><A>https://saucelabs.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>BrowserStack</T><A>https://www.browserstack.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Cross Browser Testing</T><A>https://crossbrowsertesting.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test coverage</TITLE>
      <ITEM><BLIST><TITLE>C/C++</TITLE>
        <ITEM><X><T>CTC++</T><A>http://www.testwell.fi/ctcdesc.html</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>EMMA</T><A>http://emma.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Cobertura</T><A>http://cobertura.github.io/cobertura/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>JaCoCo</T><A>https://www.jacoco.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>Istanbul</T><A>https://istanbul.js.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Vendors</TITLE>
      <ITEM><X><T>SmartBear</T><A>https://smartbear.com/</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>Test Automation Frameworks</T><A>http://safsdev.sourceforge.net/FRAMESDataDrivenTestAutomationFrameworks.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Carl</FIRSTNAME><LASTNAME>Nagle</LASTNAME></AUTHOR><COMMENT>A presentation of keyword driven automation and an architecture of a framework for such testing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When Should a Test Be Automated?</T><A>https://www.stickyminds.com/sites/default/files/article/file/2014/When%20Should%20a%20Test%20Be%20Automated.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Marick</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>Some ideas about the factors to be taken into account to decide for automated tests vs. manual tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Seven Steps to Test Automation Success</T><A>http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.471.9363&amp;rep=rep1&amp;type=pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Bret</FIRSTNAME><LASTNAME>Pettichord</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>An overview of test automation with some very good practical comments.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='zombie'><T>Diagnosing Java code: Unit tests and automated code analysis working together</T><ST>Your tests can help your tools to analyze your code</ST><A>https://www.ibm.com/developerworks/java/library/j-diag1015/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>Unit tests and code analysis complete each other, but I am not sure the technologies are mature enough today to have an interesting return on investment when applied.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Does my button look big in this? Building testable AJAX...</T><A>https://www.youtube.com/watch?v=SziACN56nxQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>50</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Adam</FIRSTNAME><LASTNAME>Connors</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Joe</FIRSTNAME><LASTNAME>Walnes</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>An application split into MVC components is easier to test automatically (the View may still be manually tested).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Integration Tests Are a Scam</T><A>https://www.infoq.com/presentations/integration-tests-scam/</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>32</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR><FIRSTNAME>J.</FIRSTNAME><MIDDLENAME>B.</MIDDLENAME><LASTNAME>Rainsberger</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>8</MONTH><DAY>24</DAY></DATE><COMMENT>How to properly do integration testing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Cost of Testing</T><A>https://testing.googleblog.com/2009/10/cost-of-testing.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mi≈°ko</FIRSTNAME><LASTNAME>Hevery</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>2</DAY></DATE><COMMENT>A personal evaluation of the cost of writing unit tests and their benefits.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>YUI Theater ‚Äî Ron Adams: "Automated Integration Testing with YUI Test, Selenium and Hudson"</T><A>https://yuiblog.com/blog/2009/11/05/video-adams-yuiconf2009/</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>46</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ron</FIRSTNAME><LASTNAME>Adams</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>11</MONTH><DAY>5</DAY></DATE><COMMENT>A presentation of a TDD environment: unit test framework (YUITest) + test driver (Selenium) + continuous integration (Hudson).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>John Resig: Testing, Performance Analysis, and jQuery 1.4</T><A>https://www.youtube.com/watch?v=72wh5PnEf1k</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>13</MINUTE><SECOND>33</SECOND></DURATION><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>20</DAY></DATE></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Resig</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>12</MONTH><DAY>11</DAY></DATE><COMMENT>A list of some JavaScript unit tests and performance tools, some JQuery news (performance improvements, event bubbling‚Ä¶) and some comment on using HTML 5 on Internet Explorer.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test your app from right to left</T><A>https://testing.googleblog.com/2010/11/test-your-app-from-right-to-left.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Elbaum</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>11</MONTH><DAY>3</DAY></DATE><COMMENT>Google releases bidichecker, an open source verifying bidirectional text.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>ContractTest</T><A>https://martinfowler.com/bliki/ContractTest.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>1</MONTH><DAY>12</DAY></DATE><COMMENT>A contract test verifies that a test double is still up-to-date with the real service it is simulating.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why Automated Testing for Web Apps?</T><A>https://www.scribd.com/document/62476258/javamagazine2011Premiere-dl</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Nilson</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH></DATE><COMMENT>A list of tools, very quickly described, for unit tests, test automation, and continuous integration of Web applications.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Testing like the TSA</T><A>https://signalvnoise.com/posts/3159-testing-like-the-tsa</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>11</DAY></DATE><COMMENT>Some pragmatic advice on writing tests, rather than blindly applying TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE pred='https://signalvnoise.com/posts/3159-testing-like-the-tsa'><X><T>Testing Like the TSA</T><A>https://blog.cleancoder.com/uncle-bob/2017/03/06/TestingLikeTheTSA.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>A (late) answer to the previous blog entry.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>No more flaky tests on the Go team</T><A>https://www.thoughtworks.com/insights/blog/no-more-flaky-tests-go-team</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pavan</FIRSTNAME><LASTNAME>Sudarshan</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>9</MONTH><DAY>25</DAY></DATE><COMMENT>How to fix a project where people got used to have flaky tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Creating Maintainable Automated Acceptance Test Suites</T><A>https://www.youtube.com/watch?v=X9ap-zH0Gkc</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>5</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE></X><AUTHOR><FIRSTNAME>Jez</FIRSTNAME><LASTNAME>Humble</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Badri</FIRSTNAME><LASTNAME>Janakiraman</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>3</MONTH><DAY>1</DAY></DATE><COMMENT>(<X><T>slides</T><A>https://www.slideshare.net/jezhumble/creating-maintainable-automated-acceptance-tests</A><L>en</L><F>HTML</F></X>) A lot of advice based on fives principles: treat acceptance tests like production code, always interact with the SUT like a user would, continuously curate your user journeys, collective ownership of acceptance tests, acceptance tests own their data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Rails Conf 2013 The Magic Tricks of Testing by Sandi Metz</T><A>https://www.youtube.com/watch?v=URSWYvyc42M</A><L>en</L><F>MP4</F><DURATION><MINUTE>32</MINUTE><SECOND>22</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>21</DAY></DATE></X><AUTHOR><FIRSTNAME>Sandi</FIRSTNAME><LASTNAME>Metz</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>An effective simple explanation of the unit tests to be written and how to write them, based on query vs. command and incoming vs. internal vs. outgoing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Your test suite is trying to tell you something</T><A>https://blog.jgc.org/2013/07/your-test-suite-is-trying-to-tell-you.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Graham-Cumming</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>3</DAY></DATE><COMMENT>An example of a flaky test which is in fact a real production bug.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>PageObject</T><A>https://martinfowler.com/bliki/PageObject.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>A description of the design pattern used to hide the HTML details and present a semantic API to the test script.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Slow database test fallacy</T><A>https://dhh.dk/2014/slow-database-test-fallacy.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>DHH debunks the fact that unit tests should not access the database because this would slow down too much their execution.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>SelfTestingCode</T><A>https://martinfowler.com/bliki/SelfTestingCode.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>1</DAY></DATE><COMMENT>The advantages of having a test suite able to detect the most serious bugs.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Goto Fail, Heartbleed, and Unit Testing Culture</T><A>https://www.martinfowler.com/articles/testing-culture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Bland</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>3</DAY></DATE><COMMENT>After trying to convince the reader of the benefits of Unit Testing with demonstrating how the Goto Fail and Heartbleed bugs could have been avoided, Mike Bland explains how the Unit Test culture has been introduced at Google and gives advice how to do the same in other companies. This is a pity that this article is much too long, the same message could have been expressed in a much shorter way.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>BDDon‚Äôt</T><ST>The practice and the tools</ST><A>http://thoughtworks.github.io/p2/issue12/bdd-dont/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Dishman</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>12</MONTH></DATE><COMMENT>The author advises against using BDD automated tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Should tests be ordered or not?</T><A>https://blog.frankel.ch/should-tests-be-ordered-or-not/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicolas</FIRSTNAME><LASTNAME>Fr√§nkel</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH><DAY>25</DAY></DATE><COMMENT>The author claims that tests can be ordered, but some arguments are biased (e.g. of course integration tests must be run after unit tests).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Testing Experimental Code in Production with Scientist.NET</T><ST>A .NET port of the Ruby library allows for experimental testing of code that's gone to production.</ST><A>https://visualstudiomagazine.com/articles/2016/11/01/testing-experimental-code.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>30</DAY></DATE><COMMENT>A short presentation of Scientist, a library to compare the output of two different implementations.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Myths about Unit Tests</T><A>https://8thlight.com/blog/fabien-townsend/2017/09/19/myths-about-unit-tests.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Fabien</FIRSTNAME><LASTNAME>Townsend</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>Some obvious comments about unit testing from a newby.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test Contra-variance</T><A>https://blog.cleancoder.com/uncle-bob/2017/10/03/TestContravariance.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>3</DAY></DATE><COMMENT>A rather over-simplified description of the decoupling between the tests and the production code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>‚ÄúUnit‚Äù Tests?</T><A>https://www.facebook.com/notes/kent-beck/unit-tests/1726369154062608/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>6</DAY></DATE><COMMENT>The boundary between unit and integration tests is fuzzy.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What to test and not to test</T><A>https://blog.ploeh.dk/2018/11/12/what-to-test-and-not-to-test/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Seemann</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH><DAY>12</DAY></DATE><COMMENT>The ideas presented here are mostly common sense.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Programmer Test Principles</T><A>https://medium.com/@kentbeck_7670/programmer-test-principles-d01c064d7934</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>A list of principles to be considered for automated developer tests, their relative importance depends on the context.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Test Desiderata</TITLE>
      <ITEM><ARTICLE><X><T>Test Desiderata 1/12 Behavior</T><A>https://www.youtube.com/watch?v=5LOdKDqdWYU</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>40</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>14</DAY></DATE><COMMENT>Tests should be sensitive to the behavior of the code being tested.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 2/12 Tests Should be Structure-Insensitive</T><A>https://www.youtube.com/watch?v=bvRRbWbQwDU</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>21</DAY></DATE><COMMENT>Tests should be insensitive to changes in the structure of the tested code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 3/12  Readable</T><A>https://www.youtube.com/watch?v=bDaFPACTjj8</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>Tests should read like a story.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 4/12 Tests Should be Easy to Write</T><A>https://www.youtube.com/watch?v=CAttTEUE9HM</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>16</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>12</MONTH><DAY>12</DAY></DATE><COMMENT>Tests should should be easy to write, otherwise this means the tested code has a design problem.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 5/12: Tests Should be Fast</T><A>https://www.youtube.com/watch?v=L0dZ7MmW6xc</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>2</DAY></DATE><COMMENT>Tests should should be fast in order to not break the thinking flow.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 6/12: Tests Should be Deterministic</T><A>https://www.youtube.com/watch?v=PwWyp-wpFiw</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>13</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>10</DAY></DATE><COMMENT>Tests should should be deterministic, with an exemple of a flaky test.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 7/12: Tests Should Be Automated</T><A>https://www.youtube.com/watch?v=YQlmP08dj6g</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>16</DAY></DATE><COMMENT>Tests should should be automated, there is a trade-off between automated tests and manual tests.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 8/12: Tests Should Be Isolated (from each other)</T><A>https://www.youtube.com/watch?v=HApI2cspQus</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>23</DAY></DATE><COMMENT>Tests should should use only locally initialized state or should leave the global state exactly as it was.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 9/12 Tests Should Be Composable</T><A>https://www.youtube.com/watch?v=Wf3WXYaMt8E</A><L>en</L><F>MP4</F><DURATION><MINUTE>4</MINUTE><SECOND>13</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>30</DAY></DATE><COMMENT>Production code should be composable, tests should also be, so there is no need to test the cross-product of some data conbinations.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 10/12: Tests Should be Specific</T><A>https://www.youtube.com/watch?v=8lTfrCtPPNE</A><L>en</L><F>MP4</F><DURATION><MINUTE>4</MINUTE><SECOND>27</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>13</DAY></DATE><COMMENT>When a given test fails, it should be obvious where the bug is in the production code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 11/12: Tests Should Predict Production</T><A>https://www.youtube.com/watch?v=7o5qxxx7SmI</A><L>en</L><F>MP4</F><DURATION><MINUTE>4</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>20</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 12/12: Tests Should be Inspiring</T><A>https://www.youtube.com/watch?v=2Q1O8XBVbZQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>27</DAY></DATE><COMMENT>Tests should inspire confidence.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Unit tests</TITLE>
      <ITEM><ARTICLE><X status='zombie'><T>Efficient JavaScript unit testing</T><ST>Automate JavaScript code testing across browsers</ST><A>https://www.ibm.com/developerworks/library/os-jstesting/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Hazem</FIRSTNAME><LASTNAME>Saleh</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>27</DAY></DATE><COMMENT>An introduction to JSTestDriver.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Tools to unit test your JavaScript</T><ST>Using QUnit, YUI Test, and JSTestDriver</ST><A>https://www.ibm.com/developerworks/library/wa-tools/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sebastiano</FIRSTNAME><LASTNAME>Armeli-Battana</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>10</DAY></DATE><COMMENT>A presentation of QUnit, YUI Test, and JSTestDriver.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>JS Unit Testing</T><A>https://www.youtube.com/watch?v=-IYqgx8JxlU</A><L>en</L><F>MP4</F><DURATION><MINUTE>55</MINUTE><SECOND>38</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>17</DAY></DATE></X><AUTHOR><FIRSTNAME>Seth</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>7</MONTH><DAY>16</DAY></DATE><COMMENT>A presentation of Venus.js and a demo of Venus.js and Mocha.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Introducing Unit Testing in Legacy Code - Richard Blewett</T><A>https://www.youtube.com/watch?v=2jNqc6YWMuU</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>24</MINUTE><SECOND>14</SECOND></DURATION><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE></X><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Blewett</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>Some techniques (introducing an interface, using Fakes‚Ä¶) to allow unit testing of legacy code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why Most Unit Testing is Waste</T><A>https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><MIDDLENAME>O.</MIDDLENAME><LASTNAME>Coplien</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>2</MONTH></DATE><COMMENT>An analysis of doing proper testing with some very surprising ideas: throw away tests that haven't failed in a year, prefer integration tests to unit tests‚Ä¶</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>UnitTest</T><A>https://martinfowler.com/bliki/UnitTest.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>5</DAY></DATE><COMMENT>The common traits of the different definitions of "unit tests", mocking or not the collaborators of the tested unit, duration of the test run and when to execute them.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why Do Programmers Fail to Write Good Unit Tests?</T><A>https://www.typemock.com/why-do-programmers-fail-to-write-good-unit-tests</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Leah</FIRSTNAME><LASTNAME>Grantz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>17</DAY></DATE><COMMENT>An opinion about the interest of unit tests and the characteristics of good ones.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Unit Test Insanity</T><ST>Are you repeating your unit tests in an effort to expect a different result?</ST><A>https://dzone.com/articles/unit-test-insanity</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Vester</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>12</MONTH><DAY>18</DAY></DATE><COMMENT>An example of something that should not be tested: an exception thrown by a subsystem of the SUT and not managed by the SUT.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test doubles</TITLE>
      <ITEM><ARTICLE><X><T>Working with Microsoft Moles Framework</T><A>https://www.codeguru.com/csharp/.net/article.php/c18491</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joydip</FIRSTNAME><LASTNAME>Kanjilal</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>11</DAY></DATE><COMMENT>A description on how to start with Moles, a framework to mock .NET methods.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>When to Mock</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>10</DAY></DATE><COMMENT>Mock at the boundaries and write your own mocks.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>The different types of test doubles</TITLE>
        <ITEM><ARTICLE><X><T>TestDouble</T><A>https://martinfowler.com/bliki/TestDouble.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>17</DAY></DATE><COMMENT>The definitions of Dummy objects, Fake objects, Stub, Spies, and Mocks.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Little Mocker</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>14</DAY></DATE><COMMENT>The differences between Dummy, Stub, Spy, Mock, and Fake.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Mockito</TITLE>
        <ITEM><ARTICLE><X><T>When/how to use Mockito Answer</T><A>https://testing.googleblog.com/2014/03/whenhow-to-use-mockito-answer.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Hongfei</FIRSTNAME><LASTNAME>Ding</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>3</DAY></DATE><COMMENT>A short description of using Mockito's <CODEROUTINE>Answer</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Introduction to PowerMock</T><A>https://www.baeldung.com/intro-to-powermock</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>A short description of PowerMockito, a PowerMock‚Äôs Mockito extension enabling to mock final, private or static methods.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Mockito Strict Stubbing and The UnnecessaryStubbingException</T><A>https://www.baeldung.com/mockito-unnecessary-stubbing-exception</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jonathan</FIRSTNAME><LASTNAME>Cook</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>7</DAY></DATE><COMMENT>A description of Strict Stubbing and how to disable it.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Oracles</TITLE>
      <ITEM><ARTICLE><X><T>Using Test Oracles in Automation</T><A>https://www.youtube.com/watch?v=Yusd_ogkiaQ</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>29</MINUTE><SECOND>29</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Douglas</FIRSTNAME><LASTNAME>Hoffman</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>4</MONTH><DAY>25</DAY></DATE><COMMENT>This presentation presents some basic, but nevertheless interesting, ideas about strategies to determinate if an automated test succeeded or failed: no oracle, true oracle, consistency, self-referential, and heuristic.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Testing with Simple and Combinatorial Oracles</T><A>https://xp123.com/articles/testing-with-combinatorial-oracles/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Wake</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>14</DAY></DATE><COMMENT>Some ideas of oracles.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Tools</TITLE>
      <ITEM><BLIST><TITLE>xUnit</TITLE>
        <ITEM><ARTICLE><X><T>Automated Testing Patterns and Smells</T><A>https://www.youtube.com/watch?v=Pq6LHFM4JvE</A><L>en</L><F>MP4</F><DURATION><MINUTE>59</MINUTE><SECOND>34</SECOND></DURATION><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Gerard</FIRSTNAME><LASTNAME>Meszaros</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>How to detect and fix issues in unit tests: code smells (tests difficult to understand, tests containing coding errors, tests difficult / impossible to write), behavior smells (tests failing when they should succeed - erratic test, fragile test -, tests succeeding when they should fail), and project smells.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JUnit</TITLE>
        <ITEM><ARTICLE><X><T>Test Infected:</T><ST>Programmers Love Writing Tests</ST><A>http://members.pingnet.ch/gamma/junit.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Gamma</LASTNAME></AUTHOR><COMMENT>The two authors describe the return of investment of unit testing and propose their own tool for Java: JUnit.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Incremental development with Ant and JUnit</T><A>http://carfield.com.hk/document/java/articles/ant+junit.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Malcolm</FIRSTNAME><LASTNAME>Davis</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>The author describes how he used Ant for his build process, this one includes automatic unit tests with JUnit.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='zombie'><T>JUnit antipatterns</T><ST>How to resolve</ST><A>https://www.ibm.com/developerworks/opensource/library/os-junit/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Garrett</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>Some common testing errors: testing only the expected case, forgetting boundary situations, breaking encapsulation, and too much test complexity.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality='1'><T>JUnit 5 by Marc Philipp</T><A>https://www.youtube.com/watch?v=0qI6_NKFQsY</A><L>en</L><F>MP4</F><DURATION><MINUTE>51</MINUTE><SECOND>22</SECOND></DURATION><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>11</DAY></DATE></X><AUTHOR><FIRSTNAME>Marc</FIRSTNAME><LASTNAME>Philipp</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>A detailed presentation of JUnit 5, describing the differences with JUnit 4 and giving a rational of the changes.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>The top five reasons you should be using JUnit 5 right now!</T><A>https://developer.ibm.com/dwblog/2017/top-five-reasons-to-use-junit-5-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Perry</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>17</DAY></DATE><COMMENT>An overview of the most important improvements in JUnit 5.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>What‚Äôs new in JUnit 5.4</T><A>https://www.jworks.io/whats-new-in-junit-5-4/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Erik</FIRSTNAME><LASTNAME>Pragt</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>2</MONTH><DAY>6</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Know for Sure with Property-Based Testing</T><ST>How do you test your code against thousands of values?</ST><A>https://blogs.oracle.com/javamagazine/know-for-sure-with-property-based-testing</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Johannes</FIRSTNAME><LASTNAME>Link</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>8</MONTH><DAY>20</DAY></DATE><COMMENT>An introduction to jqwik, a library to generate test data.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>JUnit 5.6 Makes Testing Easy with New Features</T><ST>New features such as the ability to define test execution order and run tests in parallel make this an important release.</ST><A>https://blogs.oracle.com/javamagazine/junit-5-6-makes-testing-easy-with-new-features</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>ErMert</FIRSTNAME><LASTNAME>√áali≈ükanik</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>4</DAY></DATE><COMMENT>Some features added since JUnit 5.0: order of execution, defining timeouts, conditional test execution, programmatic extensions, and running tests in parallel.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality='1'><T>Guide to JUnit 5 Parameterized Tests</T><A>https://www.baeldung.com/parameterized-tests-junit-5</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ali</FIRSTNAME><LASTNAME>Dehghani</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>15</DAY></DATE><COMMENT>An exhautive description of parameterized tests.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Jasmine</TITLE>
        <ITEM><ARTICLE><X><T>Testing JavaScript Using the Jasmine Framework</T><A>https://www.htmlgoodies.com/beyond/javascript/testing-javascript-using-the-jasmine-framework.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Gravelle</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>9</MONTH></DATE><COMMENT>A short introduction to writing JavaScript unit tests using Jasmine.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Selenium</TITLE>
        <ITEM><ARTICLE><X quality='-1'><T>Implicit, Explicit, &amp; Fluent Wait in Selenium WebDriver</T><A>https://www.guru99.com/implicit-explicit-waits-selenium.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chaitanya</FIRSTNAME><LASTNAME>Pujari</LASTNAME></AUTHOR><COMMENT>An unclear description of Implicit, Explicit and Fluent Waits.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>Watir and Selenium</T><A>http://www.io.com/~wazmo/blog/archives/2005_02.html#000229</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Bret</FIRSTNAME><LASTNAME>Pettichord</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>A comparison of the two tools.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X protection='payed_registration'><T>Automate acceptance tests with Selenium</T><ST>How to use the Selenium test tool for functional testing of a Ruby on Rails and Ajax application</ST><A>https://www.scribd.com/doc/924886/Automate-Acceptance-Tests-With-Selenium</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christian</FIRSTNAME><LASTNAME>Hellsten</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>12</MONTH><DAY>20</DAY></DATE><COMMENT>A short presentation of Selenium to test Ajax applications.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality='-1'><T>Selenium: The in-browser acceptance testing tool</T><A>https://www.youtube.com/watch?v=78mts_sKNGs</A><L>en</L><F>MP4</F><DURATION><MINUTE>41</MINUTE><SECOND>0</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Huggins</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT>Jason tried to demonstrate how a commit in Subversion could trigger CruiseControl which would run the new build accross several OSes and Browsers and generate Flash videos of the automated tests. But the presentation is very unclear and the demo failed‚Ä¶</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Selenium Grid: Web Testing in Parallel</T><A>https://www.infoq.com/news/2007/09/selenium-grid-parallel-testing/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Geoffrey</FIRSTNAME><LASTNAME>Wiseman</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>Selenium Grid can dispatch the tests on several PCs.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Waits</T><A>https://www.selenium.dev/docs/site/en/webdriver/waits/</A><L>en</L><F>HTML</F></X><DATE><YEAR>2019</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>The official Selenium wiki for explicit, implicit and fluent waits.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Cypress</TITLE>
        <ITEM><ARTICLE><X><T>Pourquoi est-on pass√© de Selenium √† Cypress ?</T><A>https://livingobjects.com/pourquoi-est-on-passe-de-selenium-a-cypress/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Estelle</FIRSTNAME><LASTNAME>Picq</LASTNAME></AUTHOR><COMMENT>A short introduction to Cypress.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Fit</TITLE>
        <ITEM><ARTICLE><X quality='-1'><T>Using Fit: An Open-Source Testing Framework</T><A>https://www.youtube.com/watch?v=oLRBzDqucjQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>54</MINUTE><SECOND>4</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>22</DAY></DATE></X><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><LASTNAME>Mugridge</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>2</MONTH><DAY>9</DAY></DATE><COMMENT>This description of Fit is not clear: instead of speaking of the mechanisms of Fit (such as the fixtures between the storytests and the AUT), Mugridge spends his time trying to convince the audience about the interest of storytests, but his discourse is messy.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JGiven</TITLE>
        <ITEM><ARTICLE><X quality='-2'><T>Acceptance Tests in Java With JGiven</T><ST>Learn more about acceptance tests in Java, and why you should learn them right now.</ST><A>https://dzone.com/articles/acceptance-tests-in-java-with-jgiven</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Marco</FIRSTNAME><LASTNAME>Schulz</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>2</DAY></DATE><COMMENT>A bad article: poor English, the code samples are badly laid out, the explanations are unclear.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Cucumber</TITLE>
        <ITEM><ARTICLE><X><T>Why Bother With Cucumber Testing?</T><ST>The disadvantages of using Cucumber and its widespread use as a poor man's integration test.</ST><A>https://www.jackkinsella.ie/articles/why-bother-with-cucumber-testing</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Kinsella</LASTNAME></AUTHOR><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>A Case Against Cucumber</T><A>https://8thlight.com/blog/kevin-liddle/2013/09/18/a-case-against-cucumber.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Liddle</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Why I recommend against using Cucumber</T><A>https://www.codewithjason.com/recommend-against-cucumber/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Swett</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>3</DAY></DATE><COMMENT>Cucumber can be used stupdily, but even when used as intended it only adds maintenance cost and complexity compared to bare Capybara.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mutation testing</TITLE>
      <ITEM><ARTICLE><X><T>Mutation Testing</T><A>https://blog.cleancoder.com/uncle-bob/2016/06/10/MutationTesting.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>10</DAY></DATE><COMMENT>An introduction to mutation testing.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Fuzz testing</TITLE>
      <ITEM><ARTICLE><X><T>Zurich Go Meetup: Go-Fuzz: Practical Fuzzing with Go</T><A>https://www.youtube.com/watch?v=3J9qbvOfklg</A><L>en</L><F>MP4</F><DURATION><MINUTE>26</MINUTE><SECOND>55</SECOND></DURATION><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>19</DAY></DATE></X><AUTHOR><FIRSTNAME>Roberto</FIRSTNAME><LASTNAME>Clapis</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>A presentation of Go-Fuzz and some advice on how to use it.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Performance testing</TITLE>
      <ITEM><ARTICLE><X><T>Using open source tools for performance testing</T><A>https://www.youtube.com/watch?v=k9h51BM2h4w</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>4</MINUTE><SECOND>37</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE></X><AUTHOR><FIRSTNAME>Goranka</FIRSTNAME><LASTNAME>Bjedov</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT>Some generalities about performance testing of Web applications: description of the different types of performances tests, architecture of a performance test environment, in-house vs. vendor vs. open source performance tools, keeping all the data for a while‚Ä¶</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Code coverage</TITLE>
      <ITEM><ARTICLE><X quality='1'><T>Software Negligence and Testing Coverage</T><A>http://www.kaner.com/pdfs/negligence_and_testing_coverage.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>After describing what is negligence and malpractice, explaining that tests must be prioritized depending on the risks, Cem gives a list of coverage measures as some food for thought.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Coverage Analysis</T><A>https://www.bullseye.com/coverage.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Cornett</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>7</MONTH><DAY>29</DAY></DATE><COMMENT>An exhaustive list of the different types of coverage measurements, but some descriptions are not so clear‚Ä¶</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>In pursuit of code quality: Don't be fooled by the coverage report</T><ST>Are your test coverage measurements leading you astray?</ST><A>https://www.ibm.com/developerworks/java/library/j-cq01316/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>31</DAY></DATE><COMMENT>An introduction to code coverage. The coverage booby traps are clearly exposed, but this article is too much verbose.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code coverage goal: 80% and no less!</T><A>https://testing.googleblog.com/2010/07/code-coverage-goal-80-and-no-less.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alberto</FIRSTNAME><LASTNAME>Savoia</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>20</DAY></DATE><COMMENT>How much code coverage should we target?</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code coverage considered harmful</T><A>http://adiws.blogspot.com/2012/04/code-coverage-considered-harmful.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Graham</FIRSTNAME><LASTNAME>Pearson</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>6</DAY></DATE><COMMENT>The perverse effects of code coverage when dealing with dumb developers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Coverage Best Practices</T><A>https://testing.googleblog.com/2020/08/code-coverage-best-practices.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Carlos</FIRSTNAME><LASTNAME>Arguelles</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Marko</FIRSTNAME><LASTNAME>Ivankoviƒá</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Adam</FIRSTNAME><LASTNAME>Bender</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>8</MONTH><DAY>7</DAY></DATE><COMMENT>Some good advice.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>