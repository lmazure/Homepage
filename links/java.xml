<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Java</TITLE>
<PATH>links/java.xml</PATH>
<DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>29</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><X><T>Oracle</T><A>http://www.oracle.com/technetwork/java/index.html</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>tryjshell.org</T><A>https://tryjshell.org/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><CLIST><TITLE>Information</TITLE>
      <ITEM><X><T>DZone</T><A>https://dzone.com/java-jdk-development-tutorials-tools-news</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>JCP</T><A>https://www.jcp.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>developerWorks</T><A>https://www.ibm.com/developerworks/java/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>developer.com</T><A>https://www.developer.com/java/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Jenkov.com</T><A>http://tutorials.jenkov.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Baeldung</T><A>https://www.baeldung.com/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>Freeware</TITLE>
      <ITEM><X status='obsolete'><T>Kaffe</T><A>https://github.com/kaffe/kaffe</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>archive</T><A>http://www.oracle.com/technetwork/java/archive-139210.html</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><CLIST><TITLE>JDK docs</TITLE>
      <ITEM><X><T>5</T><A>https://docs.oracle.com/javase/1.5.0/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>6</T><A>https://docs.oracle.com/javase/6/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>7</T><A>https://docs.oracle.com/javase/7/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>8</T><A>https://docs.oracle.com/javase/8/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>9</T><A>https://docs.oracle.com/javase/9/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>10</T><A>https://docs.oracle.com/javase/10/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>11</T><A>https://docs.oracle.com/en/java/javase/11/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>12</T><A>https://docs.oracle.com/en/java/javase/12/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>13</T><A>https://docs.oracle.com/en/java/javase/13/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE><ANCHOR>javadoc</ANCHOR><X><T>javadoc</T><A>https://docs.oracle.com/javase/10/javadoc/toc.htm</A><L>en</L><F>HTML</F></X></TITLE>
      <ITEM><X><T>personal notes</T><A>../notes/javadoc.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>Heapdump analyzers</TITLE>
      <ITEM><X quality='1'><T>Memory Analyzer (MAT)</T><A>http://www.eclipse.org/mat</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>VisualVM</T><A>https://visualvm.github.io/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>HeapAnalyzer</T><A>http://www.alphaworks.ibm.com/tech/heapanalyzer</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>Obfuscators</TITLE>
      <ITEM><X><T>Jshrink</T><A>http://www.e-t.com/jshrink.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>FAQs</TITLE>
      <ITEM><X><T>Angelika Langer's Java Generics FAQs</T><A>http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>Java Performance Tuning</T><A>http://www.JavaPerformanceTuning.com/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><BLIST><TITLE>Libraries</TITLE>
      <ITEM><BLIST><TITLE>Collections</TITLE>
        <ITEM><X><T>Common Collections Library</T><A>http://commons.apache.org/collections/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Eclipse Collections</T><A>https://www.eclipse.org/collections/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>ORM</TITLE>
        <ITEM><CLIST><TITLE><X><T>Hibernate</T><A>http://hibernate.org/</A><L>en</L><F>HTML</F></X></TITLE>
          <ITEM><X><T>High-Performance Hibernate Tutorial</T><A>https://vladmihalcea.com/tutorials/hibernate/</A><L>en</L><F>HTML</F></X></ITEM>
        </CLIST></ITEM>
        <ITEM><X><T>MyBatis</T><A>http://blog.mybatis.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><X><T>Guava</T><A>http://code.google.com/p/guava-libraries/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>ND4J</T><A>http://nd4j.org</A><L>en</L><F>HTML</F></X>: N-Dimensional Arrays for Java</ITEM>
      <ITEM><X><T>jOOQ</T><A>https://www.jooq.org</A><L>en</L><F>HTML</F></X>: SQL helper</ITEM>
      <ITEM><X><T>JavaParser</T><A>http://javaparser.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>JNA</T><A>https://github.com/java-native-access/jna</A><L>en</L><F>HTML</F></X>: Java Native Access</ITEM>
      <ITEM><X><T>Ehcache</T><A>http://www.ehcache.org/</A><L>en</L><F>HTML</F></X>: cache management</ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Books and 'zines</TITLE>
      <ITEM><X><T>Thinking in Java</T><A>https://sophia.javeriana.edu.co/~cbustaca/docencia/POO-2016-01/documentos/Thinking_in_Java_4th_edition.pdf</A><L>en</L><F>PDF</F></X> by <AUTHOR><FIRSTNAME>Bruce</FIRSTNAME><LASTNAME>Eckel</LASTNAME></AUTHOR>: A free book to learn Java (Java 6).</ITEM>
      <ITEM><X><T>Java Cookbook</T><A>http://1.droppdf.com/files/8o1NF/oreilly-java-coobook-3rd-2014.pdf</A><L>en</L><F>PDF</F></X> by <AUTHOR><FIRSTNAME>Ian</FIRSTNAME><LASTNAME>Darwin</LASTNAME></AUTHOR>: A recipe book (Java 8).</ITEM>
      <ITEM><X><T>JavaWorld</T><A>http://www.javaworld.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Java Magazine</T><A>https://blogs.oracle.com/javamagazine/</A><L>en</L><F>HTML</F></X> (<X><T>old version</T><A>https://www.oracle.com/technetwork/java/javamagazine/index.html</A><L>en</L><F>HTML</F></X>)</ITEM>
    </BLIST></ITEM>
    <ITEM><CLIST><TITLE><ANCHOR>rules</ANCHOR>Coding rules</TITLE>
      <ITEM><X><T>Doug Leas</T><A>http://g.oswego.edu/dl/html/javaCodingStd.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>AmbySoft</T><A>http://www.ambysoft.com/essays/javaCodingStandards.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Macadamian</T><A>http://www.literateprogramming.com/macadamian.pdf</A><L>en</L><F>PDF</F></X></ITEM>
      <ITEM><X><T>Geotechnical Software Services</T><A>http://geosoft.no/development/javastyle.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Google</T><A>https://google.github.io/styleguide/javaguide.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>personal notes</T><A>../notes/java.htm</A><L>en</L><F>HTML</F></X></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles</TITLE>
    <ITEM><ARTICLE><X quality='-1' status='zombie'><T>2D animation with image-based paths</T><ST>Take the heavy coding out of fixed-object animation</ST><A>https://www.ibm.com/developerworks/java/library/j-animat/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Barry</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Feigenbaum</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Tom</FIRSTNAME><LASTNAME>Brunet</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>The paths of some sprites is recorded using some color encoding. Not a big deal…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Getting the Bugs Out: A Conversation With Bug Fixer Brian Harry</T><A>http://www.oracle.com/technetwork/articles/javase/harry-qa-137699.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Janice</FIRSTNAME><MIDDLENAME>J.</MIDDLENAME><LASTNAME>Heiss</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>4</MONTH></DATE><COMMENT>The interview of a guy who killed hundreds of bugs in the JDK.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Developing iPhone Applications using Java</T><A>https://www.youtube.com/watch?v=s8nMpi5-P-I</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Arno</FIRSTNAME><LASTNAME>Puder</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>14</DAY></DATE><COMMENT>The technical solution described here is too simplistic: the performance would be awful, you have to reimplement Cocoa in Java…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Approaches to Mocking</T><A>http://www.onjava.com/pub/a/onjava/2004/02/11/mocks.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Stewart</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH><DAY>2</DAY></DATE><COMMENT>An introduction on using mocks (aka stubs) in Java: static mocks, dynamic mocks, AOP.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Java theory and practice: Coaxing J2EE out of the container</T><ST>Projects like Somnifugi JMS blur the boundary between J2EE and J2SE</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp04204.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The stand alone implementation of some J2EE components (JMS, JNDI) and using JMX.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Project PlaySIM: Experimenting with Java Card™ 3 System Prog</T><A>https://www.youtube.com/watch?v=aCM9KN2pzQE</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>3</MINUTE><SECOND>23</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Arseneau</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Fritjof</FIRSTNAME><LASTNAME>Engelhardtsen</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>6</MONTH><DAY>5</DAY></DATE><COMMENT>PlaySIM is a hardware prototyping platform: a daughter board for the SunSPOT platform is used to emulate a Java Card 3 SIM card.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>5 things you didn't know about … everyday Java tools</T><ST>Java tools for everyday things, like parsing, timing, and sound</ST><A>https://www.ibm.com/developerworks/java/library/j-5things12/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH><DAY>14</DAY></DATE><COMMENT>Random stuff: StAX, ServiceLoader, Scanner, Timer, and JavaSound.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Have Java's Security Issues Gotten out of Hand</T><A>https://ieeexplore.ieee.org/document/6383153</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Lee</FIRSTNAME><LASTNAME>Garber</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>12</MONTH></DATE><COMMENT>Vulnerabilities are found over and over again in Oracle's JVM.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Transparent network acceleration for Java-based workloads in the cloud</T><ST>Introducing the Java Sockets over RDMA library</ST><A>https://www.ibm.com/developerworks/java/library/j-transparentaccel/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sivasakthi</FIRSTNAME><LASTNAME>Thirugnanapandi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Sreedhar</FIRSTNAME><LASTNAME>Kodali</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Neil</FIRSTNAME><LASTNAME>Richards</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Tim</FIRSTNAME><LASTNAME>Ellison</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Xiaoqiao</FIRSTNAME><LASTNAME>Meng</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Indrajit</FIRSTNAME><LASTNAME>Poddar</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of JSOR, how to use it, and how much it improves socket performance.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Build an application using microservices and CQRS</T><ST>Maximize the performance and scalability of your microservices-based apps</ST><A>https://developer.ibm.com/articles/cl-build-app-using-microservices-and-cqrs-trs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Felicia</FIRSTNAME><LASTNAME>Tucci</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>Using Spring and Axon to implement an application having a CQRS architecure.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Deprecation of Object.finalize()</T><A>https://stuartmarks.wordpress.com/2017/04/17/deprecation-of-object-finalize/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stuart</FIRSTNAME><LASTNAME>Marks</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>17</DAY></DATE><COMMENT><CODEROUTINE>Object.finalize()</CODEROUTINE> is obsoleted, but not planned for removal yet.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>How to Convert CSV to JSON in Java</T><ST>Convert CSV to JSON using Jackson. Use a POJO for conversion or a List &amp; Map for intermediate storage.</ST><A>http://www.novixys.com/blog/convert-csv-json-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jay</FIRSTNAME><LASTNAME>Sridhar</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>2</MONTH><DAY>27</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The State of Debugging in Java</T><ST>Debugging has come a long way from the jdb days. Here, we cover the variety of Java debuggers out there and some common practices devs use.</ST><A>https://dzone.com/articles/the-state-of-debugging-in-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>A quick presentation of the tools that can be used to debug a system in production: <CODEROUTINE>jps</CODEROUTINE>, <CODEROUTINE>jinfo</CODEROUTINE>, <CODEROUTINE>jcmd</CODEROUTINE>, <CODEROUTINE>jmap</CODEROUTINE>, <CODEROUTINE>jhat</CODEROUTINE>, <CODEROUTINE>jstack</CODEROUTINE>, <CODEROUTINE>jstat</CODEROUTINE>, <CODEROUTINE>jdb</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Some factory examples.</T><A>https://www.phillip-kruger.com/post/some_factory_examples/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Phillip</FIRSTNAME><LASTNAME>Krüger</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>13</DAY></DATE><COMMENT>Creating a factory with plain Java, SPI, CDI and EJB.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Cheatsheet: Java Functional Interfaces</T><ST>Want a quick breakdown of Java's functional interfaces? Here's a great compilation of predicates, operators, and functions, as well as their uses.</ST><A>https://dzone.com/articles/cheatsheet-java-functional-interfaces</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tonny</FIRSTNAME><LASTNAME>Tapper</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>9</DAY></DATE><COMMENT>A list of the functional interfaces (defined in the <CODEROUTINE>java.util.function</CODEROUTINE> package).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>20 Examples of Using Java’s CompletableFuture</T><A>https://mahmoudanouti.wordpress.com/2018/01/26/20-examples-of-using-javas-completablefuture/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mahmoud</FIRSTNAME><LASTNAME>Anouti</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>26</DAY></DATE><COMMENT>A long list of simple examples with little explanation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Using Java Flight Recorder with OpenJDK 11</T><A>https://springuni.com/using-java-flight-recorder-with-openjdk-11/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Laszlo</FIRSTNAME><LASTNAME>Csontos</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>10</MONTH><DAY>13</DAY></DATE><COMMENT>A presentation of Java Flight Recorder, but the author does not seem to master all the details.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>SafeVarargs &amp; Variable arguments in Java</T><A>https://medium.com/@sendilkumarn/safevarargs-variable-arguments-in-java-b9fdd5d996bb</A><L>en</L><F>HTML</F></X><AUTHOR><GIVENNAME>sendilkumarn</GIVENNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>12</MONTH><DAY>20</DAY></DATE><COMMENT>When to use <CODEROUTINE>@SafeVarargs</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>For the Fun of It: Writing Your Own Text Editor, Part 1</T><ST>Using a layered design and iterative development, a line editor evolves into a text editor in this new article series.</ST><A>https://blogs.oracle.com/javamagazine/for-the-fun-of-it-writing-your-own-text-editor-part-1</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ian</FIRSTNAME><LASTNAME>Darwin</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>8</MONTH><DAY>26</DAY></DATE><COMMENT>Some design details about a simple Java reimplementation of <CODEROUTINE>ed</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Tutorials</TITLE>
      <ITEM><ARTICLE><X><T>Speaking the Java language without an accent</T><ST>Native fluency for nonnative programmers</ST><A>https://www.ibm.com/developerworks/library/j-noaccent/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>1</MONTH><DAY>12</DAY></DATE><COMMENT>Some coding habits that C/C++ developers should modify in order to code in Java as everyone else.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Coding</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Seven Low-Cost Ways to Improve Legacy Code</T><A>http://www.onjava.com/pub/a/onjava/2004/04/28/hardcorejava.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><LASTNAME>Simmons</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>28</DAY></DATE><COMMENT>Some simple Java coding rules to improve code maintenance.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Performance</TITLE>
      <ITEM><ARTICLE><X status="dead"><T>The Java HotSpot Performance Engine: An In-Depth Look</T><A>http://developer.java.sun.com/developer/technicalArticles/Networking/HotSpot/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Meloan</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>6</MONTH></DATE><COMMENT>This describes the new technologies used by the HotSpot VM: adaptative compilation, inlining, garbage collection…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java optimization techniques</T><ST>A practical guide for squeezing every drop of performance out of your Java apps</ST><A>http://www.dsc.ufcg.edu.br/~jacques/cursos/2004.2/gr/recursos/j-javaopt.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Erwin</FIRSTNAME><LASTNAME>Vervaet</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Maarten</FIRSTNAME><MIDDLENAME>De</MIDDLENAME><LASTNAME>Cock</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>6</MONTH></DATE><COMMENT>This is obvious, but too often forgotten: before implementing low levels optimization, first check that your algorithm is not stupid.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Urban performance legends</T><ST>Alligators in the garbage collector and other programming myths</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp04223/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>22</DAY></DATE><COMMENT>Some wrong ideas about JVM speed (synchronization and immutable classes are slow, final classes are fast) and some good general advice about performance.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Garbage collection and performance</T><ST>Hints, tips, and myths about writing garbage collection-friendly classes</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp01274/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>1</MONTH><DAY>27</DAY></DATE><COMMENT>Some old tricks to avoid the impact of garbage collection on performance have nowadays adverse effects.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Eye on performance: Micro performance benchmarking</T><ST>Byte offers a glimpse into application performance</ST><A>http://www.50001.com/language/javaside/lec/java_ibm/Eye%20on%20performance%20%B8%B6%C0%CC%C5%A9%B7%CE%20%C6%DB%C6%F7%B8%D5%BD%BA%20%BA%A5%C4%A1%B8%B6%C5%B7%20%28%BF%B5%B9%AE%29.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>Instead of performing oversimplified flawed performance tests, looking at the generated bytecodes can sometimes reveal the pointlessness of some Java code tuning.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Eye on performance: Tuning garbage collection in the HotSpot JVM</T><ST>Packing 100 megabytes of garbage into a 50 megabyte bag</ST><A>https://www.ibm.com/developerworks/java/library/j-perf06304/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>Tuning the garbage collector to lower its impact on performance.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice, Performance management -- do you have a plan?</T><ST>Knowing when to optimize is more important than knowing how to optimize</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp03253.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>The usual advice: performance must be managed as part of the development process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java performance monitoring, Part 2</T><ST>Java process monitoring with the JDK's built-in profilers</ST><A>https://www.ibm.com/developerworks/java/library/j-5things7.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>A very basic introduction to <CODEROUTINE>JConsole</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about … Java performance monitoring, Part 2</T><ST>Java process monitoring with the JDK's built-in profilers</ST><A>https://www.ibm.com/developerworks/java/library/j-5things8.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>13</DAY></DATE><COMMENT><CODEROUTINE>jps</CODEROUTINE>, <CODEROUTINE>jstat</CODEROUTINE>, <CODEROUTINE>jstack</CODEROUTINE>, <CODEROUTINE>jmap</CODEROUTINE>, and <CODEROUTINE>jhat</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Faster problem solving in Java with heuristic search</T><ST>Learn about a Java implementation of a popular search algorithm for artificial intelligence</ST><A>https://www.ibm.com/developerworks/library/j-ai-search/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Matthew</FIRSTNAME><LASTNAME>Hatem</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Ethan</FIRSTNAME><LASTNAME>Burns</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Wheeler</FIRSTNAME><LASTNAME>Ruml</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>16</DAY></DATE><COMMENT>A description of A*, a heuristic search algorithm, in Java and its optimization by reducing memory consumption, using High Performance Primitive Collections, and recycling objects to avoid garbage collection.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Performance Optimization Tips: How to Avoid Common Pitfalls</T><ST>Since Java is one of the most widely used languages in development today, learning how to make your Java apps as performant as possible is a crucial skill.</ST><A>https://dzone.com/articles/java-performance-optimization-tips-how-to-avoid-co</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Taylor</FIRSTNAME><LASTNAME>Lodge</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>11</DAY></DATE><COMMENT>A short list of basic good pieces of advice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Processing Large Files in Java</T><A>https://stuartmarks.wordpress.com/2019/01/11/processing-large-files-in-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stuart</FIRSTNAME><LASTNAME>Marks</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>11</DAY></DATE><COMMENT>The author describes some optimizations he did on a program parsing a big file.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Memory management</TITLE>
      <ITEM><ARTICLE><X><T>Java theory and practice: Whose object is it, anyway?</T><ST>Garbage collection reduces the need to track object ownership -- but it doesn't eliminate it</ST><A>https://www.ibm.com/developerworks/library/j-jtp06243/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>24</DAY></DATE><COMMENT>Use immutable objects or defensive copying, otherwise you will have to clearly document which classes own the objects to avoid tricky bugs.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Eye on performance: Referencing objects</T><ST>How you reference objects can seriously affect the garbage collector</ST><A>https://www.ibm.com/developerworks/java/library/j-perf08273.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>8</MONTH><DAY>26</DAY></DATE><COMMENT>The authors explain how to fix unintentional object reference retention and that nulling reference is the wrong solution to a scoping problem.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: A brief history of garbage collection</T><ST>How does garbage collection work?</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp10283/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A short and clear description of the evolution of the garbage collection algorithms.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Garbage collection in the HotSpot JVM</T><ST>Generational and concurrent garbage collection</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp11253/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>11</MONTH><DAY>25</DAY></DATE><COMMENT>The article describes the garbage collection algorithms implemented in 1.4 and what are their available tunuing parameters.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Thanks for the memory</T><ST>Understanding how the JVM uses native memory on Windows and Linux</ST><A>https://www.ibm.com/developerworks/java/library/j-nativememory-linux/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Hall</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>4</MONTH><DAY>21</DAY></DATE><COMMENT>After describing how the JVM is using native memory, Andrew Hall explains how to find what is eating it up and locating leaks.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>The Essence of Caching - Ehcache</T><A>https://www.youtube.com/watch?v=TszcAWgCXD0</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Greg</FIRSTNAME><LASTNAME>Luck</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>1</MONTH><DAY>24</DAY></DATE><COMMENT>Some general common information on caching and a presentation of Ehcache, an open source Java distributed cache.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>From Java code to Java heap</T><ST>Understanding and optimizing your application's memory usage</ST><A>https://www.ibm.com/developerworks/library/j-codetoheap/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Bailey</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>29</DAY></DATE><COMMENT>A detailed analysis of the memory used for storing an object, an array, or a collection.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>An Introduction to ZGC: A Scalable and Experimental Low-Latency JVM Garbage Collector</T><A>https://www.baeldung.com/jvm-zgc-garbage-collector</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Attila</FIRSTNAME><LASTNAME>Fejér</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>2</MONTH><DAY>9</DAY></DATE><COMMENT>A short description of the Z Garbage Collector.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>References</TITLE>
        <ITEM><ARTICLE><X><T>Java Tip 79: Interact with garbage collector to avoid memory leaks</T><ST>Use reference objects to prevent memory leaks in applications built on the MVC pattern</ST><A>http://www.javaworld.com/javaworld/javatips/jw-javatip79.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Raimond</FIRSTNAME><LASTNAME>Reichert</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>Using <CODEROUTINE>WeakReference</CODEROUTINE>s to record listeners and a <CODEROUTINE>ReferenceQueue</CODEROUTINE> to remove them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Guidelines for using the Java 2 reference classes</T><ST>Learn to effectively use SoftReference, WeakReference, and PhantomReference</ST><A>https://www.ibm.com/developerworks/java/library/j-refs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Haggar</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>An introduction to <CODEROUTINE>SoftReference</CODEROUTINE>, <CODEROUTINE>WeakReference</CODEROUTINE> and <CODEROUTINE>PhantomReference</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java theory and practice: Plugging memory leaks with weak references</T><ST>Weak references make it easy to express object lifecycle relationships</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp11225/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>11</MONTH><DAY>22</DAY></DATE><COMMENT>An introduction to <CODEROUTINE>WeakReference</CODEROUTINE> and to <CODEROUTINE>WeakHashMap</CODEROUTINE> to store metadata about objects only for as long as they are effectively used.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java theory and practice: Plugging memory leaks with soft references</T><ST>Soft references provide for quick-and-dirty caching</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp01246.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>Using <CODEROUTINE>SoftReference</CODEROUTINE>s to implement a simple cache whose memory will be reclaimed if the JVM needs memory.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Memory leaks</TITLE>
        <ITEM><ARTICLE><X status='dead'><T>Bitter Java - Chapter 6: Bitter Memories</T><A>http://jacques.dsc.ufcg.edu.br/cursos/map/recursos/BitterJava.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Bruce</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Tate</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>5</MONTH></DATE><COMMENT>An introduction to Java memory leaks (unintentional object retention) and how to find and fix them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Memory Leaks, Be Gone</T><A>http://www.oracle.com/technetwork/articles/entarch/memory-leaks-091917.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Staffan</FIRSTNAME><LASTNAME>Larsen</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>Some advertisement for the JRockit Memory Leak Detector.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>How to Fix Memory Leaks in Java</T><A>http://java.dzone.com/news/how-fix-memory-leaks-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Veljko</FIRSTNAME><LASTNAME>Krunic</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>3</MONTH><DAY>18</DAY></DATE><COMMENT>A good tutorial on how to analyze memory leaks.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>JVM</TITLE>
      <ITEM><ARTICLE><X status='zombie'><T>Java shared classes</T><ST>Learn how to start your Java applications faster and with a smaller memory footprint</ST><A>https://www.ibm.com/developerworks/java/library/j-shared/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Lakshmi</FIRSTNAME><LASTNAME>Shankar</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Burns</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Roshan</FIRSTNAME><LASTNAME>Nichani</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE><COMMENT>Sharing classes between JVMs in order to reduce memory usage and startup time.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Taming Tiger: Virtual machine updates</T><ST>Changes designed to speed startup time and reduce memory requirements</ST><A>https://www.ibm.com/developerworks/library/j-tiger03175.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>3</MONTH><DAY>15</DAY></DATE><COMMENT>New command line options allow to handle JVM crashes, switching on Java Shared Archives and there are the usual garbage collector and thread scheduling changes…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Project Guest VM - A Java Platform implemented in Java and hosted on the Xen Hypervisor</T><A>https://www.youtube.com/watch?v=iHIaH12f2Ek</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mick</FIRSTNAME><LASTNAME>Jordan</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>Using Maxine VM, a virtual machine written in Java, directly on top of Xen in order to get rid of the OS layer.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about … Command-line flags for the JVM</T><ST>Fine-tune JVM performance and the Java runtime</ST><A>https://sites.google.com/site/richardgennaro/home/development/languages/java/tips-tricks/command-line-flags-for-the-jvm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>24</DAY></DATE><COMMENT>Some JVM flags: <CODEROUTINE>-XX:+DisableExplicitGC</CODEROUTINE>, <CODEROUTINE>-XX:+HeapDumpOnOutOfMemoryError</CODEROUTINE>, <CODEROUTINE>-Xbootclasspath</CODEROUTINE>, <CODEROUTINE>-verbose</CODEROUTINE>, and <CODEROUTINE>-X</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A JVM Does That?</T><A>https://www.youtube.com/watch?v=uL2D3qzHtqY</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>52</MINUTE><SECOND>38</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cliff</FIRSTNAME><LASTNAME>Click</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>3</MONTH><DAY>29</DAY></DATE><COMMENT>The current status of JVMs: what works correctly, what does not work so correctly, and some suggestions of possible improvements.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Your next JVM: Panama, Valhalla, Metropolis by John Rose</T><A>https://www.youtube.com/watch?v=OMk5KoUIOy4</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>50</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>A wishlist for future JVMs: using Java instead of C++, fibers replacing threads, unification of classes and primitives…</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>IBM's multitenancy</TITLE>
        <ITEM><ARTICLE><X><T>Introduction to Java multitenancy</T><ST>Learn about a new feature for cloud systems in the IBM SDK Java Technology Edition, Version 7 Release 1</ST><A>https://www.ibm.com/developerworks/library/j-multitenant-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Graeme</FIRSTNAME><LASTNAME>Johnson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Dawson</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>17</DAY></DATE><COMMENT>IBM completed in Java 8 JVM to support running isolated applications in a single JVM instance.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java multitenancy: Configuration options, tenant lifecycle, and isolation in action</T><ST>Dig deeper into the multitenancy implementation in the IBM SDK Java Technology Edition, Version 7 Release 1</ST><A>https://www.ibm.com/developerworks/library/j-multitenant-java2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gavin</FIRSTNAME><LASTNAME>Rolleston</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Dawson</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>8</MONTH><DAY>31</DAY></DATE><COMMENT>The <CODEROUTINE>java</CODEROUTINE> and <CODEROUTINE>javad</CODEROUTINE> command line options and some simple examples of using multitenancy.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Class loaders</TITLE>
      <ITEM><ARTICLE><X status='zombie'><T>Java programming dynamics, Part 1: Classes and class loading</T><ST>A look at classes and what goes on as they're loaded by a JVM</ST><A>https://www.ibm.com/developerworks/java/library/j-dyn0429/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>29</DAY></DATE><COMMENT>A presentation of the class loaders, but more theoretical than applicable.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Cracking Java byte-code encryption</T><ST>Why Java obfuscation schemes based on byte-code encryption won't work</ST><A>http://www.javaworld.com/javaworld/javaqa/2003-05/01-qa-0509-jcrypt.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vladimir</FIRSTNAME><LASTNAME>Roubtsov</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>The title says everything: just hack <CODEROUTINE>java.lang.ClassLoader.defineClass()</CODEROUTINE> in your JRE.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Class sharing in Eclipse OpenJ9</T><ST>Reduce your memory footprint and improve startup performance with the shared class feature</ST><A>https://developer.ibm.com/tutorials/j-class-sharing-openj9/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Corrie</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Hang</FIRSTNAME><LASTNAME>Shao</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>6</MONTH><DAY>6</DAY></DATE><COMMENT>A detailed introduction to OpenJ9's shared classes cache.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Bytecodes</TITLE>
      <ITEM><ARTICLE><X status='zombie'><T>Java programming dynamics, Part 4: Class transformation with Javassist</T><ST>Using Javassist to transform methods in bytecode</ST><A>https://www.ibm.com/developerworks/java/library/j-dyn0916.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>9</MONTH><DAY>16</DAY></DATE><COMMENT>After a short presentation of Javassist, the author gives an example of its use by patching methods to measure method execution timings.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java programming dynamics, Part 5: Transforming classes on-the-fly</T><ST>Learn how to modify classes as they're being loaded with Javassist</ST><A>https://www.ibm.com/developerworks/java/library/j-dyn0203.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH><DAY>3</DAY></DATE><COMMENT>A combination of byte code manipulation and class loading interception, in order to patch classes as they are loaded.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Using the ASM Toolkit for Bytecode Manipulation</T><A>http://www.onjava.com/pub/a/onjava/2004/10/06/asm1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugene</FIRSTNAME><LASTNAME>Kuleshov</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>6</DAY></DATE><COMMENT>A presentation of ASM, a toolkit to parse, modify and generate bytecodes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Create and Read J2SE 5.0 Annotations with the ASM Bytecode Toolkit</T><A>http://www.onjava.com/pub/a/onjava/2004/10/20/asm.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugene</FIRSTNAME><LASTNAME>Kuleshov</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>This toolkit also handles annotations, enabling management of Java 1.5 annotations with earlier JREs.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>CGLib: The Missing Manual</T><A>https://dzone.com/articles/cglib-missing-manual</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Winterhalter</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>7</DAY></DATE><COMMENT>A fast-paced overview of cglib.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>JDK 11 and Proxies in a World Past sun.misc.Unsafe</T><ST>Java 11 is making changes to the Unsafe class. See what's being deprecated and how that's going to affect proxies for future projects.</ST><A>https://dzone.com/articles/jdk-11-and-proxies-in-a-world-past-sunmiscunsafe</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Winterhalter</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>22</DAY></DATE><COMMENT>cglib will not be usable anymore, the author gives some short explanations on using Byte Buddy to replace it.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Obfuscation</TITLE>
        <ITEM><ARTICLE><X status='dead'><T>The New Obfuscation</T><A>http://today.java.net/pub/a/today/2004/10/22/obfuscation.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Tyma</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>The interest of obfuscation and some obfuscating methods.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Decompilers</TITLE>
        <ITEM><ARTICLE><X><T>Java decompilers compared</T><A>http://www.javaworld.com/javaworld/jw-07-1997/jw-07-decompilers.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Dyer</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>7</MONTH></DATE><COMMENT>A very basic comparison of DejaVu, Mocha and WingDis.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Applets</TITLE>
      <ITEM><ARTICLE><X><T>Applets Reloaded: the New Java Plug-In</T><A>https://www.youtube.com/watch?v=4wi9Q1x8j7E</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>52</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ken</FIRSTNAME><LASTNAME>Russell</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>8</MONTH><DAY>28</DAY></DATE><COMMENT>This presentation of the new applet plugin implementation in Java 1.6 contains more demonstrations than technical information.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Diagnosing Java Code: I don't know why I read this series since most of these articles are (in my personal opinion) not clear, misleading and/or of little interest. But, at least, they provide some material to thing about.</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Bug patterns: An introduction</T><ST>Diagnosing and correcting recurring bug types in your Java programs</ST><A>https://www.ibm.com/developerworks/java/library/j-diag1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>2</MONTH></DATE><COMMENT>Cut 'n paste code results into a program difficult to maintain, it is better to factorize the code</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Diagnosing Java Code: The Dangling Composite bug pattern</T><ST>Squash one of the most common causes of the null-pointer exception</ST><A>https://www.ibm.com/developerworks/java/library/j-diag2</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>3</MONTH></DATE><COMMENT>Use dedicated special classes to indicate base cases (e.g. an empty linked list) instead of a null pointer.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Null Flag bug pattern</T><ST>Avoid using null pointers as flags for exceptions</ST><A>https://www.ibm.com/developerworks/java/library/j-diag3.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>3</MONTH></DATE><COMMENT>It is better to throw an exception that to return a null pointer in case of an error: developers using your code will less likely to accidentally forget to check the error condition.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Diagnosing Java code: The Double Descent bug pattern</T><ST>Beat recursive class-casting conceptual errors at the start</ST><A>https://www.ibm.com/developerworks/java/library/j-diag4</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>4</MONTH></DATE><COMMENT>In a recursive structure of objects of different classes (themselves forming a hierarchy), replace the use of casts by methods implemented in each subclasses.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Liar View bug pattern</T><ST>Be your GUI's best friend and expose the Liar View</ST><A>https://www.ibm.com/developerworks/java/library/j-diag5.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><COMMENT>It is better to perform unit tests by checking the view rather than the model.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Saboteur Data bug pattern</T><ST>Hidden data bombs may be the key to odd crashes</ST><A>https://www.ibm.com/developerworks/java/library/j-diag6.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>5</MONTH></DATE><COMMENT>The advice is obvious: check input data before storing or manipulating it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Broken Dispatch bug pattern</T><ST>Argument upcasting cures inaccurate method invocation</ST><A>https://www.ibm.com/developerworks/java/library/j-diag7.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>5</MONTH></DATE><COMMENT>I agree with the bug, but its analysis and the proposed solution are wrong: the issue here is that when using polymorphism, all the overloaded methods should have the same semantic, having a constructor accepting raw data and another construction performing parsing is a basic mistake in the class design, a factory should have been used for the parsing instead of the second constructor.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: Improve the performance of your Java code</T><ST>Tail-recursive transformations can speed up your apps, but not all JVMs can perform the task</ST><A>https://www.ibm.com/developerworks/java/library/j-diag8.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>5</MONTH></DATE><COMMENT>The advice is obvious: if you care about performance, use loops instead of recursions. The remainder of this article is not clear and has no interest.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Design</TITLE>
      <ITEM><ARTICLE><X><T>Double Dispatch in DDD</T><A>https://www.baeldung.com/ddd-double-dispatch</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Wojtyna</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>How to dispatch method calls depending on the receiver and argument types, but the example is too simple to prove the value of the pattern.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Functional programming</TITLE>
        <ITEM><ARTICLE><X status='dead'><T>Lisp and Java</T><A>http://www.onjava.com/pub/a/onjava/2004/03/24/lisp.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dan</FIRSTNAME><LASTNAME>Milstein</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The author seems to discover the notion of functors…</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='zombie'><T>Functional programming in the Java language</T><ST>Use closures and higher order functions to write modular Java code</ST><A>https://www.ibm.com/developerworks/java/library/j-fp/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abhijit</FIRSTNAME><LASTNAME>Belapurkar</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>7</MONTH><DAY>13</DAY></DATE><COMMENT>Yet another presentation of functors (here called closures).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Advanced Topics In Programming Languages: Closures For Java</T><A>https://www.youtube.com/watch?v=0zVizaCOhME</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>55</MINUTE><SECOND>5</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Gafter</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE><COMMENT>After explaining that closures do not really exist in current Java and why they would be useful, Gafter describes the current implementation proposition (planned to be integrated in Java 7) and gives some examples of using it.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>AOP</TITLE>
        <ITEM><ARTICLE><X status='zombie'><T>Improve modularity with aspect-oriented programming</T><ST>AspectJ brings AOP to the Java language</ST><A>https://www.ibm.com/developerworks/java/library/j-aspectj/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicholas</FIRSTNAME><LASTNAME>Lesiecki</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>1</MONTH><DAY>1</DAY></DATE><COMMENT>A presentation of AspectJ.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='zombie'><T>Use AOP to maintain legacy Java applications</T><ST>Techniques for dealing with complex and unfamiliar Java code</ST><A>https://www.ibm.com/developerworks/java/library/j-aopsc2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abhijit</FIRSTNAME><LASTNAME>Belapurkar</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>3</MONTH><DAY>9</DAY></DATE><COMMENT>The author explains how to use AOP to find where is called a given interface, to detect dead code, to test exception handling, to patch code… But this is only a poor man solution, it is better and faster to use the proper tools to analyze code.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Dependency injection</TITLE>
        <ITEM><ARTICLE><X><T>Dependency injection with Guice</T><ST>Testable code with less boilerplate</ST><A>https://www.ibm.com/developerworks/java/library/j-guice.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicholas</FIRSTNAME><LASTNAME>Lesiecki</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>12</MONTH><DAY>9</DAY></DATE><COMMENT>A presentation of Guice, but this one is probably too fast and the examples are too artificial to be really clear.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Google I/O 2009 - Big Modular Java with Guice</T><A>https://www.youtube.com/watch?v=hBVJbzAagfs</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>11</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dhanji</FIRSTNAME><MIDDLENAME>R.</MIDDLENAME><LASTNAME>Prasanna</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Jesse</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>6</MONTH><DAY>3</DAY></DATE><COMMENT>A presentation of Guice: dependency injection (construtor, method, field), scopes (application, session, request), GWT/GIN and AOP.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Guide to Google Guice</T><A>https://www.baeldung.com/guice</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE><COMMENT>A short overview of Guice.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Libraries</TITLE>
      <ITEM><ARTICLE><X><T>Java FTP client libraries reviewed</T><A>http://www.javaworld.com/javaworld/jw-04-2003/jw-0404-ftp.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jean-Pierre</FIRSTNAME><LASTNAME>Norguet</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>A benchmark of some FTP libraries and the issues of this protocol.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Build better Web applications with Google Sitebricks</T><ST>Create a sample Java Web application using Maven, Sitebricks, and Guice</ST><A>https://www.ibm.com/developerworks/web/library/wa-sitebricks/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Galpin</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>A presentation of Sitebricks being used with Maven and Guice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Web Swinging</T><A>http://today.java.net/pub/a/today/2006/10/11/web-swinging.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Bair</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>10</MONTH><DAY>12</DAY></DATE><COMMENT>A presentation of SwingX-WS which can be used to generate HTTP requests and parse the answers by using a high level API.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>SMS-Powered Applications</T><A>http://www.onjava.com/pub/a/onjava/2004/06/09/sms.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dejan</FIRSTNAME><LASTNAME>Bosanac</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>A good introduction of the SMPP API used to send and receive SMSes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Generate PDF files from Java applications dynamically</T><ST>A step-by-step guide to iText, an open source library that makes PDF creation easy</ST><A>https://www.ibm.com/developerworks/opensource/library/os-javapdf/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Amit</FIRSTNAME><LASTNAME>Tuli</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>26</DAY></DATE><COMMENT>A short introduction to iText.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality ='-1'><T>Generating business documents using JasperReports with WebSphere</T><ST>Introduction to the Java API for JasperReports</ST><A>https://www.ibm.com/developerworks/websphere/library/techarticles/0908_funk/0908_funk.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Karoline</FIRSTNAME><LASTNAME>Funk</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>8</MONTH><DAY>19</DAY></DATE><COMMENT>This presentation of JasperReports is not very clear.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Jakarta Commons</TITLE>
        <ITEM><ARTICLE><X status='dead'><T>Using the Jakarta Commons, Part 1</T><A>http://www.onjava.com/pub/a/onjava/2003/06/25/commons.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vikram</FIRSTNAME><LASTNAME>Goyal</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>25</DAY></DATE><COMMENT>A presentation of Command Line Interface, Discovery, Lang, Collections, FileUpload, HTTPClient and Net.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>Using the Jakarta Commons, Part 2</T><A>http://www.onjava.com/pub/a/onjava/2003/07/09/commons.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vikram</FIRSTNAME><LASTNAME>Goyal</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>A presentation of Codec, Modeler, Betwist, Digester, Jelly and JXPath.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>Using the Jakarta Commons, Part 3</T><A>http://www.onjava.com/pub/a/onjava/2003/07/23/commons.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vikram</FIRSTNAME><LASTNAME>Goyal</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>A presentation of BeanUtils, Logging, Pool and Validator.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JNA</TITLE>
        <ITEM><ARTICLE><X><T>JNA: Reading Windows Event Log entries in Java</T><A>http://code.dblock.org/2010/09/30/jna-reading-windows-event-log-entries-in-java.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Daniel</FIRSTNAME><LASTNAME>Doubrovkine</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH><DAY>30</DAY></DATE><COMMENT>A description of <CODEROUTINE>EventLogIterator</CODEROUTINE> implementation to read the Windows event log.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>JNA with Maven Quickstart</T><A>https://www.heatonresearch.com/2018/10/02/jna-quickstart.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jeff</FIRSTNAME><LASTNAME>Heaton</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>10</MONTH><DAY>2</DAY></DATE><COMMENT>A simple example of using JNA with Maven.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Spring</TITLE>
        <ITEM><ARTICLE><X><T>What's new in Spring Framework 5</T><ST>How Spring 5 leverages Java 8’s functional syntax and a new, reactive programming model</ST><A>https://developer.ibm.com/tutorials/j-whats-new-in-spring-framework-5-theedom/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Lombok</TITLE>
        <ITEM><ARTICLE><X status='dead'><T>Eliminate Java verbosity the easy way</T><A>https://www.ibm.com/developerworks/java/library/os-lombok/index.html</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Carey</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>An introduction to Lombok, a utility that generates <CODEROUTINE>toString()</CODEROUTINE>, <CODEROUTINE>equals()</CODEROUTINE>, <CODEROUTINE>hashCode()</CODEROUTINE>, getters, setters, synchronization, exception handling…</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Using Lombok’s @Getter for Boolean Fields</T><A>https://www.baeldung.com/lombok-getter-boolean</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>16</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>POI</TITLE>
        <ITEM><ARTICLE><X><T>Read, recycle, and reuse: Reporting made easy with Excel, XML, and Java technologies, Part 1</T><ST>Read Excel files and write them to new files using Java and XML technologies</ST><A>https://www.ibm.com/developerworks/java/library/x-jxmlexl/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaene</FIRSTNAME><MIDDLENAME>M</MIDDLENAME><LASTNAME>Siders</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>After listing some Java libraries able to read/write Excel files, the author gives an example on using Apache's POI to parse an Excel file.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Read, recycle, and reuse: Reporting made easy with Excel, XML, and Java technologies, Part 2</T><ST>Convert between XML and Excel reporting formats</ST><A>https://www.ibm.com/developerworks/java/library/x-jxmlexl2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaene</FIRSTNAME><MIDDLENAME>M</MIDDLENAME><LASTNAME>Siders</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>The example continues, using XOM to write an XML file and POI to write an Excel file correctly formatted.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Hadoop</TITLE>
        <ITEM><ARTICLE><X status='zombie'><T>Business intelligence on the cheap with Apache Hadoop and Dojo, Part 1: Crunch your existing data using Apache Hadoop</T><ST>Feed a web-based reporting application</ST><A>https://www.ibm.com/developerworks/library/wa-dojohadoop1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Galpin</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>17</DAY></DATE><COMMENT>How to use Hadoop to map, reduce and format the data.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='zombie'><T>Business intelligence on the cheap with Apache Hadoop and Dojo, Part 2: Create eye-catching, interactive reports using the Dojo toolkit</T><ST>Take advantage of Dojo charts</ST><A>https://www.ibm.com/developerworks/library/wa-dojohadoop2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Galpin</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>31</DAY></DATE><COMMENT>Using Dojo to interactivley display the data prepared by Hadoop.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Struts</TITLE>
        <ITEM><ARTICLE><X quality='-1'><T>Struts</T><A>http://wpetrus.developpez.com/java/struts/</A><L>fr</L><F>HTML</F></X><AUTHOR><GIVENNAME>Metoss</GIVENNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>This presentation of Struts is not clear.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Eclipse Collections</TITLE>
        <ITEM><ARTICLE><X><T>Nine Features in Eclipse Collections 9.0</T><ST>CountBy, DistinctBy, Cartesian Product for primitive collections… and more.</ST><A>https://medium.com/@donraab/nine-features-in-eclipse-collections-9-0-a2ca97dfdf74</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Donald</FIRSTNAME><LASTNAME>Raab</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>14</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Code Duplication</T><ST>Duplicate code makes me itch, until I scratch it away.</ST><A>https://medium.com/@donraab/code-duplication-1e1f759a7fe3</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Donald</FIRSTNAME><LASTNAME>Raab</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>This is not about code duplication, but about presenting some patterns of collection initialisation, filtering and content short-circuit testing.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>MicroProfile</TITLE>
        <ITEM><ARTICLE><X><T>5 things you didn't know about ... MicroProfile 1.3</T><ST>Discover five new APIs in Eclipse MicroProfile 1.3</ST><A>https://developer.ibm.com/articles/j-5things18/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>A short presentation of MicroProfile and the new features available in 1.3.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>JAR</TITLE>
      <ITEM><ARTICLE><X><T>JAR files revealed</T><ST>Explore the power of the JAR file format</ST><A>http://www.siongboon.com/projects/2009-06-28%20Java%20and%20Eclipse/2_java_code_example/jar-%20jar%20files%20revealed.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Pagadala</FIRSTNAME><MIDDLENAME>J.</MIDDLENAME><LASTNAME>Suresh</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Palaniappan</FIRSTNAME><LASTNAME>Thiagarajan</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE><COMMENT>An overview of JAR capabilities: compression, executable JAR, sealing, extension mechanism, signing…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about … JARs</T><ST>A Java Archive is more than just a bundle of classes</ST><A>https://www.ibm.com/developerworks/java/library/j-5things6.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>Defining the main class, setting the classpath, storing JARs in <CODEROUTINE>lib/ext</CODEROUTINE>, classpath wildcard, and storing auxiliary files in the JAR.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Interaction with the system</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Taming Tiger: Get environment variables and invoke subprocesses</T><ST>When deprecated doesn't mean forever</ST><A>https://www.ibm.com/developerworks/java/library/j-tiger09304.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>9</MONTH><DAY>30</DAY></DATE><COMMENT>The <CODEROUTINE>System.getenv()</CODEROUTINE> method and the <CODEROUTINE>ProcessBuilder</CODEROUTINE> class.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>From Runtime.exec() to ProcessBuilder</T><A>http://www.java-tips.org/java-se-tips/java.util/from-runtime.exec-to-processbuilder.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>2005</YEAR></DATE><COMMENT>Using <CODEROUTINE>ProcessBuilder</CODEROUTINE> to fork a process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>5 things you didn't know about … the Java Scripting API</T><ST>An easier way to do scripting on the Java platform</ST><A>https://www.ibm.com/developerworks/java/library/j-5things9.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>Using <CODEROUTINE>jrunscript</CODEROUTINE> and <CODEROUTINE>ScriptEngine</CODEROUTINE> to launch scripts, bind objects to them, and compile them.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Databases</TITLE>
      <ITEM><ARTICLE><X><T>Advanced DAO programming</T><ST>Learn techniques for building better DAOs</ST><A>https://www.ibm.com/developerworks/library/j-dao</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sean</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Sullivan</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>10</MONTH><DAY>7</DAY></DATE><COMMENT>Some advice for implementing the Data Access Object design pattern: handling the transaction demarcations inside the DAO or leaving the client to handle them, using JDBC vs JTA, logging and exception handling.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about … Java Database Connectivity</T><ST>Update your relationship to the JDBC API</ST><A>https://developer.ibm.com/articles/j-5things10/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>10</DAY></DATE><COMMENT>Getting the list of scalar functions, scrollable and updateable <CODEROUTINE>ResultSet</CODEROUTINE>s, <CODEROUTINE>RowSet</CODEROUTINE>s, and batch updates.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Develop Spring Redis applications</T><ST>Build Spring-based applications with Redis as the datastore</ST><A>https://www.ibm.com/developerworks/library/os-springredis/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shekhar</FIRSTNAME><LASTNAME>Gulati</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>21</DAY></DATE><COMMENT>A presentation of Redis and Spring Java Redis.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Servlets</TITLE>
      <ITEM><ARTICLE><X><T>Java theory and practice: Are all stateful Web applications broken?</T><ST>HttpSession and friends are trickier than they look</ST><A>https://www.ibm.com/developerworks/library/j-jtp09238.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>9</MONTH><DAY>23</DAY></DATE><COMMENT>How to properly use <CODEROUTINE>ServletContext</CODEROUTINE> and <CODEROUTINE>HttpSession</CODEROUTINE> to avoid race conditions.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Annotations</TITLE>
      <ITEM><ARTICLE><X><T>Getting started with JML</T><ST>Improve your Java programs with JML annotation</ST><A>https://moodle-arquivo.ciencias.ulisboa.pt/1415/pluginfile.php/99900/mod_page/content/9/doc/j-jml-pdf.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Joe</FIRSTNAME><LASTNAME>Verzulli</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>18</DAY></DATE><COMMENT>A presentation of JML: an assertion mechanism.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Declarative Programming in Java</T><A>https://itblackbelt.wordpress.com/2006/05/18/declarative-programming-in-java-by-narayanan-jayaratchagan/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Narayanan</FIRSTNAME><LASTNAME>Jayaratchagan</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>A good introduction to Java annotations.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Annotations in Tiger, Part 1: Add metadata to Java code</T><ST>How to use Java 5's built-in annotations</ST><A>https://www.ibm.com/developerworks/library/j-annotate1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>9</MONTH><DAY>2</DAY></DATE><COMMENT>Using <CODEROUTINE>@Override</CODEROUTINE>, <CODEROUTINE>@Deprecated</CODEROUTINE> and <CODEROUTINE>@SuppressWarings</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='zombie'><T>Annotations in Tiger, Part 2: Custom annotations</T><ST>Write your own annotations in Java 5</ST><A>https://www.ibm.com/developerworks/library/j-annotate2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>9</MONTH><DAY>2</DAY></DATE><COMMENT>How to define your own annotation and annotate them with <CODEROUTINE>@Target</CODEROUTINE>, <CODEROUTINE>@Retention</CODEROUTINE>, <CODEROUTINE>@Documented</CODEROUTINE> and <CODEROUTINE>@Inherited</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Bridging the Gap: J2SE 5.0 Annotations</T><A>http://www.onjava.com/pub/a/onjava/2004/10/06/anno1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kyle</FIRSTNAME><LASTNAME>Downey</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>6</DAY></DATE><COMMENT>Yet another presentation of the annotations, not the best one, but the author describes here the other existing annotation mechanisms: XDoclet, Common Attributes, JBoss, SGen and P.Anno.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Advanced Topics In Programming Languages: JSR-305: Java annotations for software defect detection</T><A>https://www.youtube.com/watch?v=J2fgb8nWUo8</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>3</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Pugh</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH><DAY>8</DAY></DATE><COMMENT>A proposition of an annotation mechanism that the developer could use to provide hints to static analyzers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>The Open Road: javax.annotation</T><A>http://today.java.net/article/2008/09/08/open-road-javaxannotation</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>9</DAY></DATE><COMMENT>A description of the JSR 305 annotations.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Explore Annotations in Java 8</T><ST>Explore the evolution of annotations in Java 8 and how they are being used today!</ST><A>https://dzone.com/articles/explore-annotations-in-java-8</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Niamul</FIRSTNAME><LASTNAME>Sanjavi</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>A not-so-clear summary of annotations.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Javadoc</TITLE>
      <ITEM><ARTICLE><X><T>Java theory and practice: I have to document THAT?</T><ST>Integrated documentation a la Javadoc is both a benefit and a burden</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp0821.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH><DAY>1</DAY></DATE><COMMENT>A checklist of what should be documented.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java EE</TITLE>
      <ITEM><ARTICLE><X><T>What's new in Java EE 8</T><ST>A first look at new APIs and features for Java security, JSON binding and processing, HTTP/2, and more</ST><A>https://developer.ibm.com/articles/j-whats-new-in-javaee-8/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Get started with the JSON Binding API</TITLE>
        <ITEM><ARTICLE><X><T>The JSON Binding API in a nutshell</T><ST>Get started with JSON-B's default features and custom annotations, runtime configurations, and more</ST><A>https://www.ibm.com/developerworks/library/j-javaee8-json-binding-1/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>10</DAY></DATE><COMMENT>An overview of the API: the handling of the different types, the default mapping and the different ways to customize the mapping (annotations, adapters and serializers/deserializers).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Default mapping with JSON-B</T><ST>Everyday serialization and deserialization with the JSON Binding API</ST><A>https://www.ibm.com/developerworks/library/j-javaee8-json-binding-2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>18</DAY></DATE><COMMENT>A detailed description of the default mapping.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Custom binding with JSON-B</T><ST>Customize JSON binding with annotations and runtime configuration</ST><A>https://www.ibm.com/developerworks/library/j-javaee8-json-binding-3/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>21</DAY></DATE><COMMENT>A detailed description of customizing the mapping.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Is it time for a JSON binding standard?</T><ST>Comparing Gson, Jackson, and JSON-B highlights inconsistencies in basic features and behavior</ST><A>https://www.ibm.com/developerworks/library/j-javaee8-json-binding-4/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>15</DAY></DATE><COMMENT>The subtitle says all.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Tools</TITLE>
      <ITEM><ARTICLE><X><T>Using JConsole to Monitor Applications</T><A>http://www.oracle.com/technetwork/articles/java/jconsole-1564139.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mandy</FIRSTNAME><LASTNAME>Chung</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>12</MONTH></DATE><COMMENT>An overview of JConsole.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java postmortem diagnostics, Part 1: Introduction to JSR 326 and Apache Kato</T><ST>Learn how the Apache Kato project can help you analyze the causes of JVM failure</ST><A>https://www.ibm.com/developerworks/java/library/j-kato.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Adam</FIRSTNAME><LASTNAME>Pilkington</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>5</MONTH><DAY>5</DAY></DATE><COMMENT>A high level introduction to post-mortem analysis.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Maven</TITLE>
      <ITEM><ARTICLE><X><T>5 things you didn't know about … Apache Maven</T><ST>Tips for managing the project life cycle with Maven</ST><A>https://www.ibm.com/developerworks/java/library/j-5things13/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steven</FIRSTNAME><LASTNAME>Haines</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>5</DAY></DATE><COMMENT>Defining an executable JAR, customizing MANIFEST.MF, dumping the dependency tree, using profiles, and writing a plug-in.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about ... Apache Maven plugins</T><ST>Tips for mastering modern Maven plugins</ST><A>https://www.ibm.com/developerworks/library/j-5things16/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Theedom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>11</DAY></DATE><COMMENT>Signing a JAR/WAR, deploying in a container, installing a JAR from a local directory, storing the build artifacts on GitHub, identifying unused dependencies, purging the local repository, adding a timestamp, and printing Maven property values.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Migrate Maven Projects to Java 11</T><A>https://winterbe.com/posts/2018/08/29/migrate-maven-projects-to-java-11-jigsaw/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Benjamin</FIRSTNAME><LASTNAME>Winterberg</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>8</MONTH><DAY>29</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Puzzles</TITLE>
      <ITEM><ARTICLE><X><T>Java Puzzlers Episode VI: The Phantom-Reference Menace, Attack of the Clone, &amp; Revenge of the Shift</T><A>https://www.youtube.com/watch?v=wDN_EYUvUq0</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>13</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Joshua</FIRSTNAME><LASTNAME>Bloch</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Pugh</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>Eight Java puzzles.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How to Find Missing Number on Integer Array of 1 to 100 - BitSet Example</T><A>https://javarevisited.blogspot.com/2014/11/how-to-find-missing-number-on-integer-array-java.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Javin</FIRSTNAME><LASTNAME>Paul</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>28</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Non-Volatile Memory and Java</TITLE>
      <ITEM><ARTICLE><X><T>Non-Volatile Memory and Java</T><A>https://medium.com/@mwolczko/non-volatile-memory-and-java-7ba80f1e730c</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><LASTNAME>Wolczko</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>12</DAY></DATE><COMMENT>A description of Intel’s Optane, a Non-Volatile DIMM.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Non-Volatile Memory and Java: Part 2</T><A>https://medium.com/@mwolczko/non-volatile-memory-and-java-part-2-c15954c04e11</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><LASTNAME>Wolczko</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Bridge</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>19</DAY></DATE><COMMENT>How the software will handle NVRAM and the consistency problem that another thread may see data not yet persisted, may persist some other data, and hence we would get inconsistent persisted data in case of a power failure.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Non-Volatile Memory and Java: Part 3</T><A>https://medium.com/@mwolczko/non-volatile-memory-and-java-part-3-ebe305ef4bc4</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><LASTNAME>Wolczko</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>26</DAY></DATE><COMMENT>The impact of NVRAM on software: handling hardware errors, the fact that restarting the application will no more be the simple solution to solve a problem since the saved data may be incorrect…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Non-Volatile Memory and Java: Part 4</T><A>https://medium.com/@mwolczko/non-volatile-memory-and-java-part-4-17f7a7f78f1e</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><LASTNAME>Wolczko</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>Some problems with how Java could exploit NVRAM, in particular the problem of type evolution.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>