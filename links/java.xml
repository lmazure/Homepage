<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Java</TITLE>
<PATH>links/java.xml</PATH>
<DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>12</DAY></DATE>
<CONTENT>

<LLIST>
  <ITEM><SLIST>
    <ITEM><X quality="1"><T>Oracle</T><A>http://www.oracle.com/technetwork/java/index.html</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><CLIST><TITLE>directories</TITLE>
      <ITEM><X status='obsolete'><T>Cetus</T><A>http://web.nchu.edu.tw/~jlu/cetus/oo_java.html</A><L>en</L><F>HTML</F></X>
       (<X status='obsolete'><T>M</T><A>http://www.objenv.com/cetus/oo_java.html</A><L>en</L><F>HTML</F></X>)</ITEM>
      <ITEM><X><T>Open Directory</T><A>http://dmoz.org/Computers/Programming/Languages/Java/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>Java Lobby</T><A>http://www.javalobby.org/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><CLIST><TITLE>information</TITLE>
      <ITEM><X><T>JCP</T><A>http://www.jcp.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>developperWorks</T><A>http://www.ibm.com/developerworks/java/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>ONJava</T><A>http://www.onjava.com/</A><L>en</L><F>HTML</F><FEED><A>http://www.oreillynet.com/pub/feed/7?format=rss2</A><F>RSS2</F></FEED></X></ITEM>
      <ITEM><X><T>developper.com</T><A>http://www.developer.com/java/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Example Depot</T><A>http://javaalmanac.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>java.net</T><A>http://www.java.net/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>freeware</TITLE>
      <ITEM><X status='obsolete'><T>Open Source Java Directory</T><A>http://www.onjava.com/pub/q/java_os_directory</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X status='obsolete'><T>Kaffe</T><A>https://github.com/kaffe/kaffe</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>archive</T><A>http://www.oracle.com/technetwork/java/archive-139210.html</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><CLIST><TITLE>JDK docs</TITLE>
      <ITEM><X><T>1.3</T><A>http://docs.oracle.com/javase/3/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>1.4</T><A>http://docs.oracle.com/javase/4/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>1.5</T><A>http://docs.oracle.com/javase/5/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>1.6</T><A>http://docs.oracle.com/javase/6/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>1.7</T><A>http://docs.oracle.com/javase/7/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>1.8</T><A>http://docs.oracle.com/javase/8/docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE><ANCHOR>javadoc</ANCHOR><X><T>javadoc</T><A>http://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html</A><L>en</L><F>HTML</F></X></TITLE>
      <ITEM><X><T>FAQ</T><A>http://www.oracle.com/technetwork/java/javase/downloads/index-136934.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>personal notes</T><A>../notes/javadoc.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>heapdump analyzers</TITLE>
      <ITEM><X quality='1'><T>Memory Analyzer (MAT)</T><A>http://www.eclipse.org/mat</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>VisualVM</T><A>http://visualvm.java.net</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>HeapAnalyzer</T><A>http://www.alphaworks.ibm.com/tech/heapanalyzer</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>jhat</T><A>http://docs.oracle.com/javase/6/docs/technotes/tools/share/jhat.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>obfuscators</TITLE>
      <ITEM><X><T>Jshrink</T><A>http://www.e-t.com/jshrink.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>FAQs</TITLE>
      <ITEM><X><T>Angelika Langer's Java Generics FAQs</T><A>http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>GNU Classpath</T><A>http://www.gnu.org/software/classpath/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Java Performance Tuning</T><A>http://www.JavaPerformanceTuning.com/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Java Cookbook Recipe of the Day</T><A>http://www.onjava.com/onjava/javacook/solution.csp</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><CLIST><TITLE>libraries</TITLE>
      <ITEM><X><T>Common Collections Library</T><A>http://commons.apache.org/collections/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>SwingLabs</T><A>http://java.net/projects/swinglabs</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Guava</T><A>http://code.google.com/p/guava-libraries/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>ND4J</T><A>http://nd4j.org</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>books and 'zines</TITLE>
      <ITEM><X><T>JavaWorld</T><A>http://www.javaworld.com/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE><ANCHOR>rules</ANCHOR>coding rules</TITLE>
      <ITEM><X><T>Doug Leas</T><A>http://g.oswego.edu/dl/html/javaCodingStd.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>AmbySoft</T><A>http://www.ambysoft.com/essays/javaCodingStandards.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Macadamian</T><A>http://www.literateprogramming.com/macadamian.pdf</A><L>en</L><F>PDF</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>test</TITLE>
      <ITEM><X><T>jtest</T><A>http://www.parasoft.com/jtest</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><X><T>FMJ</T><A>http://fmj-sf.net</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>personal notes</T><A>../notes/java.htm</A><L>en</L><F>HTML</F></X></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles</TITLE>
    <ITEM><ARTICLE><X quality='-1' status='dead'><T>2D animation with image-based paths</T><ST>Take the heavy coding out of fixed-object animation</ST><A>http://www.ibm.com/developerworks/java/library/j-animat/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Barry</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Feigenbaum</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Tom</FIRSTNAME><LASTNAME>Brunet</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>The paths of some sprites is recorded using some color encoding. Not a big deal&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Getting the Bugs Out: A Conversation With Bug Fixer Brian Harry</T><A>http://www.oracle.com/technetwork/articles/javase/harry-qa-137699.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Janice</FIRSTNAME><MIDDLENAME>J.</MIDDLENAME><LASTNAME>Heiss</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>4</MONTH></DATE><COMMENT>The interview of a guy who killed hundreds of bugs in the JDK.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Developing iPhone Applications using Java</T><A>https://www.youtube.com/watch?v=s8nMpi5-P-I</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Arno</FIRSTNAME><LASTNAME>Puder</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>14</DAY></DATE><COMMENT>The technical solution described here is too simplistic: the performance would be awful, you have to reimplement Cocoa in Java&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Approaches to Mocking</T><A>http://www.onjava.com/pub/a/onjava/2004/02/11/mocks.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Stewart</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH><DAY>2</DAY></DATE><COMMENT>An introduction on using mocks (aka stubs) in Java: static mocks, dynamic mocks, AOP.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java theory and practice: Coaxing J2EE out of the container</T><ST>Projects like Somnifugi JMS blur the boundary between J2EE and J2SE</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp04204.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The stand alone implementation of some J2EE components (JMS, JNDI) and using JMX.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java Puzzlers Episode VI: The Phantom-Reference Menace, Attack of the Clone, &amp; Revenge of the Shift</T><A>https://www.youtube.com/watch?v=wDN_EYUvUq0</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>13</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Joshua</FIRSTNAME><LASTNAME>Bloch</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Pugh</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>Eight Java puzzles.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Project PlaySIM: Experimenting with Java Card&#x2122; 3 System Prog</T><A>https://www.youtube.com/watch?v=aCM9KN2pzQE</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>3</MINUTE><SECOND>23</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Arseneau</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Fritjof</FIRSTNAME><LASTNAME>Engelhardtsen</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>6</MONTH><DAY>5</DAY></DATE><COMMENT>PlaySIM is a hardware prototyping platform: a daughter board for the SunSPOT platform is used to emulate a Java Card 3 SIM card.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; everyday Java tools</T><ST>Java tools for everyday things, like parsing, timing, and sound</ST><A>http://www.ibm.com/developerworks/java/library/j-5things12/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH><DAY>14</DAY></DATE><COMMENT>Random stuff: StAX, ServiceLoader, Scanner, Timer, and JavaSound.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; Apache Maven</T><ST>Tips for managing the project life cycle with Maven</ST><A>https://www.ibm.com/developerworks/java/library/j-5things13/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steven</FIRSTNAME><LASTNAME>Haines</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>5</DAY></DATE><COMMENT>Defining an executable JAR, customizing MANIFEST.MF, dumping the dependency tree, using profiles, and writing a plug-in.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Have Java's Security Issues Gotten out of Hand</T><A>http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=06383153</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Lee</FIRSTNAME><LASTNAME>Garber</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>12</MONTH></DATE><COMMENT>Vulnerabilities are found over and over again in Oracle's JVM.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Transparent network acceleration for Java-based workloads in the cloud</T><ST>Introducing the Java Sockets over RDMA library</ST><A>http://www.ibm.com/developerworks/java/library/j-transparentaccel/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sivasakthi</FIRSTNAME><LASTNAME>Thirugnanapandi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Sreedhar</FIRSTNAME><LASTNAME>Kodali</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Neil</FIRSTNAME><LASTNAME>Richards</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Tim</FIRSTNAME><LASTNAME>Ellison</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Xiaoqiao</FIRSTNAME><LASTNAME>Meng</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Indrajit</FIRSTNAME><LASTNAME>Poddar</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of JSOR, how to use it, and how much it improves socket performance.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Build an application using microservices and CQRS</T><ST>Maximize the performance and scalability of your microservices-based apps</ST><A>http://www.ibm.com/developerworks/cloud/library/cl-build-app-using-microservices-and-cqrs-trs/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Felicia</FIRSTNAME><LASTNAME>Tucci</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>Using Spring and Axon to implement an application having a CQRS architecure.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Deprecation of Object.finalize()</T><A>https://stuartmarks.wordpress.com/2017/04/17/deprecation-of-object-finalize/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stuart</FIRSTNAME><LASTNAME>Marks</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>17</DAY></DATE><COMMENT><CODEROUTINE>Object.finalize()</CODEROUTINE> is obsoleted, but not planned for removal yet.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>How to Convert CSV to JSON in Java</T><ST>Convert CSV to JSON using Jackson. Use a POJO for conversion or a List &amp; Map for intermediate storage.</ST><A>http://www.novixys.com/blog/convert-csv-json-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jay</FIRSTNAME><LASTNAME>Sridhar</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>2</MONTH><DAY>27</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>The Factory Pattern Using Lambda Expressions in Java 8</T><ST>The factory pattern is one of the best known patterns in Java. If you're using lambda expressions, you can use those to implement the pattern, though beware scaling.</ST><A>https://dzone.com/articles/factory-pattern-using-lambda-expression-in-java-8</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Monika</FIRSTNAME><LASTNAME>Goel</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>1</DAY></DATE><COMMENT>A simplisitic usage of Lambdas.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The State of Debugging in Java</T><ST>Debugging has come a long way from the jdb days. Here, we cover the variety of Java debuggers out there and some common practices devs use.</ST><A>https://dzone.com/articles/the-state-of-debugging-in-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>A quick presentation of the tools that can be used to debug a system in production: <CODEROUTINE>jps</CODEROUTINE>, <CODEROUTINE>jinfo</CODEROUTINE>, <CODEROUTINE>jcmd</CODEROUTINE>, <CODEROUTINE>jmap</CODEROUTINE>, <CODEROUTINE>jhat</CODEROUTINE>, <CODEROUTINE>jstack</CODEROUTINE>, <CODEROUTINE>jstat</CODEROUTINE>, <CODEROUTINE>jdb</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Tutorials</TITLE>
      <ITEM><ARTICLE><X><T>Speaking the Java language without an accent</T><ST>Native fluency for nonnative programmers</ST><A>http://www.ibm.com/developerworks/library/j-noaccent/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>1</MONTH><DAY>12</DAY></DATE><COMMENT>Some coding habits that C/C++ developers should modify in order to code in Java as everyone else.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Books</TITLE>
      <ITEM><ARTICLE><X><T>Thinking in Java</T><A>http://www.mindview.net/Books/TIJ/</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Bruce</FIRSTNAME><LASTNAME>Eckel</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>11</MONTH><DAY>20</DAY></DATE><COMMENT>A free book to learn Java</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java Cookbook</T><A>http://safari.oreilly.com/?XmlId=0-596-00170-3</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ian</FIRSTNAME><LASTNAME>Darwin</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>6</MONTH></DATE><COMMENT>A recipe book.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Coding</TITLE>
      <ITEM><ARTICLE><X><T>Seven Low-Cost Ways to Improve Legacy Code</T><A>http://www.onjava.com/pub/a/onjava/2004/04/28/hardcorejava.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><LASTNAME>Simmons</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>28</DAY></DATE><COMMENT>Some simple Java coding rules to improve code maintenance.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Performance</TITLE>
      <ITEM><ARTICLE><X status="dead"><T>The Java HotSpot Performance Engine: An In-Depth Look</T><A>http://developer.java.sun.com/developer/technicalArticles/Networking/HotSpot/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Meloan</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>6</MONTH></DATE><COMMENT>This describes the new (at least, when the article was written&#x2026;) technologies used by the HotSpot VM: adaptative compilation, inlining, garbage collection&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java optimization techniques</T><ST>A practical guide for squeezing every drop of performance out of your Java apps</ST><A>http://dsc.ufcg.edu.br/~jacques/cursos/2004.2/gr/recursos/j-javaopt.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Erwin</FIRSTNAME><LASTNAME>Vervaet</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Maarten</FIRSTNAME><MIDDLENAME>De</MIDDLENAME><LASTNAME>Cock</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>6</MONTH></DATE><COMMENT>This is obvious, but too often forgotten: before implementing low levels optimization, first check that your algorithm is not stupid.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Urban performance legends</T><ST>Alligators in the garbage collector and other programming myths</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp04223/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>22</DAY></DATE><COMMENT>Some wrong ideas about JVM speed (synchronization and immutable classes are slow, final classes are fast) and some good general advice about performance.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Garbage collection and performance</T><ST>Hints, tips, and myths about writing garbage collection-friendly classes</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp01274/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>1</MONTH><DAY>27</DAY></DATE><COMMENT>Some old tricks to avoid the impact of garbage collection on performance have nowadays adverse effects.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Eye on performance: Micro performance benchmarking</T><ST>Byte offers a glimpse into application performance</ST><A>http://www.50001.com/language/javaside/lec/java_ibm/Eye%20on%20performance%20%B8%B6%C0%CC%C5%A9%B7%CE%20%C6%DB%C6%F7%B8%D5%BD%BA%20%BA%A5%C4%A1%B8%B6%C5%B7%20%28%BF%B5%B9%AE%29.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>Instead of performing oversimplified flawed performance tests, looking at the generated bytecodes can sometimes reveal the pointlessness of some Java code tuning.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Eye on performance: Tuning garbage collection in the HotSpot JVM</T><ST>Packing 100 megabytes of garbage into a 50 megabyte bag</ST><A>http://www.ibm.com/developerworks/java/library/j-perf06304/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>Tuning the garbage collector to lower its impact on performance.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Performance management</T><ST>do you have a plan? - Knowing when to optimize is more important than knowing how to optimize</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp03253.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>The usual advice: performance must be managed as part of the development process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; Java performance monitoring, Part 1</T><ST>Java performance profiling with JConsole and VisualVM</ST><A>http://www.ibm.com/developerworks/java/library/j-5things7.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>A very basic introduction to <CODEROUTINE>JConsole</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; Java performance monitoring, Part 2</T><ST>Java process monitoring with the JDK's built-in profilers</ST><A>http://www.ibm.com/developerworks/java/library/j-5things8.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>13</DAY></DATE><COMMENT><CODEROUTINE>jps</CODEROUTINE>, <CODEROUTINE>jstat</CODEROUTINE>, <CODEROUTINE>jstack</CODEROUTINE>, <CODEROUTINE>jmap</CODEROUTINE>, and <CODEROUTINE>jhat</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Faster problem solving in Java with heuristic search</T><ST>Learn about a Java implementation of a popular search algorithm for artificial intelligence</ST><A>http://www.ibm.com/developerworks/library/j-ai-search/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Matthew</FIRSTNAME><LASTNAME>Hatem</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Ethan</FIRSTNAME><LASTNAME>Burns</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Wheeler</FIRSTNAME><LASTNAME>Ruml</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>16</DAY></DATE><COMMENT>A description of A*, a heuristic search algorithm, in Java and its optimization by reducing memory consumption, using High Performance Primitive Collections, and recycling objects to avoid garbage collection.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Memory management</TITLE>
      <ITEM><ARTICLE><X><T>Java theory and practice: Whose object is it, anyway?</T><ST>Garbage collection reduces the need to track object ownership -- but it doesn't eliminate it</ST><A>http://www.ibm.com/developerworks/library/j-jtp06243/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>24</DAY></DATE><COMMENT>Use immutable objects or defensive copying, otherwise you will have to clearly document which classes own the objects to avoid tricky bugs.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Eye on performance: Referencing objects</T><ST>How you reference objects can seriously affect the garbage collector</ST><A>http://www.ibm.com/developerworks/java/library/j-perf08273.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jack</FIRSTNAME><LASTNAME>Shirazi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kirk</FIRSTNAME><LASTNAME>Pepperdine</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>8</MONTH><DAY>26</DAY></DATE><COMMENT>The authors explain how to fix unintentional object reference retention and that nulling reference is the wrong solution to a scoping problem.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: A brief history of garbage collection</T><ST>How does garbage collection work?</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp10283/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A short and clear description of the evolution of the garbage collection algorithms.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java theory and practice: Garbage collection in the HotSpot JVM</T><ST>Generational and concurrent garbage collection</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp11253/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>11</MONTH><DAY>25</DAY></DATE><COMMENT>The article describes the garbage collection algorithms implemented in 1.4 and what are their available tunuing parameters.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Thanks for the memory</T><ST>Understanding how the JVM uses native memory on Windows and Linux</ST><A>http://www.ibm.com/developerworks/java/library/j-nativememory-linux/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Hall</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>4</MONTH><DAY>21</DAY></DATE><COMMENT>After describing how the JVM is using native memory, Andrew Hall explains how to find what is eating it up and locating leaks.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>The Essence of Caching - Ehcache</T><A>https://www.youtube.com/watch?v=TszcAWgCXD0</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Greg</FIRSTNAME><LASTNAME>Luck</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>1</MONTH><DAY>24</DAY></DATE><COMMENT>Some general common information on caching and a presentation of Ehcache, an open source Java distributed cache.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>From Java code to Java heap</T><ST>Understanding and optimizing your application's memory usage</ST><A>http://www.ibm.com/developerworks/library/j-codetoheap/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Bailey</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>29</DAY></DATE><COMMENT>A detailed analysis of the memory used for storing an object, an array, or a collection.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>References</TITLE>
        <ITEM><ARTICLE><X><T>Java Tip 79: Interact with garbage collector to avoid memory leaks - Use reference objects to prevent memory leaks in applications built on the MVC pattern</T><A>http://www.javaworld.com/javaworld/javatips/jw-javatip79.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Raimond</FIRSTNAME><LASTNAME>Reichert</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>Using <CODEROUTINE>WeakReference</CODEROUTINE>s to record listeners and a <CODEROUTINE>ReferenceQueue</CODEROUTINE> to remove them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Guidelines for using the Java 2 reference classes</T><ST>Learn to effectively use SoftReference, WeakReference, and PhantomReference</ST><A>http://www.ibm.com/developerworks/java/library/j-refs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Haggar</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>An introduction to <CODEROUTINE>SoftReference</CODEROUTINE>, <CODEROUTINE>WeakReference</CODEROUTINE> and <CODEROUTINE>PhantomReference</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java theory and practice: Plugging memory leaks with weak references</T><ST>Weak references make it easy to express object lifecycle relationships</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp11225/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>11</MONTH><DAY>22</DAY></DATE><COMMENT>An introduction to <CODEROUTINE>WeakReference</CODEROUTINE> and to <CODEROUTINE>WeakHashMap</CODEROUTINE> to store metadata about objects only for as long as they are effectively used.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java theory and practice: Plugging memory leaks with soft references</T><ST>Soft references provide for quick-and-dirty caching</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp01246.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>Using <CODEROUTINE>SoftReference</CODEROUTINE>s to implement a simple cache whose memory will be reclaimed if the JVM needs memory.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Memory leaks</TITLE>
        <ITEM><ARTICLE><X status='dead'><T>Bitter Java - Chapter 6: Bitter Memories</T><A>http://jacques.dsc.ufcg.edu.br/cursos/map/recursos/BitterJava.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Bruce</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Tate</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>5</MONTH></DATE><COMMENT>An introduction to Java memory leaks (unintentional object retention) and how to find and fix them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Memory Leaks, Be Gone</T><A>http://www.oracle.com/technetwork/articles/entarch/memory-leaks-091917.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Staffan</FIRSTNAME><LASTNAME>Larsen</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>Some advertisement for the JRockit Memory Leak Detector.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>How to Fix Memory Leaks in Java</T><A>http://java.dzone.com/news/how-fix-memory-leaks-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Veljko</FIRSTNAME><LASTNAME>Krunic</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>3</MONTH><DAY>18</DAY></DATE><COMMENT>A good tutorial on how to analyze memory leaks.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>JVM</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Java shared classes</T><ST>Learn how to start your Java applications faster and with a smaller memory footprint</ST><A>http://www.ibm.com/developerworks/java/library/j-shared/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Lakshmi</FIRSTNAME><LASTNAME>Shankar</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Burns</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Roshan</FIRSTNAME><LASTNAME>Nichani</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE><COMMENT>Sharing classes between JVMs in order to reduce memory usage and startup time.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Taming Tiger: Virtual machine updates</T><ST>Changes designed to speed startup time and reduce memory requirements</ST><A>http://www.ibm.com/developerworks/library/j-tiger03175.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>3</MONTH><DAY>15</DAY></DATE><COMMENT>New command line options allow to handle JVM crashes, switching on Java Shared Archives and there are the usual garbage collector and thread scheduling changes&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Project Guest VM - A Java Platform implemented in Java and hosted on the Xen Hypervisor</T><A>https://www.youtube.com/watch?v=iHIaH12f2Ek</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mick</FIRSTNAME><LASTNAME>Jordan</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>Using Maxine VM, a virtual machine written in Java, directly on top of Xen in order to get rid of the OS layer.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; Command-line flags for the JVM</T><ST>Fine-tune JVM performance and the Java runtime</ST><A>http://www.ibm.com/developerworks/java/library/j-5things11/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>24</DAY></DATE><COMMENT>Some JVM flags: <CODEROUTINE>-XX:+DisableExplicitGC</CODEROUTINE>, <CODEROUTINE>-XX:+HeapDumpOnOutOfMemoryError</CODEROUTINE>, <CODEROUTINE>-Xbootclasspath</CODEROUTINE>, <CODEROUTINE>-verbose</CODEROUTINE>, and <CODEROUTINE>-X</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A JVM Does That?</T><A>https://www.youtube.com/watch?v=uL2D3qzHtqY</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>52</MINUTE><SECOND>38</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Cliff</FIRSTNAME><LASTNAME>Click</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>3</MONTH><DAY>29</DAY></DATE><COMMENT>The current status of JVMs: what works correctly, what does not work so correctly, and some suggestions of possible improvements.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Your next JVM: Panama, Valhalla, Metropolis by John Rose</T><A>https://www.youtube.com/watch?v=OMk5KoUIOy4</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>50</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>A wishlist for future JVMs: using Java instead of C++, fibers replacing threads, unification of classes and primitives&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>IBM's multitenancy</TITLE>
        <ITEM><ARTICLE><X><T>Introduction to Java multitenancy</T><ST>Learn about a new feature for cloud systems in the IBM Java 8 beta</ST><A>http://www.ibm.com/developerworks/library/j-multitenant-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Graeme</FIRSTNAME><LASTNAME>Johnson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Dawson</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>17</DAY></DATE><COMMENT>IBM completed in Java 8 JVM to support running isolated applications in a single JVM instance.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java multitenancy: Configuration options, tenant lifecycle, and isolation in action</T><ST>Dig deeper into the multitenancy implementation in the IBM SDK Java Technology Edition, Version 7 Release 1</ST><A>http://www.ibm.com/developerworks/library/j-multitenant-java2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gavin</FIRSTNAME><LASTNAME>Rolleston</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Dawson</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>8</MONTH><DAY>31</DAY></DATE><COMMENT>The <CODEROUTINE>java</CODEROUTINE> and <CODEROUTINE>javad</CODEROUTINE> command line options and some simple examples of using multitenancy.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Class loaders</TITLE>
      <ITEM><ARTICLE><X><T>Java programming dynamics, Part 1: Classes and class loading</T><ST>A look at classes and what goes on as they're loaded by a JVM</ST><A>http://www.ibm.com/developerworks/java/library/j-dyn0429/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>29</DAY></DATE><COMMENT>A presentation of the class loaders, but more theoretical than applicable.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Cracking Java byte-code encryption</T><ST>Why Java obfuscation schemes based on byte-code encryption won't work</ST><A>http://www.javaworld.com/javaworld/javaqa/2003-05/01-qa-0509-jcrypt.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vladimir</FIRSTNAME><LASTNAME>Roubtsov</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>The title says everything: just hack <CODEROUTINE>java.lang.ClassLoader.defineClass()</CODEROUTINE> in your JRE.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Bytecodes</TITLE>
      <ITEM><ARTICLE><X><T>Java programming dynamics, Part 4: Class transformation with Javassist</T><ST>Using Javassist to transform methods in bytecode</ST><A>http://www.ibm.com/developerworks/java/library/j-dyn0916.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>9</MONTH><DAY>16</DAY></DATE><COMMENT>After a short presentation of Javassist, the author gives an example of its use by patching methods to measure method execution timings.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java programming dynamics, Part 5: Transforming classes on-the-fly</T><ST>Learn how to modify classes as they're being loaded by Javassist</ST><A>http://www.ibm.com/developerworks/java/library/j-dyn0203.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH><DAY>3</DAY></DATE><COMMENT>A combination of byte code manipulation and class loading interception, in order to patch classes as they are loaded.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Using the ASM Toolkit for Bytecode Manipulation</T><A>http://www.onjava.com/pub/a/onjava/2004/10/06/asm1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugene</FIRSTNAME><LASTNAME>Kuleshov</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>6</DAY></DATE><COMMENT>A presentation of ASM, a toolkit to parse, modify and generate bytecodes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Create and Read J2SE 5.0 Annotations with the ASM Bytecode Toolkit</T><A>http://www.onjava.com/pub/a/onjava/2004/10/20/asm.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugene</FIRSTNAME><LASTNAME>Kuleshov</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>This toolkit also handles annotations, enabling management of Java 1.5 annotations with earlier JREs.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Obfuscation</TITLE>
        <ITEM><ARTICLE><X><T>The New Obfuscation</T><A>http://today.java.net/pub/a/today/2004/10/22/obfuscation.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Tyma</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>The interest of obfuscation and some obfuscating methods.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Decompilers</TITLE>
        <ITEM><ARTICLE><X><T>Java decompilers compared</T><A>http://www.javaworld.com/javaworld/jw-07-1997/jw-07-decompilers.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Dyer</LASTNAME></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>7</MONTH></DATE><COMMENT>A very basic comparison of DejaVu, Mocha and WingDis.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Applets</TITLE>
      <ITEM><ARTICLE><X><T>Applets Reloaded: the New Java Plug-In</T><A>https://www.youtube.com/watch?v=4wi9Q1x8j7E</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>52</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ken</FIRSTNAME><LASTNAME>Russell</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>8</MONTH><DAY>28</DAY></DATE><COMMENT>This presentation of the new applet plugin implementation in Java 1.6 contains more demonstrations than technical information.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Diagnosing Java Code: I don't know why I read this series since most of these articles are (in my personal opinion) not clear, misleading and/or of little interest. But, at least, they provide some material to thing about.</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Bug patterns: An introduction</T><ST>Diagnosing and correcting recurring bug types in your Java programs</ST><A>http://www.ibm.com/developerworks/java/library/j-diag1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>2</MONTH></DATE><COMMENT>Cut 'n paste code results into a program difficult to maintain, it is better to factorize the code</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Dangling Composite bug pattern</T><ST>Squash one of the most common causes of the null-pointer exception</ST><A>http://www.ibm.com/developerworks/java/library/j-diag2</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>3</MONTH></DATE><COMMENT>Use dedicated special classes to indicate base cases (e.g. an empty linked list) instead of a null pointer.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Null Flag bug pattern</T><ST>Avoid using null pointers as flags for exceptions</ST><A>http://www.ibm.com/developerworks/java/library/j-diag3.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>3</MONTH></DATE><COMMENT>It is better to throw an exception that to return a null pointer in case of an error: developers using your code will less likely to accidentally forget to check the error condition.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java code: The Double Descent bug pattern</T><ST>Beat recursive class-casting conceptual errors at the start</ST><A>http://www.ibm.com/developerworks/java/library/j-diag4</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>4</MONTH></DATE><COMMENT>In a recursive structure of objects of different classes (themselves forming a hierarchy), replace the use of casts by methods implemented in each subclasses.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Liar View bug pattern</T><ST>Be your GUI's best friend and expose the Liar View</ST><A>http://www.ibm.com/developerworks/java/library/j-diag5.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><COMMENT>It is better to perform unit tests by checking the view rather than the model.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Saboteur Data bug pattern</T><ST>Hidden data bombs may be the key to odd crashes</ST><A>http://www.ibm.com/developerworks/java/library/j-diag6.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>5</MONTH></DATE><COMMENT>The advice is obvious: check input data before storing or manipulating it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: The Broken Dispatch bug pattern</T><ST>Argument upcasting cures inaccurate method invocation</ST><A>http://www.ibm.com/developerworks/java/library/j-diag7.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>5</MONTH></DATE><COMMENT>I agree with the bug, but its analysis and the proposed solution are wrong: the issue here is that when using polymorphism, all the overloaded methods should have the same semantic, having a constructor accepting raw data and another construction performing parsing is a basic mistake in the class design, a factory should have been used for the parsing instead of the second constructor.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Diagnosing Java Code: Improve the performance of your Java code</T><ST>Tail-recursive transformations can speed up your apps, but not all JVMs can perform the task</ST><A>http://www.ibm.com/developerworks/java/library/j-diag8.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>5</MONTH></DATE><COMMENT>The advice is obvious: if you care about performance, use loops instead of recursions. The remainder of this article is not clear and has no interest.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Design</TITLE>
      <ITEM><BLIST><TITLE>Functional programming</TITLE>
        <ITEM><ARTICLE><X><T>Lisp and Java</T><A>http://www.onjava.com/pub/a/onjava/2004/03/24/lisp.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dan</FIRSTNAME><LASTNAME>Milstein</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The author seems to discover the notion of functors&#x2026;</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>Functional programming in the Java language</T><ST>Use closures and higher order functions to write modular Java code</ST><A>http://www.ibm.com/developerworks/java/library/j-fp/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abhijit</FIRSTNAME><LASTNAME>Belapurkar</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>7</MONTH><DAY>13</DAY></DATE><COMMENT>Yet another presentation of functors (here called closures).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Advanced Topics In Programming Languages: Closures For Java</T><A>https://www.youtube.com/watch?v=0zVizaCOhME</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>55</MINUTE><SECOND>5</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Gafter</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE><COMMENT>After explaining that closures do not really exist in current Java and why they would be useful, Gafter describes the current implementation proposition (planned to be integrated in Java 7) and gives some examples of using it.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>AOP</TITLE>
        <ITEM><ARTICLE><X><T>Improve modularity with aspect-oriented programming</T><ST>AspectJ brings AOP to the Java language</ST><A>http://www.ibm.com/developerworks/java/library/j-aspectj/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicholas</FIRSTNAME><LASTNAME>Lesiecki</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>1</MONTH><DAY>1</DAY></DATE><COMMENT>A presentation of AspectJ.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Use AOP to maintain legacy Java applications</T><ST>Techniques for dealing with complex and unfamiliar Java code</ST><A>http://www.ibm.com/developerworks/java/library/j-aopsc2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abhijit</FIRSTNAME><LASTNAME>Belapurkar</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>3</MONTH><DAY>9</DAY></DATE><COMMENT>The author explains how to use AOP to find where is called a given interface, to detect dead code, to test exception handling, to patch code&#x2026; But this is only a poor man solution, it is better and faster to use the proper tools to analyze code.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Dependency injection</TITLE>
        <ITEM><ARTICLE><X><T>Dependency injection with Guice</T><ST>Testable code with less boilerplate</ST><A>http://www.ibm.com/developerworks/java/library/j-guice.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicholas</FIRSTNAME><LASTNAME>Lesiecki</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>12</MONTH><DAY>9</DAY></DATE><COMMENT>A presentation of Guice, but this one is probably too fast and the examples are too artificial to be really clear.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Google I/O 2009 - Big Modular Java with Guice</T><A>https://www.youtube.com/watch?v=hBVJbzAagfs</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>58</MINUTE><SECOND>11</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dhanji</FIRSTNAME><MIDDLENAME>R.</MIDDLENAME><LASTNAME>Prasanna</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Jesse</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>6</MONTH><DAY>3</DAY></DATE><COMMENT>A presentation of Guice: dependency injection (construtor, method, field), scopes (application, session, request), GWT/GIN and AOP.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Libraries</TITLE>
      <ITEM><ARTICLE><X><T>Java FTP client libraries reviewed</T><A>http://www.javaworld.com/javaworld/jw-04-2003/jw-0404-ftp.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jean-Pierre</FIRSTNAME><LASTNAME>Norguet</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>A benchmark of some FTP libraries and the issues of this protocol.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Jakarta Commons</TITLE>
        <ITEM><ARTICLE><X><T>Using the Jakarta Commons, Part 1</T><A>http://www.onjava.com/pub/a/onjava/2003/06/25/commons.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vikram</FIRSTNAME><LASTNAME>Goyal</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>25</DAY></DATE><COMMENT>A presentation of Command Line Interface, Discovery, Lang, Collections, FileUpload, HTTPClient and Net.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Using the Jakarta Commons, Part 2</T><A>http://www.onjava.com/pub/a/onjava/2003/07/09/commons.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vikram</FIRSTNAME><LASTNAME>Goyal</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>A presentation of Codec, Modeler, Betwist, Digester, Jelly and JXPath.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Using the Jakarta Commons, Part 3</T><A>http://www.onjava.com/pub/a/onjava/2003/07/23/commons.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vikram</FIRSTNAME><LASTNAME>Goyal</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>A presentation of BeanUtils, Logging, Pool and Validator.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>POI</TITLE>
        <ITEM><ARTICLE><X><T>Read, recycle, and reuse: Reporting made easy with Excel, XML, and Java technologies, Part 1</T><ST>Read Excel files and write them to new files using Java and XML technologies</ST><A>http://www.ibm.com/developerworks/java/library/x-jxmlexl/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaene</FIRSTNAME><MIDDLENAME>M</MIDDLENAME><LASTNAME>Siders</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>After listing some Java libraries able to read/write Excel files, the author gives an example on using Apache's POI to parse an Excel file.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Read, recycle, and reuse: Reporting made easy with Excel, XML, and Java technologies, Part 2</T><ST>Convert between XML and Excel reporting formats</ST><A>http://www.ibm.com/developerworks/java/library/x-jxmlexl2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shaene</FIRSTNAME><MIDDLENAME>M</MIDDLENAME><LASTNAME>Siders</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>The example continues, using XOM to write an XML file and POI to write an Excel file correctly formatted.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Hadoop</TITLE>
        <ITEM><ARTICLE><X><T>Business intelligence on the cheap with Apache Hadoop and Dojo, Part 1: Crunch your existing data using Apache Hadoop</T><ST>Feed a web-based reporting application</ST><A>http://www.ibm.com/developerworks/library/wa-dojohadoop1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Galpin</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>17</DAY></DATE><COMMENT>How to use Hadoop to map, reduce and format the data.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Business intelligence on the cheap with Apache Hadoop and Dojo, Part 2: Create eye-catching, interactive reports using the Dojo toolkit</T><ST>Take advantage of Dojo charts</ST><A>http://www.ibm.com/developerworks/library/wa-dojohadoop2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Galpin</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>31</DAY></DATE><COMMENT>Using Dojo to interactivley display the data prepared by Hadoop.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><ARTICLE><X><T>Web Swinging</T><A>http://today.java.net/pub/a/today/2006/10/11/web-swinging.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Bair</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>10</MONTH><DAY>12</DAY></DATE><COMMENT>A presentation of SwingX-WS which can be used to generate HTTP requests and parse the answers by using a high level API.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>SMS-Powered Applications</T><A>http://www.onjava.com/pub/a/onjava/2004/06/09/sms.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dejan</FIRSTNAME><LASTNAME>Bosanac</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>A good introduction of the SMPP API used to send and receive SMSes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Generate PDF files from Java applications dynamically</T><ST>A step-by-step guide to iText, an open source library that makes PDF creation easy</ST><A>http://www.ibm.com/developerworks/opensource/library/os-javapdf/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Amit</FIRSTNAME><LASTNAME>Tuli</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>26</DAY></DATE><COMMENT>A short introduction to iText.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality ='-1'><T>Generating business documents using JasperReports with WebSphere</T><ST>Introduction to the Java API for JasperReports</ST><A>http://www.ibm.com/developerworks/websphere/library/techarticles/0908_funk/0908_funk.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Karoline</FIRSTNAME><LASTNAME>Funk</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>8</MONTH><DAY>19</DAY></DATE><COMMENT>This presentation of JasperReports is not very clear.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Struts</TITLE>
        <ITEM><ARTICLE><X quality='-1'><T>Struts</T><A>http://wpetrus.developpez.com/java/struts/</A><L>fr</L><F>HTML</F></X><AUTHOR><GIVENNAME>Metoss</GIVENNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>This presentation of Struts is not clear.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><ARTICLE><X><T>Build better Web applications with Google Sitebricks</T><ST>Create a sample Java Web application using Maven, Sitebricks, and Guice</ST><A>http://www.ibm.com/developerworks/web/library/wa-sitebricks/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Galpin</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>A presentation of Sitebricks being used with Maven and Guice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Eliminate Java verbosity the easy way</T><A>http://www.ibm.com/developerworks/java/library/os-lombok/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Carey</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>An introduction to Lombok, a utility that generates <CODEROUTINE>toString()</CODEROUTINE>, <CODEROUTINE>equals()</CODEROUTINE>, <CODEROUTINE>hashCode()</CODEROUTINE>, getters, setters, synchronization, exception handling&#x2026;</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>JAR</TITLE>
      <ITEM><ARTICLE><X><T>JAR files revealed</T><ST>Explore the power of the JAR file format</ST><A>http://www.ibm.com/developerworks/library/j-jar</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pagadala</FIRSTNAME><MIDDLENAME>J.</MIDDLENAME><LASTNAME>Suresh</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Palaniappan</FIRSTNAME><LASTNAME>Thiagarajan</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE><COMMENT>An overview of JAR capabilities: compression, executable JAR, sealing, extension mechanism, signing&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; JARs</T><ST>A Java Archive is more than just a bundle of classes</ST><A>http://www.ibm.com/developerworks/java/library/j-5things6.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>Defining the main class, setting the classpath, storing JARs in <CODEROUTINE>lib/ext</CODEROUTINE>, classpath wildcard, and storing auxiliary files in the JAR.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Interaction with the system</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Taming Tiger: Get environment variables and invoke subprocesses</T><ST>When deprecated doesn't mean forever</ST><A>http://www.ibm.com/developerworks/java/library/j-tiger09304.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>9</MONTH><DAY>30</DAY></DATE><COMMENT>The <CODEROUTINE>System.getenv()</CODEROUTINE> method and the <CODEROUTINE>ProcessBuilder</CODEROUTINE> class.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>From Runtime.exec() to ProcessBuilder</T><A>http://www.java-tips.org/java-se-tips/java.util/from-runtime.exec-to-processbuilder.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>2005</YEAR></DATE><COMMENT>Using <CODEROUTINE>ProcessBuilder</CODEROUTINE> to fork a process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; the Java Scripting API</T><ST>An easier way to do scripting on the Java platform</ST><A>http://www.ibm.com/developerworks/java/library/j-5things9.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>Using <CODEROUTINE>jrunscript</CODEROUTINE> and <CODEROUTINE>ScriptEngine</CODEROUTINE> to launch scripts, bind objects to them, and compile them.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Databases</TITLE>
      <ITEM><ARTICLE><X><T>Advanced DAO programming</T><ST>Learn techniques for building better DAOs</ST><A>http://www.ibm.com/developerworks/library/j-dao</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sean</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Sullivan</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>10</MONTH><DAY>7</DAY></DATE><COMMENT>Some advice for implementing the Data Access Object design pattern: handling the transaction demarcations inside the DAO or leaving the client to handle them, using JDBC vs JTA, logging and exception handling.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>5 things you didn't know about &#x2026; Java Database Connectivity</T><ST>Update your relationship to the JDBC API</ST><A>http://www.ibm.com/developerworks/java/library/j-5things10/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>10</DAY></DATE><COMMENT>Getting the list of scalar functions, scrollable and updateable <CODEROUTINE>ResultSet</CODEROUTINE>s, <CODEROUTINE>RowSet</CODEROUTINE>s, and batch updates.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Develop Spring Redis applications</T><ST>Build Spring-based applications with Redis as the datastore</ST><A>http://www.ibm.com/developerworks/library/os-springredis/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shekhar</FIRSTNAME><LASTNAME>Gulati</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>8</MONTH><DAY>21</DAY></DATE><COMMENT>A presentation of Redis and Spring Java Redis.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Servlets</TITLE>
      <ITEM><ARTICLE><X><T>Java theory and practice: Are all stateful Web applications broken?</T><ST>HttpSession and friends are trickier than they look</ST><A>http://www.ibm.com/developerworks/library/j-jtp09238.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>9</MONTH><DAY>23</DAY></DATE><COMMENT>How to properly use <CODEROUTINE>ServletContext</CODEROUTINE> and <CODEROUTINE>HttpSession</CODEROUTINE> to avoid race conditions.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Annotations</TITLE>
      <ITEM><ARTICLE><X><T>Getting started with JML</T><ST>Improve your Java programs with JML annotation</ST><A>http://www.ibm.com/developerworks/java/library/j-jml.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joe</FIRSTNAME><LASTNAME>Verzulli</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH><DAY>18</DAY></DATE><COMMENT>A presentation of JML: an assertion mechanism.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Declarative Programming in Java</T><A>http://www.onjava.com/pub/a/onjava/2004/04/21/declarative.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Narayanan</FIRSTNAME><LASTNAME>Jayaratchagan</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>A good introduction to Java annotations.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Annotations in Tiger, Part 1: Add metadata to Java code</T><ST>How to use Java 5's built-in annotations</ST><A>http://www.ibm.com/developerworks/library/j-annotate1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>9</MONTH><DAY>2</DAY></DATE><COMMENT>Using <CODEROUTINE>@Override</CODEROUTINE>, <CODEROUTINE>@Deprecated</CODEROUTINE> and <CODEROUTINE>@SuppressWarings</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Annotations in Tiger, Part 2: Custom annotations</T><ST>Write your own annotations in Java 5</ST><A>http://www.ibm.com/developerworks/library/j-annotate2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>9</MONTH><DAY>2</DAY></DATE><COMMENT>How to define your own annotation and annotate them with <CODEROUTINE>@Target</CODEROUTINE>, <CODEROUTINE>@Retention</CODEROUTINE>, <CODEROUTINE>@Documented</CODEROUTINE> and <CODEROUTINE>@Inherited</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Bridging the Gap: J2SE 5.0 Annotations</T><A>http://www.onjava.com/pub/a/onjava/2004/10/06/anno1.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kyle</FIRSTNAME><LASTNAME>Downey</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>6</DAY></DATE><COMMENT>Yet another presentation of the annotations, not the best one, but the author describes here the other existing annotation mechanisms: XDoclet, Common Attributes, JBoss, SGen and P.Anno.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Advanced Topics In Programming Languages: JSR-305: Java annotations for software defect detection</T><A>https://www.youtube.com/watch?v=J2fgb8nWUo8</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>3</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Pugh</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH><DAY>8</DAY></DATE><COMMENT>A proposition of an annotation mechanism that the developer could use to provide hints to static analyzers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Open Road: javax.annotation</T><A>http://today.java.net/article/2008/09/08/open-road-javaxannotation</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>9</DAY></DATE><COMMENT>A description of the JSR 305 annotations.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Javadoc</TITLE>
      <ITEM><ARTICLE><X><T>Java theory and practice: I have to document THAT?</T><ST>Integrated documentation a la Javadoc is both a benefit and a burden</ST><A>http://www.ibm.com/developerworks/java/library/j-jtp0821.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH><DAY>1</DAY></DATE><COMMENT>A checklist of what should be documented.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>History</TITLE>
      <ITEM><ARTICLE><X><T>Java City: The Java Enterprise Ecosystem</T><A>http://www.onjava.com/pub/a/onjava/2005/06/22/javacity.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Farley</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>22</DAY></DATE><COMMENT>A description of the current Java landscape, from the standards to the open source tools and frameworks used by everybody. The current fashionable meme is also present here: Sun should give away some control of the Java standards.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Essential Java resources</T><ST>A comprehensive listing of must-have books, sites, blogs, events, and more developerWorks</ST><A>http://www.ibm.com/developerworks/java/library/j-javaresources/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>1</MONTH><DAY>23</DAY></DATE><COMMENT>A good overview of the current Java world.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>James Gosling on Apple, Apache, Google, Oracle and the Future of Java</T><A>https://www.youtube.com/watch?v=9ei-rbULWoA</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>20</MINUTE><SECOND>9</SECOND></DURATION></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Gosling</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>11</MONTH><DAY>17</DAY></DATE><COMMENT>A Q&amp;A session about Gosling's personal opinions on many subjects.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Java 1.5</TITLE>
        <ITEM><ARTICLE><X><T>Readable Java 1.5</T><A>http://www.onjava.com/pub/a/onjava/2003/09/24/readable_java.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>Jungels</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>9</MONTH><DAY>29</DAY></DATE><COMMENT>A discussion about the readability of loop on collection content, generics and variance in Java 1.5.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>Magic with Merlin: The generics prototype</T><ST>Merlin peers into the future and sees language-level changes in Tiger</ST><A>http://www.ibm.com/developerworks/java/library/j-mer12193.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>12</MONTH><DAY>19</DAY></DATE><COMMENT>An overview of the 1.5 release: generics, enumerations, varargs, autoboxing, new loop syntax and static imports.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status='dead'><T>Java 1.5 Tiger: A Developer's Notebook - Creating Varargs in Java 1.5 Tiger</T><A>http://www.onjava.com/catalog/javaadn/excerpt/javaadn_ch05.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Flanagan</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>8</MONTH></DATE><COMMENT>A presentation of varargs and their traps.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java 7</TITLE>
        <ITEM><ARTICLE><X><T>The Open Road: Superpackages</T><A>http://today.java.net/pub/a/today/2008/03/06/jsr-294-superpackages.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliotte</FIRSTNAME><MIDDLENAME>Rusty</MIDDLENAME><LASTNAME>Harold</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>The current status of JSR 294 for solving the intra vs inter-package visibility issue.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality='-1'><T>Java platform roundtable, Spring 2010</T><ST>Forces shaping the future of the Java industry</ST><A>http://www.ibm.com/developerworks/java/library/j-javaroundtable/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jenni</FIRSTNAME><LASTNAME>Aloi</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Athen</FIRSTNAME><LASTNAME>O'Shea</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>4</MONTH><DAY>20</DAY></DATE><COMMENT>Some notes from a roundtable about Java status and future: impact of Oracle buying Sun, the other JVM languages, closures&#x2026; These notes are too concise to be really informative for the reader.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>7 Things About Java 7</T><A>http://skillsmatter.com/podcast/java-jee/7-things-about-java-7</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>15</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Evans</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>Automatic resource management, type annotations, New I/O 2, collection syntax, strings in <CODEROUTINE>switch</CODEROUTINE>, <CODEROUTINE>InvokeDynamic</CODEROUTINE>, and closures.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Better Resource Management with Java SE 7: Beyond Syntactic Sugar</T><A>http://www.oracle.com/technetwork/articles/java/trywithresources-401775.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Julien</FIRSTNAME><LASTNAME>Ponge</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH></DATE><COMMENT>A detailed presentation of the try-with-resources statement: syntax, <CODEROUTINE>java.lang.AutoCloseable</CODEROUTINE> interface, suppressed exceptions, and bytecodes generated under the hood.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Trent Gray-Donald on IBM SDK Java Technology Edition V7</T><A>https://www.youtube.com/watch?v=wGiHFyqGfOk</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>9</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Trent</FIRSTNAME><LASTNAME>Gray-Donald</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Laningham</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>20</DAY></DATE><COMMENT>Some information about the new SDK: some new Java 7 features, project Coin, IBM joins OpenJDK, better support of dynamic languages&#x2026;</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Showtime! Java 7 is here</T><A>http://www.oraclejavamagazine-digital.com/javamagazine/premiere2011?pg=21#pg21</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Reinhold</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Meloan</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH></DATE><COMMENT>Yet another quick overview of the new features.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java 8</TITLE>
        <ITEM><ARTICLE><X><T>Java 8 &#x2013; Interfaces fonctionnelles</T><A>http://blog.ippon.fr/2014/03/18/java-8-interfaces-fonctionnelles/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alexis</FIRSTNAME><LASTNAME>Seigneurin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>18</DAY></DATE><COMMENT>An overview of Functional Interfaces.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java 8 &#x2013; Gestion du temps</T><A>http://blog.ippon.fr/2014/03/19/java-8-gestion-du-temps/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pierre</FIRSTNAME><LASTNAME>Templier</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>19</DAY></DATE><COMMENT>An overview of <CODEROUTINE>java.time</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java 8 language changes</T><ST>Learn how Lambda expressions and changes to interface classes make Java 8 a new language</ST><A>http://www.ibm.com/developerworks/library/j-java8lambdas/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT>A short overview of lambda expressions.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Lambda: A Peek Under the Hood</T><A>http://parleys.com/play/5251c164e4b0a43ac1212459/about</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>59</MINUTE><SECOND>5</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>30</DAY></DATE><COMMENT>An explanation on how are implemented lambdas and the rational for this implementation.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>8 Great Java 8 Features No One's Talking about</T><A>https://www.infoq.com/articles/Java-8-Quiet-Features</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tal</FIRSTNAME><LASTNAME>Weiss</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT><CODEROUTINE>StampedLock</CODEROUTINE>, <CODEROUTINE>LongAdder</CODEROUTINE>, <CODEROUTINE>Arrays.parallelSort()</CODEROUTINE>, the new date/time API, <CODEROUTINE>Process. destroyForcibly()</CODEROUTINE> and <CODEROUTINE>Process. isAlive()</CODEROUTINE>, the exact <CODEROUTINE>Math</CODEROUTINE> methods, <CODEROUTINE>SecureRandom.getInstanceStrong()</CODEROUTINE>, and <CODEROUTINE>Optional&lt;T&gt;</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><BLIST><TITLE>Optional</TITLE>
          <ITEM><ARTICLE><X><T>Tired of Null Pointer Exceptions? Consider Using Java SE 8's Optional!</T><A>http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Raoul-Gabriel</FIRSTNAME><LASTNAME>Urla</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH></DATE><COMMENT>A good explanation on how to use <CODEROUTINE>Optional</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Java 8&#x2019;s new Optional type is worthless</T><A>https://medium.com/@bgourlie/java-8-s-new-optional-type-is-worthless-448a00fa672d</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>W.</FIRSTNAME><MIDDLENAME>Brian</MIDDLENAME><LASTNAME>Gourlie</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Optional Anti-Patterns</T><ST>Optionals have proven so useful that some devs have taken them out of their native habitat. Here are anti-patterns and code smells to avoid.</ST><A>https://dzone.com/articles/optional-anti-patterns</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Przemyslaw</FIRSTNAME><LASTNAME>Magda</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>13</DAY></DATE><COMMENT>Some examples of bad code are contrived, I wonder if someone already wrote such code.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Streams</TITLE>
          <ITEM><ARTICLE><X><T>API Stream &#x2013; Une nouvelle fa&#xE7;on de g&#xE9;rer les Collections en Java 8</T><A>http://blog.ippon.fr/2014/03/17/api-stream-une-nouvelle-facon-de-gerer-les-collections-en-java-8/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Luc</FIRSTNAME><LASTNAME>Cl&#xE9;ment</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>17</DAY></DATE><COMMENT>An overview of <CODEROUTINE>Stream</CODEROUTINE>s.</COMMENT></ARTICLE></ITEM>
        <ITEM><BLIST><TITLE>Java Streams</TITLE>
            <ITEM><ARTICLE><X quality='1'><T>An introduction to the java.util.stream library</T><ST>Run functional-style queries on collections and other data sets</ST><A>http://www.ibm.com/developerworks/java/library/j-java-streams-1-brian-goetz/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>An introduction to streams.</COMMENT></ARTICLE></ITEM>
            <ITEM><ARTICLE><X quality='1'><T>Aggregating with Streams</T><ST>Slice, dice, and chop data with ease</ST><A>http://www.ibm.com/developerworks/java/library/j-java-streams-2-brian-goetz/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>Using <CODEROUTINE>Collector</CODEROUTINE> to perform the reduction.</COMMENT></ARTICLE></ITEM>
            <ITEM><ARTICLE><X quality='1'><T>Streams under the hood</T><ST>Understand java.util.stream internals</ST><A>http://www.ibm.com/developerworks/java/library/j-java-streams-3-brian-goetz/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>Some details to know in order to get good performance: <CODEROUTINE>Spliterator</CODEROUTINE>, stream flags, encounter order&#x2026;</COMMENT></ARTICLE></ITEM>
            <ITEM><ARTICLE><X quality='1'><T>From concurrent to parallel</T><ST>Understanding the factors influencing parallel performance</ST><A>http://www.ibm.com/developerworks/java/library/j-java-streams-4-brian-goetz/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>7</MONTH><DAY>18</DAY></DATE><COMMENT>A basic but good overview of the factors to determinate if parallelization is worthwhile.</COMMENT></ARTICLE></ITEM>
            <ITEM><ARTICLE><X quality='1'><T>Parallel stream performance</T><ST>Optimizing stream pipelines for parallel processing</ST><A>http://www.ibm.com/developerworks/java/library/j-java-streams-5-brian-goetz/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>7</MONTH><DAY>18</DAY></DATE><COMMENT>A description of some factors resulting in good or bad performance gain when parallelizing a Stream.</COMMENT></ARTICLE></ITEM>
          </BLIST></ITEM>
        </BLIST></ITEM>
        <ITEM><BLIST><TITLE>Java 8 idioms</TITLE>
          <ITEM><ARTICLE><X><T>An easier path to functional programming in Java</T><ST>Think declaratively to adopt functional techniques in your Java programs</ST><A>https://www.ibm.com/developerworks/library/j-java8idioms1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>A simple introduction to imperative style vs. declarative style vs. functional style.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Function composition and the Collection Pipeline pattern</T><ST>Functional patterns for iterating collections in Java</ST><A>https://www.ibm.com/developerworks/library/j-java8idioms2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>A very basic explanation of the benefits of using the Collection Pipeline pattern with Streams.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Functional alternatives to the traditional for loop</T><ST>Three newer methods that cut the fuss out of even complex iterations</ST><A>https://www.ibm.com/developerworks/library/j-java8idioms3/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>How to rewrite a <CODEROUTINE>for</CODEROUTINE> loop using Streams.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>In praise of helpful coding</T><ST>The surprising benefits of a Java 8 convention</ST><A>https://www.ibm.com/developerworks/library/j-java8idioms4/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>How to properly write functional code.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>An alternative to passing through</T><ST>Learn how to recognize and replace pass-through lambdas with method references in your Java code</ST><A>https://www.ibm.com/developerworks/library/j-java8idioms5/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>7</DAY></DATE><COMMENT>A good description of replacing lambdas by method references.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Why the perfect lambda expression is just one line</T><ST>Write single-line lambdas for code that is easier to read, test, and reuse</ST><A>https://www.ibm.com/developerworks/library/j-java8idioms6/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>2</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Functional interfaces</T><ST>Learn how to create custom functional interfaces, and why you should use built-ins whenever possible</ST><A>https://www.ibm.com/developerworks/library/j-java8idioms7/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Venkat</FIRSTNAME><LASTNAME>Subramaniam</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT>The subtitle says all.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java 9</TITLE>
        <ITEM><ARTICLE><X><T>JShell: The new Java 9 REPL</T><A>http://www.theserverside.com/tip/JShell-The-new-Java-9-REPL</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Barry</FIRSTNAME><LASTNAME>Burd</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>8</MONTH></DATE><COMMENT>A presentation of JShell.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>What's Cool in Java 8, and New in Java 9</T><A>https://www.youtube.com/watch?v=9PFcTwRlASY</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>5</MINUTE><SECOND>15</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Aurelio</FIRSTNAME><LASTNAME>Garcia-Ribeyro</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH></DATE><COMMENT>The main Java 8 features (lambda expressions, default methods, method references, date/time) and a long list of Java 9 changes (Strings using less memory, Javadoc search, Jigsaw, enhanced deprecation, easier creation of small Collections, jshell, multi-release JAR files, Unicode 8, UTF8 property files, OCSP support, SHA-3, HTML5 Javadoc, HTTP/2, encapsulated internal APIs, new version-string scheme&#x2026;).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Tutoriel pour comprendre les futures fonctionnalités modulaires de Java 9</T><A>http://soat.developpez.com/tutoriels/java/futures-fonctionnalites-modulaires-java9/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abdelmajid</FIRSTNAME><LASTNAME>Lali</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>3</MONTH><DAY>22</DAY></DATE><COMMENT>A short history of the Java modularization effort and what will be done in Java 9.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java 9 : le comité exécutif du JCP rejette la spécification actuelle des modules Java (Jigsaw)</T><ST>Qui a voté « Non » et pourquoi ?</ST><A>https://www.developpez.com/actu/135508/Java-9-le-comite-executif-du-JCP-rejette-la-specification-actuelle-des-modules-Java-Jigsaw-qui-a-vote-Non-et-pourquoi/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Guilloux</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java 9 Optional API Additions</T><A>http://www.baeldung.com/java-9-optional</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugen</FIRSTNAME><LASTNAME>Paraschiv</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>The new methods of <CODEROUTINE>Optional</CODEROUTINE>: <CODEROUTINE>or()</CODEROUTINE>, <CODEROUTINE>ifPresentOrElse()</CODEROUTINE>, and <CODEROUTINE>stream()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>4 Hidden Features in Java 9</T><A>https://blog.idrsolutions.com/2017/05/4-hidden-features-java-9/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kieran</FIRSTNAME><LASTNAME>France</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT><BLIST><TITLE>A quick description of</TITLE><ITEM>the Process API updates</ITEM><ITEM>Ahead-of-Time Compilation</ITEM><ITEM>private methods in interfaces</ITEM><ITEM>Multi-Resolution Images</ITEM></BLIST></COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Faster and Easier Use and Redistribution of Java SE</T><A>https://blogs.oracle.com/java-platform-group/faster-and-easier-use-and-redistribution-of-java-se</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Donald</FIRSTNAME><LASTNAME>Smith</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>6</DAY></DATE><COMMENT>Oracle wants to release a new version of Java SE every six months and will open source some of its commercial products.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java 10</TITLE>
        <ITEM><ARTICLE><X><T>Java Type Inference Won't Support Mutability Specification</T><A>https://www.infoq.com/news/2016/12/java-type-inference-mutability</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abraham</FIRSTNAME><LASTNAME>Mar&#xED;n P&#xE9;rez</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>12</MONTH><DAY>22</DAY></DATE><COMMENT>A description of the cases where type inference would be supported.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java Enums to Be Enhanced with Sharper Type Support</T><A>https://www.infoq.com/news/2017/01/java-enhanced-enums</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abraham</FIRSTNAME><LASTNAME>Mar&#xED;n P&#xE9;rez</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>10</DAY></DATE><COMMENT>Improving enums so they support generics and methods.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Java 10 Could Bring Upgraded Lambdas</T><A>https://www.infoq.com/news/2017/01/java10-lambda-leftovers</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abraham</FIRSTNAME><LASTNAME>Mar&#xED;n P&#xE9;rez</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>17</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Project Amber: The Future of Java Exposed</T><A>http://blog.takipi.com/project-amber-the-future-of-java-exposed/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Henn</FIRSTNAME><LASTNAME>Idan</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>20</DAY></DATE><COMMENT>A description of Amber, the project trying to implement the features described in the previous articles.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Future</TITLE>
      <ITEM><ARTICLE><X><T>Pattern Matching for Java</T><A>http://cr.openjdk.java.net/~briangoetz/amber/pattern-match.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gavin</FIRSTNAME><LASTNAME>Bierman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH></DATE><COMMENT>The authors describe many possible language features related to pattern matching.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Pattern Matching for Java -- Runtime and Translation</T><A>http://cr.openjdk.java.net/~briangoetz/amber/pattern-match-translation.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Rose</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH></DATE><COMMENT>An analysis of the implementation, at the compilation level, of pattern matching.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Tools</TITLE>
      <ITEM><ARTICLE><X><T>Using JConsole to Monitor Applications</T><A>http://www.oracle.com/technetwork/articles/java/jconsole-1564139.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mandy</FIRSTNAME><LASTNAME>Chung</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>12</MONTH></DATE><COMMENT>An overview of JConsole.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Java postmortem diagnostics, Part 1: Introduction to JSR 326 and Apache Kato</T><ST>Learn how the Apache Kato project can help you analyse the causes of JVM failure</ST><A>http://www.ibm.com/developerworks/java/library/j-kato.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Adam</FIRSTNAME><LASTNAME>Pilkington</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>5</MONTH><DAY>5</DAY></DATE><COMMENT>A high level introduction to post-mortem analysis.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>

</CONTENT>
</PAGE>

