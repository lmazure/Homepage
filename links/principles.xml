<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Design principles</TITLE>
<PATH>links/principles.xml</PATH>
<DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>20</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><X><T>Uncle Bob's Principles of OOD</T><A>http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod</A><L>en</L><F>HTML</F></X></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>Design Principles and Design Patterns</T><A>http://www.cvc.uab.es/shared/teach/a21291/temes/object_oriented_design/materials_adicionals/principles_and_patterns.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2000</YEAR></DATE><COMMENT><BLIST><SUBTITLE>A presentation of</SUBTITLE><ITEM><BLIST><SUBTITLE>the class design principles</SUBTITLE><ITEM>the Open Closed Principle</ITEM><ITEM>the Liskov Substitution Principle</ITEM><ITEM>the Dependency Inversion Principle</ITEM></BLIST></ITEM><ITEM><BLIST><SUBTITLE>the package architecture principles</SUBTITLE><ITEM>the Release Reuse Equivalency Principe</ITEM><ITEM>the Common Closure Principle</ITEM><ITEM>the Common Reuse Principle</ITEM><ITEM>the Acyclic Dependencies Principle</ITEM><ITEM>the Stable Dependencies Principle</ITEM><ITEM>the Stable Abstractions Principle</ITEM></BLIST></ITEM><ITEM><BLIST><SUBTITLE>some design patterns</SUBTITLE><ITEM>the Abstract Server</ITEM><ITEM>the Adapter</ITEM><ITEM>the Observer</ITEM><ITEM>the Bridge</ITEM><ITEM>the Abstract Factory</ITEM></BLIST></ITEM></BLIST></COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="2"><T>Ruby Midwest 2011 - Keynote: Architecture the Lost Years by Robert Martin</T><A>https://www.youtube.com/watch?v=WpkDN78P884</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>39</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>11</MONTH><DAY>4</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> explains basic good architecture principles, which we knew 10 years ago, but have been forgotten because of the Web craziness…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=WpkDN78P884"><X><T>Robert C. Martin - Clean Architecture</T><A>https://vimeo.com/43612849</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>6</MONTH><DAY>7</DAY></DATE><COMMENT>This is the same presentation that above, this one is better structured, but less lively, I prefer the previous one.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Clean Architecture</T><A>https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>13</DAY></DATE><COMMENT>Four concentric layers: Entities, Use Cases, Interface Adapters, and Frameworks and Drivers. Using Dependency Inversion to have only inward dependencies and passing isolated simple data structures through the layer boundaries.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Visualization Mnemonics for Software Principles</T><A>https://daedtech.com/visualization-mnemonics-for-software-principles/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Erik</FIRSTNAME><LASTNAME>Dietrich</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>This blog entry will not teach the software first principles (SOLID + law of Demeter), but tells some funny stories to remember them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What Is Assumed When Deferring Database Decisions?</T><A>https://blog.8thlight.com/patrick-gombert/2016/04/18/deferring-database.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Patrick</FIRSTNAME><LASTNAME>Gombert</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>4</MONTH><DAY>18</DAY></DATE><COMMENT>The choice of the database is not really a technical detail, the data access patterns of the application limit the choice of the database.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Designing Bulletproof Code</T><ST>Learn more about designing bulletproof code in your Java applications.</ST><A>https://dzone.com/articles/designing-a-bulletproof-code</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Otavio</FIRSTNAME><LASTNAME>Santana</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>A simple Java example demonstrating some good practices.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>SOLID</TITLE>
      <ITEM><ARTICLE><X><T>SOLID Deconstruction</T><A>https://slides.yowconference.com/yow2013/Henney-SOLIDDeconstruction.pdf</A><L>en</L><F>PDF</F></X><X><T>SOLID Deconstruction</T><A>https://github.com/newmana/solid-deconstructed/blob/master/Henney-SOLIDDeconstruction.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Jakub</FIRSTNAME><LASTNAME>Holý</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>Yet another presentation of the SOLID principles.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Single Responsibility Principle</TITLE>
        <ITEM><ARTICLE><X><T>SRP: The Single Responsibility Principle</T><A>https://www.labri.fr/perso/clement/enseignements/ao/SRP.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><COMMENT>A book extract where <AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> describes the principle: a class should have only one reason to change.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Single Responsibility Principle</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>8</DAY></DATE><COMMENT>Group together what change together, separate things that change for different reasons, and remember that changes are requested by different persons.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>SOLID Design Principles Explained: The Single Responsibility Principle</T><A>https://stackify.com/solid-design-principles/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thorben</FIRSTNAME><LASTNAME>Janssen</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>8</DAY></DATE><COMMENT>A simple description of the principle with examples from JPA and Spring.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Open Closed Principle</TITLE>
        <ITEM><ARTICLE><X><T>Open Close Principle</T><A>https://www.oodesign.com/open-close-principle.html</A><L>en</L><F>HTML</F></X><COMMENT>A simple example of the Open Closed Principle.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Open-Closed Principle</T><A>https://www.labri.fr/perso/clement/enseignements/ao/OCP.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>1996</YEAR><MONTH>1</MONTH></DATE><COMMENT>A description of the principle with C++ examples.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>A simple example of the Open/Closed Principle</T><A>http://joelabrahamsson.com/a-simple-example-of-the-openclosed-principle/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joel</FIRSTNAME><LASTNAME>Abrahamsson</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>13</DAY></DATE><COMMENT>The title says all: the classical shape example in C#.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Open Closed Principle</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>12</DAY></DATE><COMMENT>You should be able to extend the behaviour of a system without having to modify that system. This is what plugins achieve.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality="-1"><T>SOLID Design Principles Explained: The Open/Closed Principle with Code Examples</T><A>https://stackify.com/solid-design-open-closed-principle/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thorben</FIRSTNAME><LASTNAME>Janssen</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>28</DAY></DATE><COMMENT>The description of the principle is short and the example very unclear.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Liskov Substitution Principle</TITLE>
        <ITEM><ARTICLE><X><T>The Liskov Substitution Principle</T><A>https://www.labri.fr/perso/clement/enseignements/ao/LSP.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>1996</YEAR><MONTH>3</MONTH></DATE><COMMENT>A description of the principle with the usual (C++) rectangle/square example and another one more realistic.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>SOLID Design Principles Explained: The Liskov Substitution Principle with Code Examples</T><A>https://stackify.com/solid-design-liskov-substitution-principle/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thorben</FIRSTNAME><LASTNAME>Janssen</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>11</DAY></DATE><COMMENT>A short description of the principle with an example which is not so educative.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Interface Segregation Principle</TITLE>
        <ITEM><ARTICLE><X><T>The Interface Segregation Principle</T><A>https://www.labri.fr/perso/clement/enseignements/ao/ISP.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>1996</YEAR><MONTH>7</MONTH></DATE><COMMENT>An explanation of the principle with a C++ example.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>ScreenCast sur Interface Segregation Principle</T><A>https://www.youtube.com/watch?v=4D3AkCg6x7I</A><L>fr</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>27</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sab</FIRSTNAME><LASTNAME>Buisson</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>Cleaning up some code to respect the ISP.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>SOLID Design Principles Explained: Interface Segregation with Code Examples</T><A>https://stackify.com/interface-segregation-principle/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thorben</FIRSTNAME><LASTNAME>Janssen</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>18</DAY></DATE><COMMENT>A correct description of ISP.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Dependency Inversion Principle</TITLE>
        <ITEM><ARTICLE><X><T>The Dependency Inversion Principle</T><A>https://www.labri.fr/perso/clement/enseignements/ao/DIP.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>1996</YEAR><MONTH>5</MONTH></DATE><COMMENT>One of the first articles where <AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> describes the principle, a clear description with simple C++ examples.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>DIP in the Wild</T><A>https://www.martinfowler.com/articles/dipInTheWild.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brett</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schuchert</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>21</DAY></DATE><COMMENT>Some clear examples of dependency inversion and the difference between DIP, Inversion of Control and Dependency Injection.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>SOLID Design Principles Explained: Dependency Inversion Principle with Code Examples</T><A>https://stackify.com/dependency-inversion-principle/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thorben</FIRSTNAME><LASTNAME>Janssen</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>5</MONTH><DAY>7</DAY></DATE><COMMENT>A too basic explanation and example of the principle.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Law of Demeter</TITLE>
      <ITEM><ARTICLE><X><T>The Genius of the Law of Demeter</T><A>https://javadevguy.wordpress.com/2017/05/14/the-genius-of-the-law-of-demeter/</A><L>en</L><F>HTML</F></X><AUTHOR><GIVENNAME>JavaDevGuy</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>14</DAY></DATE><COMMENT>A description of the law of Demeter.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>YAGNI</TITLE>
      <ITEM><ARTICLE><X><T>Yagni</T><A>https://martinfowler.com/bliki/Yagni.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>5</MONTH><DAY>26</DAY></DATE><COMMENT>A rational for applying YAGNI.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: Eliminate YAGNI Smells</T><A>https://testing.googleblog.com/2017/08/code-health-eliminate-yagni-smells.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Marc</FIRSTNAME><LASTNAME>Eaddy</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>14</DAY></DATE><COMMENT>A very short and simple presentation of YAGNI.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Tell-Don't-Ask</TITLE>
      <ITEM><ARTICLE><X status="dead"><T>Tell, Don't Ask</T><A>https://pragprog.com/articles/tell-dont-ask</A><L>en</L><F>HTML</F></X><COMMENT>The principle, its relation with the Law of Demeter, the Command/Query separation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>TellDontAsk</T><A>https://www.martinfowler.com/bliki/TellDontAsk.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>5</DAY></DATE><COMMENT>A short description of the principle and <AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR>'s opinion about it.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Beck's Design Rules</TITLE>
      <ITEM><ARTICLE><X><T>Clean Code: Four Simple Design Rules – Obligatory Read</T><A>https://dzone.com/articles/clean-code-four-simple-design</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jakub</FIRSTNAME><LASTNAME>Holý</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT><BLIST><TITLE><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR>'s Four Simple Design Rules</TITLE><ITEM>Runs all the tests</ITEM><ITEM>Contains no duplications</ITEM><ITEM>Expresses the intent of the programmers</ITEM><ITEM>Minimizes the number of classes and methods</ITEM></BLIST></COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>BeckDesignRules</T><A>https://martinfowler.com/bliki/BeckDesignRules.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>A shorter description of the four rules.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Postel's Law</TITLE>
      <ITEM><ARTICLE><X><T>Postel’s Law is not for you</T><A>http://trevorjim.com/postels-law-is-not-for-you/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trevor</FIRSTNAME><LASTNAME>Jim</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>12</MONTH><DAY>15</DAY></DATE><COMMENT>A good comment of Postel's law ("Be conservative in what you do, be liberal in what you accept from others").</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>