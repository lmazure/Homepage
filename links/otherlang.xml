<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Languages</TITLE>
<PATH>links/otherlang.xml</PATH>
<DATE><YEAR>2023</YEAR><MONTH>5</MONTH><DAY>19</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><X><T>Lists of programming languages</T><A>https://en.wikipedia.org/wiki/Lists_of_programming_languages</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>TIOBE Index</T><A>https://www.tiobe.com/tiobe-index/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Repl.it</T><A>https://repl.it/languages</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Scratch</T><A>https://scratch.mit.edu</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Unison</T><A>https://www.unison-lang.org/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Programming Languages: Application and Interpretation</T><A>https://www.plai.org/</A><L>en</L><F>HTML</F></X>: a book for upper-level courses that introduce the main ideas of programming languages</ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X protection="payed_registration"><T>Computing Trends Lead to New Programming Languages</T><A>https://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6228573</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sixto</FIRSTNAME><LASTNAME>Ortiz</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>7</MONTH></DATE><COMMENT>Some languages targeting some particular domains: Dart, Chapel, Haxe, F#, Ceylon, and X10.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Retiring Python as a Teaching Language</T><A>https://prog21.dadgum.com/203.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Hague</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>After Python, JavaScript is now the language that <AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Hague</LASTNAME></AUTHOR> would advise to use for learning programming.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Toolkits for the Mind</T><ST>Programming languages shape the way their users think—which helps explain how tech startups work and why they are able to reinvent themselves.</ST><A>https://www.technologyreview.com/2015/04/02/168469/toolkits-for-the-mind/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Somers</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>5</MONTH><DAY>2</DAY></DATE><COMMENT>There is a correlation between the language chosen by a company and its culture.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Post JavaScript Apocalypse  - Douglas Crockford</T><A>https://www.youtube.com/watch?v=99Zacm7SsWQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>54</MINUTE><SECOND>12</SECOND></DURATION><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>16</DAY></DATE></X><AUTHOR><FIRSTNAME>Douglas</FIRSTNAME><LASTNAME>Crockford</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH></DATE><COMMENT>Some miscellaneous and humorous problems of computer languages.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Dark Path</T><A>https://blog.cleancoder.com/uncle-bob/2017/01/11/TheDarkPath.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>11</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> is against language features aiming at avoiding some bugs, he prefers to rely on tests…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://blog.cleancoder.com/uncle-bob/2017/01/11/TheDarkPath.html"><X><T>Types and Tests</T><A>https://blog.cleancoder.com/uncle-bob/2017/01/13/TypesAndTests.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>13</DAY></DATE><COMMENT>Answering to some comments of his previous dubious blog.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="zombie"><T>Graal and Truffle for Language Interpretation on the JVM</T><A>https://www.jrebel.com/blog/graal-and-truffle-for-language-interpretation</A><L>en</L><F>HTML</F></X><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>This presentation of GraalVM is not so clear, it gives some technical details without placing them in the whole picture.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Four Languages from Forty Years Ago - Scott Wlaschin</T><A>https://www.youtube.com/watch?v=0fpDlAEQio4</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>45</SECOND></DURATION><DATE><YEAR>2018</YEAR><MONTH>8</MONTH><DAY>15</DAY></DATE></X><AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Wlaschin</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>6</MONTH></DATE><COMMENT>SQL, Prolog, ML, Smalltalk, and VisiCalc.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>λ-2D: An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus</T><ST>An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus</ST><A>https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Lingdong</FIRSTNAME><LASTNAME>Huang</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>A language using diagrams to define a program.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>STOP Learning These Programming Languages (for Beginners)</T><A>https://www.youtube.com/watch?v=RyRo8eVsrlU</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Andy</FIRSTNAME><LASTNAME>Sterkowitz</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>1</MONTH><DAY>16</DAY></DATE><COMMENT>The guy suggests to learn coding with JavaScript or Python, but his rational is strange, he dismisses Java and C# because you need to install an environment, but you have to install Python and using Notepad for JavaScript is not a good advice.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Python vs Julia</T><A>https://www.youtube.com/watch?v=NF5InxVP3ZQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>7</MINUTE><SECOND>9</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Keen</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>1</MONTH><DAY>19</DAY></DATE><COMMENT>A comparison of Python and Julia for those who know nothing about these two languages.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Concurnas</TITLE>
      <ITEM><ARTICLE><X><T>Concurrent programming with Concurnas</T><ST>Modern developers have access to hardware of never-before-seen power. Here’s how to leverage Concurnas, a new JVM programming language, to unlock that power.</ST><A>https://blogs.oracle.com/javamagazine/post/concurrent-programming-with-concurnas</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Tatton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>6</MONTH><DAY>22</DAY></DATE><COMMENT>An overview of the language.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>D</TITLE>
      <ITEM><ARTICLE><X><T>Three Cool Things About D - The Case for the D Programing Language</T><A>https://www.youtube.com/watch?v=RlVpPstLPEc</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>25</MINUTE><SECOND>8</SECOND></DURATION><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>2</DAY></DATE></X><AUTHOR><FIRSTNAME>Andrei</FIRSTNAME><LASTNAME>Alexandrescu</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>29</DAY></DATE><COMMENT>A presentation of D which tries to be a better C++.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Dart</TITLE>
      <ITEM><ARTICLE><X><T>Google Dart aims to supplant 'fundamentally flawed' JavaScript</T><ST>The company says JavaScript needs to be replaced due to its performance shortcomings and slow evolution</ST><A>https://www.infoworld.com/article/2620221/google-dart-aims-to-supplant--fundamentally-flawed--javascript.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Samson</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>14</DAY></DATE><COMMENT>Google invents yet another language. JavaScript is indeed not a good language, but this will be difficult to convince people to switch to Dart.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Batteries Included: The Dart Toolchain</T><A>https://www.youtube.com/watch?v=P5YodNSX4jk</A><L>en</L><F>MP4</F><DURATION><MINUTE>24</MINUTE><SECOND>17</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Andrei</FIRSTNAME><LASTNAME>Mouravski</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>7</DAY></DATE><COMMENT>A quick overview of the tools available for Dart development.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>8 Dart Features Those Fat Cats Don’t Want You to Know</T><ST>Productive code without ceremony</ST><A>http://radar.oreilly.com/2013/05/8-dart-features-those-fat-cats-dont-want-you-to-know.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Seth</FIRSTNAME><LASTNAME>Ladd</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>Some random Dart features: method cascades, getters and setters, named constructors, Futures, Streams, named optional parameters, tree shaking, and isolates.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Who is behind Dart?</T><A>https://blossom.co/index.html%3Fp=186.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Seth</FIRSTNAME><LASTNAME>Ladd</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT>A list of some leaders of Dart team.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Mahogany Staircase - Flutter's Layered Design</T><A>https://www.youtube.com/watch?v=dkyY9WCGMi0</A><L>en</L><F>MP4</F><DURATION><MINUTE>58</MINUTE><SECOND>22</SECOND></DURATION><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>5</DAY></DATE></X><AUTHOR><FIRSTNAME>Ian</FIRSTNAME><LASTNAME>Hickson</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>3</MONTH><DAY>31</DAY></DATE><COMMENT>A technical presentation of Flutter, a Dart UI library.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Factor</TITLE>
      <ITEM><ARTICLE><X><T>Factor: an extensible interactive language</T><A>https://www.youtube.com/watch?v=f_0QlhYlS8g</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>36</MINUTE><SECOND>39</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Slava</FIRSTNAME><LASTNAME>Pestov</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of Factor, a stack-based language with garbage collection and object orientation.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Go</TITLE>
      <ITEM><ARTICLE><X><T>Google I/O 2010 - Go Programming</T><A>https://www.youtube.com/watch?v=jgVhBThJdXc</A><L>en</L><F>MP4</F><DURATION><MINUTE>56</MINUTE><SECOND>11</SECOND></DURATION><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>28</DAY></DATE></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Pike</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Russ</FIRSTNAME><LASTNAME>Cox</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>19</DAY></DATE><COMMENT>Some examples and Q&amp;As on the Go language.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Kotlin</TITLE>
      <ITEM><ARTICLE><X><T>Advanced Kotlin: New Features and More</T><A>https://www.youtube.com/watch?v=rwsvbSve_BI</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>6</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>10</MONTH><DAY>31</DAY></DATE></X><AUTHOR><FIRSTNAME>Andrey</FIRSTNAME><LASTNAME>Breslav</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>10</MONTH><DAY>4</DAY></DATE><COMMENT>JetBrains creates yet another language running on the JVM.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>PHP</TITLE>
      <ITEM><ARTICLE><X><T>Compiling and Optimizing Scripting Languages</T><A>https://www.youtube.com/watch?v=kKySEUrP7LA</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>37</SECOND></DURATION><DATE><YEAR>2009</YEAR><MONTH>3</MONTH><DAY>27</DAY></DATE></X><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Biggar</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>3</MONTH><DAY>18</DAY></DATE><COMMENT>A description of the difficulties to write a PHP compiler and some comments about the PHP community.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>R</TITLE>
      <ITEM><ARTICLE><X status="zombie"><T>David Champagne on the R programming language and its relevance in the world of big data</T><A>https://www.ibm.com/developerworks/java/library/j-gloverpodcast2/index.html#champagne</A><L>en</L><F>MP3</F><DURATION><MINUTE>23</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Champagne</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH><DAY>24</DAY></DATE><COMMENT>A presentation of R. This is not technical, but marketing bullshit.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>ReasonML</TITLE>
      <ITEM><ARTICLE><X quality="-1"><T>X Marks the Spot (Part 1): ReasonML</T><A>https://8thlight.com/insights/x-marks-the-spot-part-1-reasonml</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>3</MONTH><DAY>19</DAY></DATE><COMMENT>An unclear presentation of ReasonML.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://8thlight.com/insights/x-marks-the-spot-part-1-reasonml"><X quality="-1"><T>X Marks the Spot (Part 2): ReasonReact</T><A>https://8thlight.com/insights/x-marks-the-spot-part-2-reasonreact</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>9</DAY></DATE><COMMENT>This description of ReasonReact, a Reason library for React, is also difficult to understand.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Rust</TITLE>
      <ITEM><ARTICLE><X><T>Why you should learn the Rust programming language</T><ST>Discover the history, key concepts, and tools for using Rust</ST><A>https://developer.ibm.com/articles/os-developers-know-rust/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>M.</FIRSTNAME><MIDDLENAME>Tim</MIDDLENAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>A short introduction to Rust.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What is Rust and why is it so popular?</T><A>https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jake</FIRSTNAME><LASTNAME>Goulding</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>A list of advantages and disadvantages of using Rust.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Getting started with … Rust</T><A>https://stackoverflow.blog/2021/03/15/getting-started-with-rust/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Medi</FIRSTNAME><MIDDLENAME>Madelen</MIDDLENAME><LASTNAME>Gwosdz</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>3</MONTH><DAY>15</DAY></DATE><COMMENT>A presentation of Rust without a single line of code, but there are many links toward learning material.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Linus Torvalds weighs in on Rust language in the Linux kernel</T><ST>"Memory managed languages? In my kernel?" It's more likely than you think.</ST><A>https://arstechnica.com/gadgets/2021/03/linus-torvalds-weighs-in-on-rust-language-in-the-linux-kernel/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Salter</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>Rust may be used to implement some parts of the Linux kernel, starting by drivers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why is building a UI in Rust so hard?</T><A>https://www.warp.dev/blog/why-is-building-a-ui-in-rust-so-hard</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Aloke</FIRSTNAME><LASTNAME>Desai</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>2</MONTH><DAY>14</DAY></DATE><COMMENT>You cannot use the usual GUI design based on OOP.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Rust and RAII Memory Management - Computerphile</T><A>https://www.youtube.com/watch?v=pTMvh6VzDls</A><L>en</L><F>MP4</F><DURATION><MINUTE>24</MINUTE><SECOND>21</SECOND></DURATION></X><DATE><YEAR>2023</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>A basic presentation of memory management in Rust.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Scala</TITLE>
      <ITEM><ARTICLE><X><T>Martin Odersky, "Working Hard to Keep It Simple" - OSCON Java 2011</T><A>https://www.youtube.com/watch?v=3jg1AheF4n0</A><L>en</L><F>MP4</F><DURATION><MINUTE>16</MINUTE><SECOND>31</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Odersky</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>7</MONTH><DAY>25</DAY></DATE><COMMENT>A short marketing speech explaining why parallelism is easier with Scala.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Unison</TITLE>
      <ITEM><ARTICLE><X><T>Unison: A Friendly Programming Language from the Future Part 1 • Runar Bjarnason • YOW! 2021</T><A>https://www.youtube.com/watch?v=Adu75GJ0w1o</A><L>en</L><F>MP4</F><DURATION><MINUTE>18</MINUTE><SECOND>58</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Rúnar</FIRSTNAME><LASTNAME>Bjarnason</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>1</MONTH><DAY>21</DAY></DATE><COMMENT>This functional language includes some interesting ideas, but I should play with it to evaluate if they really add value.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=Adu75GJ0w1o"><X><T>Unison: A Friendly Programming Language from the Future Part 2 • Runar Bjarnason • YOW! 2021</T><A>https://www.youtube.com/watch?v=gy44CTCce0o</A><L>en</L><F>MP4</F><DURATION><MINUTE>26</MINUTE><SECOND>42</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Rúnar</FIRSTNAME><LASTNAME>Bjarnason</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>1</MONTH><DAY>21</DAY></DATE><COMMENT>The continuation of the previous video.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Java.Next</TITLE>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: The Java.next languages</T><ST>Leveraging Groovy, Scala, and Clojure in an increasingly polyglot world</ST><A>https://www.ibm.com/developerworks/library/j-jn1/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>1</MONTH><DAY>29</DAY></DATE><COMMENT>A very first introduction to Groovy, Scala, and Clojure: static vs. dynamic typing, and imperative vs. functional.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Common ground in Groovy, Scala, and Clojure, Part 1</T><ST>Explore how these next-generation JVM languages handle operator overloading</ST><A>https://www.ibm.com/developerworks/library/j-jn2/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>3</MONTH><DAY>12</DAY></DATE><COMMENT>Operator overloading, associativity, and precedence.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jn2/"><X status="zombie"><T>Java.next: Common ground in Groovy, Scala, and Clojure, Part 2</T><ST>Learn how the Java.next languages reduce boilerplate and complexity</ST><A>https://www.ibm.com/developerworks/library/j-jn3/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>16</DAY></DATE><COMMENT>Everything is an object, classes are easier to write, and some syntactic sugar.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jn3/index.html"><X status="zombie"><T>Java.next: Common ground in Groovy, Scala, and Clojure, Part 3</T><ST>Rethinking exceptions, expressions, and emptiness</ST><A>https://www.ibm.com/developerworks/library/j-jn4/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>14</DAY></DATE><COMMENT>No more statement vs. expression difference, how the new languages handle exceptions and null.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Extension without inheritance, Part 1</T><ST>See how Groovy, Scala, and Clojure bolt behavior onto classes</ST><A>https://www.ibm.com/developerworks/library/j-jn5/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>12</DAY></DATE><COMMENT>How to add methods to a class without recompiling it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jn5/index.html"><X status="zombie"><T>Java.next: Extension without inheritance, Part 2</T><ST>Explore Clojure protocols</ST><A>https://www.ibm.com/developerworks/library/j-jn6/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>30</DAY></DATE><COMMENT>Futher information about Clojure protocols.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jn6/index.html"><X status="zombie"><T>Java.next: Extension without inheritance, Part 3</T><ST>Groovy metaprogramming gives you easy solutions to common problems</ST><A>https://www.ibm.com/developerworks/library/j-jn7/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>3</DAY></DATE><COMMENT>Extending Groovy classes or objects.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Mixins and traits</T><ST>Mix new behaviors into Groovy and Scala classes</ST><A>https://www.ibm.com/developerworks/library/j-jn8/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>Groovy mixins and Scala traits.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Currying and partial application</T><ST>Add power and indirection to function dispatch</ST><A>https://www.ibm.com/developerworks/library/j-jn9/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>After defining currying and partial application, the author explains how to apply them in Scala, Groovy and Clojure.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Functional coding styles</T><ST>Functional constructs shared by Groovy, Scala, and Clojure</ST><A>https://www.ibm.com/developerworks/library/j-jn10/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>12</MONTH><DAY>24</DAY></DATE><COMMENT>The differences between the syntaxes of the three languages when writing functional code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Overcome synonym suffering</T><ST>Recognize similar functional constructs across the Java.net languages</ST><A>https://www.ibm.com/developerworks/library/j-jn11/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>28</DAY></DATE><COMMENT>Futher differences between the syntaxes of the three languages for the special case of filter, map and reduce.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Memoization and functional synergy</T><ST>Core functional features and how the Java.next languages implement and combine them</ST><A>https://www.ibm.com/developerworks/library/j-jn12/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>2</MONTH><DAY>18</DAY></DATE><COMMENT>How to use memoisation and an unclear transformation of a declarative code into a functional one.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Contrasting concurrency</T><ST>See how concurrency options differ in the Java.next languages</ST><A>https://www.ibm.com/developerworks/library/j-jn13/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>31</DAY></DATE><COMMENT>A description on how easy operations can be parallelised in Scala and Groovy, and of Scala actors.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Concurrency in Clojure</T><ST>How Clojure abstracts concurrency and shared state</ST><A>https://www.ibm.com/developerworks/library/j-jn14/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>After an explanation of the epochal time model, Ford describes atoms, software transaction memory and the <CODEROUTINE>reducers</CODEROUTINE> library.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Java 8 as Java.next</T><ST>Evaluating Java 8 as a suitable Java replacement</ST><A>https://www.ibm.com/developerworks/library/j-jn15/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>28</DAY></DATE><COMMENT>Java 8’s <CODEROUTINE>stream</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="zombie"><T>Java.next: Choosing your next JVM language</T><A>https://www.ibm.com/developerworks/library/j-jn16/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Neal</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>13</DAY></DATE><COMMENT>Pick the language you prefer, ensure discipline for large project if you are using a multiparadigm language, use functional programming for the lower layers.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>RedMonk Programming Language Rankings</TITLE>
      <ITEM><ARTICLE><X status="dead"><T>RedMonk Programming Language Rankings: CoffeeScript and Java Make Gains</T><A>http://www.readwriteweb.com/hack/2012/02/redmonk-programming-language-r.php</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joe</FIRSTNAME><LASTNAME>Brockmeier</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>14</DAY></DATE><COMMENT>The current popularity of languages.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The RedMonk Programming Language Rankings: June 2014</T><A>https://redmonk.com/sogrady/2014/06/13/language-rankings-6-14/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>O'Grady</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>13</DAY></DATE><COMMENT>Update.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The RedMonk Programming Language Rankings: June 2015</T><A>https://redmonk.com/sogrady/2015/07/01/language-rankings-6-15/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>O'Grady</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>7</MONTH><DAY>1</DAY></DATE><COMMENT>Update.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The RedMonk Programming Language Rankings: January 2017</T><A>https://redmonk.com/sogrady/2017/03/17/language-rankings-1-17/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>O'Grady</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>17</DAY></DATE><COMMENT>Update.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The RedMonk Programming Language Rankings: January 2019</T><A>https://redmonk.com/sogrady/2019/03/20/language-rankings-1-19/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>O'Grady</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>3</MONTH><DAY>20</DAY></DATE><COMMENT>Update.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The RedMonk Programming Language Rankings: June 2020</T><A>https://redmonk.com/sogrady/2020/07/27/language-rankings-6-20/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>O'Grady</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>Update.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>RedMonk Top 20 Languages Over Time: June 2020</T><A>https://redmonk.com/rstephens/2020/07/27/redmonk-top-20-languages-over-time-june-2020/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rachel</FIRSTNAME><LASTNAME>Stephens</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE><COMMENT>An overview of the ranking since September 2012.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The RedMonk Programming Language Rankings: January 2022</T><A>https://redmonk.com/sogrady/2022/03/28/language-rankings-1-22/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>O'Grady</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>3</MONTH><DAY>28</DAY></DATE><COMMENT>Update.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The RedMonk Programming Language Rankings: June 2022</T><A>https://redmonk.com/sogrady/2022/10/20/language-rankings-6-22/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephen</FIRSTNAME><LASTNAME>O'Grady</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>10</MONTH><DAY>22</DAY></DATE><COMMENT>Update.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>