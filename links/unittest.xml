<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Unit testing</TITLE>
<PATH>links/unittest.xml</PATH>
<DATE><YEAR>2025</YEAR><MONTH>7</MONTH><DAY>13</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><BLIST><TITLE>Unit tests</TITLE>
      <ITEM><X><T>The Art Of Unit Testing</T><A>https://www.artofunittesting.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Wikipedia list</T><A>https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><CLIST><TITLE><X><T>JUnit</T><A>https://junit.org</A><L>en</L><F>HTML</F></X></TITLE>
          <ITEM><X><T>JUNit 4 FAQ</T><A>https://junit.org/junit4/faq.html</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X status="obsolete"><T>GuiceBerry</T><A>https://github.com/zorzella/guiceberry</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>JUnit 5 User Guide</T><A>https://junit.org/junit5/docs/current/user-guide/</A><L>en</L><F>HTML</F></X></ITEM>
        </CLIST></ITEM>
        <ITEM><X><T>TestNG</T><A>https://testng.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Agitar</T><A>http://www.agitar.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Truth</T><A>http://truth.dev/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>AssertJ</T><A>https://assertj.github.io/doc/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Hamcrest</T><A>https://hamcrest.org/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Truth</T><A>https://truth.dev/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>NUnit</T><A>https://nunit.org/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Fixie</T><A>https://fixie.github.io/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>NCrunch</T><A>https://www.ncrunch.net</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>QUnit</T><A>https://qunitjs.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Mocha</T><A>https://mochajs.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Sinon</T><A>https://sinonjs.org</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Jest</T><A>https://jestjs.io</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status="obsolete"><T>Google JS Test</T><A>https://github.com/google/gjstest</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status="obsolete"><T>js-test-driver</T><A>https://code.google.com/archive/p/js-test-driver</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>C++</TITLE>
        <ITEM><X><T>GoogleTest</T><A>https://github.com/google/googletest</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><X><T>personal notes</T><A>../notes/unittest.html</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mocking</TITLE>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>Moq</T><A>https://github.com/moq</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>Mockito</T><A>https://site.mockito.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mutation testing</TITLE>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X status="obsolete"><T>Jester</T><A>https://jester.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>PIT</T><A>https://pitest.org</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test coverage</TITLE>
      <ITEM><X><T>SeaLights</T><A>https://www.tricentis.com/products/quality-intelligence-sealights</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>C/C++</TITLE>
        <ITEM><X><T>CTC++</T><A>http://www.testwell.fi/ctcdesc.html</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>EMMA</T><A>https://emma.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Cobertura</T><A>http://cobertura.github.io/cobertura/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>JaCoCo</T><A>https://www.jacoco.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>Istanbul</T><A>https://istanbul.js.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test reports</TITLE>
        <ITEM><BLIST><TITLE><X><T>Allure</T><A>https://allurereport.org/docs/</A><L>en</L><F>HTML</F></X></TITLE>
          <ITEM><X><T>Allure Docker Service</T><A>https://github.com/fescobar/allure-docker-service</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>Allure TestOps</T><A>https://docs.qameta.io/allure-testops/</A><L>en</L><F>HTML</F></X></ITEM>
        </BLIST></ITEM>
        <ITEM><X><T>Extent Reports</T><A>https://extentreports.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><ANCHOR>reportportal</ANCHOR><BLIST><TITLE><X><T>ReportPortal</T><A>https://reportportal.io/</A><L>en</L><F>HTML</F></X></TITLE>
          <ITEM><X><T>demo</T><A>https://demo.reportportal.io/ui/</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>source code</T><A>https://github.com/reportportal</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>YouTube</T><A>https://www.youtube.com/c/ReportPortal</A><L>en</L><F>HTML</F><FEED><A>https://www.youtube.com/feeds/videos.xml?channel_id=UCsZxrHqLHPJcrkcgIGRG-cQ</A><F>Atom</F></FEED></X></ITEM>
          <ITEM><X><T>personal notes</T><A>../notes/reportportal.html</A><L>en</L><F>HTML</F></X></ITEM>
        </BLIST></ITEM>
        <ITEM><X><T>Testomat</T><A>https://testomat.io/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>ARA</T><A>https://github.com/Decathlon/ara</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>Test Automation Frameworks</T><A>https://safsdev.sourceforge.net/FRAMESDataDrivenTestAutomationFrameworks.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Carl</FIRSTNAME><LASTNAME>Nagle</LASTNAME></AUTHOR><COMMENT>A presentation of keyword driven automation and an architecture of a framework for such testing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>When Should a Test Be Automated?</T><A>https://www.stickyminds.com/sites/default/files/article/file/2014/When%20Should%20a%20Test%20Be%20Automated.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Marick</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>Some ideas about the factors to be taken into account to decide for automated tests vs. manual tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Seven Steps to Test Automation Success</T><A>https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.471.9363&amp;rep=rep1&amp;type=pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Bret</FIRSTNAME><LASTNAME>Pettichord</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>An overview of test automation with some very good practical comments.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Diagnosing Java code: Unit tests and automated code analysis working together</T><ST>Your tests can help your tools to analyze your code</ST><A>https://www.ibm.com/developerworks/java/library/j-diag1015/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>Unit tests and code analysis complete each other, but I am not sure the technologies are mature enough today to have an interesting return on investment when applied.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Cost of Testing</T><A>https://testing.googleblog.com/2009/10/cost-of-testing.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mi≈°ko</FIRSTNAME><LASTNAME>Hevery</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>10</MONTH><DAY>2</DAY></DATE><COMMENT>A personal evaluation of the cost of writing unit tests and their benefits.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Contract Test</T><A>https://martinfowler.com/bliki/ContractTest.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>1</MONTH><DAY>12</DAY></DATE><COMMENT>A contract test verifies that a test double is still up-to-date with the real service it is simulating.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Efficient JavaScript unit testing</T><ST>Automate JavaScript code testing across browsers</ST><A>https://www.ibm.com/developerworks/library/os-jstesting/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Hazem</FIRSTNAME><LASTNAME>Saleh</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>27</DAY></DATE><COMMENT>An introduction to JSTestDriver.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Tools to unit test your JavaScript</T><ST>Using QUnit, YUI Test, and JSTestDriver</ST><A>https://www.ibm.com/developerworks/library/wa-tools/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sebastiano</FIRSTNAME><LASTNAME>Armeli-Battana</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>10</DAY></DATE><COMMENT>A presentation of QUnit, YUI Test, and JSTestDriver.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Testing like the TSA</T><A>https://signalvnoise.com/posts/3159-testing-like-the-tsa</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>11</DAY></DATE><COMMENT>Some pragmatic advice on writing tests, rather than blindly applying TDD.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://signalvnoise.com/posts/3159-testing-like-the-tsa"><X><T>Testing Like the TSA</T><A>https://blog.cleancoder.com/uncle-bob/2017/03/06/TestingLikeTheTSA.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>A (late) answer to the previous blog entry.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>JS Unit Testing</T><A>https://www.youtube.com/watch?v=-IYqgx8JxlU</A><L>en</L><F>MP4</F><DURATION><MINUTE>55</MINUTE><SECOND>38</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>18</DAY></DATE></X><AUTHOR><FIRSTNAME>Seth</FIRSTNAME><LASTNAME>McLaughlin</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>7</MONTH><DAY>16</DAY></DATE><COMMENT>A presentation of Venus.js and a demo of Venus.js and Mocha.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>No more flaky tests on the Go team</T><A>https://www.thoughtworks.com/insights/blog/no-more-flaky-tests-go-team</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pavan</FIRSTNAME><LASTNAME>Sudarshan</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>9</MONTH><DAY>25</DAY></DATE><COMMENT>How to fix a project where people got used to have flaky tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Rails Conf 2013 The Magic Tricks of Testing by Sandi Metz</T><A>https://www.youtube.com/watch?v=URSWYvyc42M</A><L>en</L><F>MP4</F><DURATION><MINUTE>32</MINUTE><SECOND>22</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>22</DAY></DATE></X><AUTHOR><FIRSTNAME>Sandi</FIRSTNAME><LASTNAME>Metz</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>An effective simple explanation of the unit tests to be written and how to write them, based on query vs. command and incoming vs. internal vs. outgoing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Your test suite is trying to tell you something</T><A>https://blog.jgc.org/2013/07/your-test-suite-is-trying-to-tell-you.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Graham-Cumming</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>3</DAY></DATE><COMMENT>An example of a flaky test which is in fact a real production bug.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Introducing Unit Testing in Legacy Code - Richard Blewett</T><A>https://www.youtube.com/watch?v=2jNqc6YWMuU</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>24</MINUTE><SECOND>14</SECOND></DURATION><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE></X><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><LASTNAME>Blewett</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>Some techniques (introducing an interface, using Fakes‚Ä¶) to allow unit testing of legacy code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why Most Unit Testing is Waste</T><A>https://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><MIDDLENAME>O.</MIDDLENAME><LASTNAME>Coplien</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>2</MONTH></DATE><COMMENT>An analysis of doing proper testing with some very surprising ideas: throw away tests that haven‚Äôt failed in a year, prefer integration tests to unit tests‚Ä¶</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Slow database test fallacy</T><A>https://dhh.dk/2014/slow-database-test-fallacy.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>DHH debunks the fact that unit tests should not access the database because this would slow down too much their execution.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Self Testing Code</T><A>https://martinfowler.com/bliki/SelfTestingCode.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>1</DAY></DATE><COMMENT>The advantages of having a test suite able to detect the most serious bugs.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Unit Test</T><A>https://martinfowler.com/bliki/UnitTest.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>5</DAY></DATE><COMMENT>The common traits of the different definitions of "unit tests", mocking or not the collaborators of the tested unit, duration of the test run and when to execute them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Goto Fail, Heartbleed, and Unit Testing Culture</T><A>https://martinfowler.com/articles/testing-culture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Bland</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>3</DAY></DATE><COMMENT>After trying to convince the reader of the benefits of Unit Testing with demonstrating how the Goto Fail and Heartbleed bugs could have been avoided, <AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Bland</LASTNAME></AUTHOR> explains how the Unit Test culture has been introduced at Google and gives advice how to do the same in other companies. This is a pity that this article is much too long, the same message could have been expressed in a much shorter way.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>7 Popular Unit Test Naming Conventions</T><A>https://vitalflux.com/7-popular-unit-test-naming-conventions/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ajitesh</FIRSTNAME><LASTNAME>Kumar</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>7</MONTH><DAY>30</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>BDDon‚Äôt</T><ST>The practice and the tools</ST><A>http://thoughtworks.github.io/p2/issue12/bdd-dont/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Dishman</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>12</MONTH></DATE><COMMENT>The author advises against using BDD automated tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Should tests be ordered or not?</T><A>https://blog.frankel.ch/should-tests-be-ordered-or-not/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicolas</FIRSTNAME><LASTNAME>Fr√§nkel</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH><DAY>25</DAY></DATE><COMMENT>The author claims that tests can be ordered, but some arguments are biased (e.g. of course integration tests must be run after unit tests).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Testing Experimental Code in Production with Scientist.NET</T><ST>A .NET port of the Ruby library allows for experimental testing of code that's gone to production.</ST><A>https://visualstudiomagazine.com/articles/2016/11/01/testing-experimental-code.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>30</DAY></DATE><COMMENT>A short presentation of Scientist, a library to compare the output of two different implementations.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Myths About Unit Tests</T><A>https://8thlight.com/insights/myths-about-unit-tests</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Fabien</FIRSTNAME><LASTNAME>Townsend</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>Some obvious comments about unit testing from a newby.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Test Contra-variance</T><A>https://blog.cleancoder.com/uncle-bob/2017/10/03/TestContravariance.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>3</DAY></DATE><COMMENT>A rather over-simplified description of the decoupling between the tests and the production code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why Do Programmers Fail to Write Good Unit Tests?</T><A>https://www.typemock.com/why-do-programmers-fail-to-write-good-unit-tests</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Leah</FIRSTNAME><LASTNAME>Grantz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>17</DAY></DATE><COMMENT>An opinion about the interest of unit tests and the characteristics of good ones.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>‚ÄúUnit‚Äù Tests?</T><A>https://www.facebook.com/notes/kent-beck/unit-tests/1726369154062608/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>6</DAY></DATE><COMMENT>The boundary between unit and integration tests is fuzzy.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What to test and not to test</T><A>https://blog.ploeh.dk/2018/11/12/what-to-test-and-not-to-test/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Seemann</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH><DAY>12</DAY></DATE><COMMENT>The ideas presented here are mostly common sense.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Programmer Test Principles</T><A>https://medium.com/@kentbeck_7670/programmer-test-principles-d01c064d7934</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>A list of principles to be considered for automated developer tests, their relative importance depends on the context.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="dead"><T>Unit Test Insanity</T><ST>Are you repeating your unit tests in an effort to expect a different result?</ST><A>https://dzone.com/articles/unit-test-insanity</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Vester</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>12</MONTH><DAY>18</DAY></DATE><COMMENT>An example of something that should not be tested: an exception thrown by a subsystem of the SUT and not managed by the SUT.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Applying Data Analytics to Test Automation</T><A>https://www.stickyminds.com/article/applying-data-analytics-test-automation</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Harsh</FIRSTNAME><LASTNAME>Vardhan</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>12</MONTH><DAY>30</DAY></DATE><COMMENT>A good advice for keeping and analysing automated test results, but this is too high-level and too few usage examples are given.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Open Source Test Reporting Tools</T><A>https://www.softwaretestingmagazine.com/tools/open-source-test-reporting-tools/</A><L>en</L><F>HTML</F></X><DATE><YEAR>2021</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>A list of tools to generate reports for automated tests.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Testing in the Twenties</T><A>https://www.tbray.org/ongoing/When/202x/2021/05/15/Testing-in-2021</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tim</FIRSTNAME><LASTNAME>Bray</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>5</MONTH><DAY>15</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Tim</FIRSTNAME><LASTNAME>Bray</LASTNAME></AUTHOR>‚Äôs opinion on automated tests (unit and integration tests).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Unit testing with GPT</T><A>https://www.typemock.com/unit-testing-with-gbt/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shila</FIRSTNAME><LASTNAME>Toledano</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>1</MONTH><DAY>1</DAY></DATE><COMMENT>Some advice to not use Gradient Boosting Trees to generate unit tests, but there is little information here.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Test Desiderata</TITLE>
      <ITEM><ARTICLE><X><T>Test Desiderata 1/12 Behavior</T><A>https://www.youtube.com/watch?v=5LOdKDqdWYU</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>40</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>14</DAY></DATE><COMMENT>Tests should be sensitive to the behaviour of the code being tested.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 2/12 Tests Should be Structure-Insensitive</T><A>https://www.youtube.com/watch?v=bvRRbWbQwDU</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>21</DAY></DATE><COMMENT>Tests should be insensitive to changes in the structure of the tested code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 3/12  Readable</T><A>https://www.youtube.com/watch?v=bDaFPACTjj8</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>Tests should read like a story.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 4/12 Tests Should be Easy to Write</T><A>https://www.youtube.com/watch?v=CAttTEUE9HM</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>16</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>12</MONTH><DAY>12</DAY></DATE><COMMENT>Tests should should be easy to write, otherwise this means the tested code has a design problem.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 5/12: Tests Should be Fast</T><A>https://www.youtube.com/watch?v=L0dZ7MmW6xc</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>2</DAY></DATE><COMMENT>Tests should should be fast in order to not break the thinking flow.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 6/12: Tests Should be Deterministic</T><A>https://www.youtube.com/watch?v=PwWyp-wpFiw</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>13</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>10</DAY></DATE><COMMENT>Tests should should be deterministic, with an example of a flaky test.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 7/12: Tests Should Be Automated</T><A>https://www.youtube.com/watch?v=YQlmP08dj6g</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>16</DAY></DATE><COMMENT>Tests should should be automated, there is a trade-off between automated tests and manual tests.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 8/12: Tests Should Be Isolated (from each other)</T><A>https://www.youtube.com/watch?v=HApI2cspQus</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>23</DAY></DATE><COMMENT>Tests should should use only locally initialised state or should leave the global state exactly as it was.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 9/12 Tests Should Be Composable</T><A>https://www.youtube.com/watch?v=Wf3WXYaMt8E</A><L>en</L><F>MP4</F><DURATION><MINUTE>4</MINUTE><SECOND>13</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>30</DAY></DATE><COMMENT>Production code should be composable, tests should also be, so there is no need to test the cross-product of some data combinations.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 10/12: Tests Should be Specific</T><A>https://www.youtube.com/watch?v=8lTfrCtPPNE</A><L>en</L><F>MP4</F><DURATION><MINUTE>4</MINUTE><SECOND>27</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>13</DAY></DATE><COMMENT>When a given test fails, it should be obvious where the bug is in the production code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 11/12: Tests Should Predict Production</T><A>https://www.youtube.com/watch?v=7o5qxxx7SmI</A><L>en</L><F>MP4</F><DURATION><MINUTE>4</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>20</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test Desiderata 12/12: Tests Should be Inspiring</T><A>https://www.youtube.com/watch?v=2Q1O8XBVbZQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>5</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Sutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>27</DAY></DATE><COMMENT>Tests should inspire confidence.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Test doubles</TITLE>
      <ITEM><ARTICLE><X><T>Working with Microsoft Moles Framework</T><A>https://www.codeguru.com/csharp/working-with-microsoft-moles-framework/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joydip</FIRSTNAME><LASTNAME>Kanjilal</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>11</DAY></DATE><COMMENT>A description on how to start with Moles, a framework to mock .NET methods.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>When to Mock</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>10</DAY></DATE><COMMENT>Mock at the boundaries and write your own mocks.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>The different types of test doubles</TITLE>
        <ITEM><ARTICLE><X><T>Test Double</T><A>https://martinfowler.com/bliki/TestDouble.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>17</DAY></DATE><COMMENT>The definitions of Dummy objects, Fake objects, Stub, Spies, and Mocks.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>The Little Mocker</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>14</DAY></DATE><COMMENT>The differences between Dummy, Stub, Spy, Mock, and Fake.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Mockito</TITLE>
        <ITEM><ARTICLE><X><T>When/how to use Mockito Answer</T><A>https://testing.googleblog.com/2014/03/whenhow-to-use-mockito-answer.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Hongfei</FIRSTNAME><LASTNAME>Ding</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>3</DAY></DATE><COMMENT>A short description of using Mockito‚Äôs <CODEROUTINE>Answer</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Mockito Strict Stubbing and The UnnecessaryStubbingException</T><A>https://www.baeldung.com/mockito-unnecessary-stubbing-exception</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jonathan</FIRSTNAME><LASTNAME>Cook</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A description of Strict Stubbing and how to disable it.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Introduction to PowerMock</T><A>https://www.baeldung.com/intro-to-powermock</A><L>en</L><F>HTML</F></X><DATE><YEAR>2024</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A short description of PowerMockito, a PowerMock‚Äôs Mockito extension enabling to mock final, private or static methods.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Oracles</TITLE>
      <ITEM><ARTICLE><X><T>Using Test Oracles in Automation</T><A>https://www.youtube.com/watch?v=Yusd_ogkiaQ</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>29</MINUTE><SECOND>29</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE></X><AUTHOR><FIRSTNAME>Douglas</FIRSTNAME><LASTNAME>Hoffman</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>4</MONTH><DAY>25</DAY></DATE><COMMENT>This presentation presents some basic, but nevertheless interesting, ideas about strategies to determine if an automated test succeeded or failed: no oracle, true oracle, consistency, self-referential, and heuristic.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Testing with Simple and Combinatorial Oracles</T><A>https://xp123.com/testing-with-combinatorial-oracles/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Wake</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>14</DAY></DATE><COMMENT>Some ideas of oracles.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Tools</TITLE>
      <ITEM><BLIST><TITLE>xUnit</TITLE>
        <ITEM><ARTICLE><X><T>Automated Testing Patterns and Smells</T><A>https://www.youtube.com/watch?v=Pq6LHFM4JvE</A><L>en</L><F>MP4</F><DURATION><MINUTE>59</MINUTE><SECOND>34</SECOND></DURATION><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Gerard</FIRSTNAME><LASTNAME>Meszaros</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>How to detect and fix issues in unit tests: code smells (tests difficult to understand, tests containing coding errors, tests difficult / impossible to write), behaviour smells (tests failing when they should succeed - erratic test, fragile test -, tests succeeding when they should fail), and project smells.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JUnit</TITLE>
        <ITEM><ARTICLE><X><T>Test Infected:</T><ST>Programmers Love Writing Tests</ST><A>http://members.pingnet.ch/gamma/junit.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Erich</FIRSTNAME><LASTNAME>Gamma</LASTNAME></AUTHOR><COMMENT>The two authors describe the return of investment of unit testing and propose their own tool for Java: JUnit.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Incremental development with Ant and JUnit</T><A>http://carfield.com.hk/document/java/articles/ant+junit.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Malcolm</FIRSTNAME><LASTNAME>Davis</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>The author describes how he used Ant for his build process, this one includes automatic unit tests with JUnit.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="removed"><T>JUnit antipatterns</T><ST>How to resolve</ST><A>https://www.ibm.com/developerworks/opensource/library/os-junit/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Garrett</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>7</MONTH><DAY>19</DAY></DATE><COMMENT>Some common testing errors: testing only the expected case, forgetting boundary situations, breaking encapsulation, and too much test complexity.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality="1"><T>JUnit 5 by Marc Philipp</T><A>https://www.youtube.com/watch?v=0qI6_NKFQsY</A><L>en</L><F>MP4</F><DURATION><MINUTE>51</MINUTE><SECOND>22</SECOND></DURATION><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>11</DAY></DATE></X><AUTHOR><FIRSTNAME>Marc</FIRSTNAME><LASTNAME>Philipp</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>A detailed presentation of JUnit 5, describing the differences with JUnit 4 and giving a rational of the changes.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="zombie"><T>The top five reasons you should be using JUnit 5 right now!</T><A>https://developer.ibm.com/dwblog/2017/top-five-reasons-to-use-junit-5-java/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Perry</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>17</DAY></DATE><COMMENT>An overview of the most important improvements in JUnit 5.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>What‚Äôs new in JUnit 5.4</T><A>https://jworks.io/whats-new-in-junit-5-4/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Erik</FIRSTNAME><LASTNAME>Pragt</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>2</MONTH><DAY>6</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Know for Sure with Property-Based Testing</T><ST>How do you test your code against thousands of values?</ST><A>https://blogs.oracle.com/javamagazine/post/know-for-sure-with-property-based-testing</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Johannes</FIRSTNAME><LASTNAME>Link</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>8</MONTH><DAY>20</DAY></DATE><COMMENT>An introduction to jqwik, a library to generate test data.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>JUnit 5.6 Makes Testing Easy with New Features</T><ST>New features such as the ability to define test execution order and run tests in parallel make this an important release.</ST><A>https://blogs.oracle.com/javamagazine/post/junit-56-makes-testing-easy-with-new-features</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mert</FIRSTNAME><LASTNAME>√áali≈ükan</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>4</DAY></DATE><COMMENT>Some features added since JUnit 5.0: order of execution, defining timeouts, conditional test execution, programmatic extensions, and running tests in parallel.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Working and unit testing with temporary files in Java</T><ST>Temporary files are frequently used in testing and in production. Here is how to create and manage‚Äîand delete‚Äîthem.</ST><A>https://blogs.oracle.com/javamagazine/post/working-and-unit-testing-with-temporary-files-in-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Binstock</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>2</MONTH><DAY>27</DAY></DATE><COMMENT>Some basic information about temporary files in JUnit 4, JUnit 5, and plain Java.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Writing Nested Tests With JUnit 5</T><A>https://www.petrikainulainen.net/programming/testing/junit-5-tutorial-writing-nested-tests/</A><L>en</L><F>HTML</F></X><DATE><YEAR>2021</YEAR><MONTH>12</MONTH><DAY>15</DAY></DATE><COMMENT>A short presentation of <CODEROUTINE>@Nested</CODEROUTINE> classes.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Guide to Dynamic Tests in Junit 5</T><A>https://www.baeldung.com/junit5-dynamic-tests</A><L>en</L><F>HTML</F></X><DATE><YEAR>2024</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT>A description of dynamic tests.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Writing Templates for Test Cases Using JUnit 5</T><A>https://www.baeldung.com/junit5-test-templates</A><L>en</L><F>HTML</F></X><DATE><YEAR>2024</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT>A too short presentation of test templates.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>A Guide to @RepeatedTest in JUnit 5</T><A>https://www.baeldung.com/junit-5-repeated-test</A><L>en</L><F>HTML</F></X><DATE><YEAR>2024</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT>A description of repeated tests.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>JUnit 5 @Nested Test Classes</T><A>https://www.baeldung.com/junit-5-nested-test-classes</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Emanuel</FIRSTNAME><LASTNAME>Trandafir</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT>A short explanation and example of nested tests.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Test Parameterization With JUnit 5.7: A Deep Dive Into @EnumSource</T><ST>@EnumSource makes an impression of an esoteric device that can hardly feel useful. Though, for the right problem, they are priceless. Find out where they shine.</ST><A>https://dzone.com/articles/junit5-parameterized-tests-with-enumsource</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Oliver</FIRSTNAME><LASTNAME>Gondza</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>3</MONTH><DAY>14</DAY></DATE><COMMENT>A description of <CODEROUTINE>@EnumSource</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>JUnit 5 Temporary Directory Support</T><A>https://www.baeldung.com/junit-5-temporary-directory</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jonathan</FIRSTNAME><LASTNAME>Cook</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>3</MONTH><DAY>17</DAY></DATE><COMMENT>How to use <CODEROUTINE>@TempDir</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Assertions in JUnit 4 and JUnit 5</T><A>https://www.baeldung.com/junit-assertions</A><L>en</L><F>HTML</F></X><DATE><YEAR>2024</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A description of JUnit 4 and 5 assertions, some are not clearly explained.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality="1"><T>Guide to JUnit 5 Parameterized Tests</T><A>https://www.baeldung.com/parameterized-tests-junit-5</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ali</FIRSTNAME><LASTNAME>Dehghani</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>An exhaustive description of parametrised tests.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>TestNG</TITLE>
        <ITEM><ARTICLE><X status="zombie"><T>Make your Selenium Test Results Live using Grafana &amp; InfluxDB</T><A>https://blog.testproject.io/2020/05/12/make-your-selenium-test-results-live-using-grafana-and-influxdb/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Giridhar</FIRSTNAME><LASTNAME>Rajkumar</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>12</DAY></DATE><COMMENT>Despite the title, this article is about integrating TestNG results in real time in InfluxDB and display them in Grafana.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>AssertJ</TITLE>
        <ITEM><ARTICLE><X><T>Hints for Unit Testing With AssertJ</T><ST>Discover a couple of tips and tricks for writing better unit tests with the AssertJ framework. Every recommendation includes a practical demonstration.</ST><A>https://dzone.com/articles/hints-for-unit-testing-with-assertj</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Arno≈°t</FIRSTNAME><LASTNAME>Havelka</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>2</MONTH><DAY>26</DAY></DATE><COMMENT>Some better practices when using AssertJ.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Allure</TITLE>
        <ITEM><ARTICLE><X><T>Allure TestOps Full Overview</T><A>https://www.youtube.com/watch?v=-H7dSm8pcMo</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>25</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Egor</FIRSTNAME><LASTNAME>Ivanov</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>6</MONTH><DAY>11</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>ReportPortal</TITLE>
        <ITEM><ARTICLE><X><T>[EN] ReportPortal + Machine Learning details</T><A>https://www.youtube.com/watch?v=d2ekWI2exZ4</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>39</MINUTE><SECOND>22</SECOND></DURATION></X><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>A presentation of ReportPortal and some technical details (tf‚Äìidf, ElasticSearch configuration‚Ä¶).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>How to Get Started with ReportPortal.io Automation Dashboard</T><A>https://www.youtube.com/watch?v=By41MuZDh70</A><L>en</L><F>MP4</F><DURATION><MINUTE>8</MINUTE><SECOND>34</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Joe</FIRSTNAME><LASTNAME>Colantonio</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>10</MONTH><DAY>5</DAY></DATE><COMMENT>Installing ReportPortal and using it for Serenity tests.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>[EN] New ML-based Analyzer in ReporPortal 5.1+ for fail categorization.</T><A>https://www.youtube.com/watch?v=HUNvNv-q1XE</A><L>en</L><F>MP4</F><DURATION><MINUTE>12</MINUTE><SECOND>0</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Maryia</FIRSTNAME><LASTNAME>Ivanina</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>22</DAY></DATE><COMMENT>Improved defect classification with gradient boosting trees.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>ML-Analyzer improvements in 5.6 ReportPortal</T><A>https://www.youtube.com/watch?v=MqRixlqeA_U</A><L>en</L><F>MP4</F><DURATION><MINUTE>11</MINUTE><SECOND>27</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Maryia</FIRSTNAME><LASTNAME>Ivanina</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>12</MONTH><DAY>2</DAY></DATE><COMMENT>Automated analysis for "no defect" and "to investigate", ML suggestions, taking into account exception types and status codes‚Ä¶</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Integrating Playwright with ReportPortal</T><A>https://www.youtube.com/watch?v=UdeRKqFVcuU</A><L>en</L><F>MP4</F><DURATION><MINUTE>17</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ilya</FIRSTNAME><LASTNAME>Hancharyk</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>4</MONTH><DAY>29</DAY></DATE><COMMENT>A detailed presentation on how to exploit Playwright tests in ReportPortal.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>From Reporting to Insights: Visualize Your Test Results with ReportPortal</T><A>https://www.youtube.com/watch?v=CMDa5ZUUOh0</A><L>en</L><F>MP4</F><DURATION><MINUTE>19</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ilya</FIRSTNAME><LASTNAME>Hancharyk</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>12</MONTH><DAY>27</DAY></DATE><COMMENT>A presentation of exploiting attributes in ReportPortal.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mutation testing</TITLE>
      <ITEM><ARTICLE><X><T>Mutation Testing</T><A>https://blog.cleancoder.com/uncle-bob/2016/06/10/MutationTesting.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>10</DAY></DATE><COMMENT>An introduction to mutation testing.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Fuzz testing</TITLE>
      <ITEM><ARTICLE><X><T>Zurich Go Meetup: Go-Fuzz: Practical Fuzzing with Go</T><A>https://www.youtube.com/watch?v=3J9qbvOfklg</A><L>en</L><F>MP4</F><DURATION><MINUTE>26</MINUTE><SECOND>55</SECOND></DURATION><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>20</DAY></DATE></X><AUTHOR><FIRSTNAME>Roberto</FIRSTNAME><LASTNAME>Clapis</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>A presentation of Go-Fuzz and some advice on how to use it.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Performance testing</TITLE>
      <ITEM><ARTICLE><X><T>Using open source tools for performance testing</T><A>https://www.youtube.com/watch?v=k9h51BM2h4w</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>4</MINUTE><SECOND>37</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>24</DAY></DATE></X><AUTHOR><FIRSTNAME>Goranka</FIRSTNAME><LASTNAME>Bjedov</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE><COMMENT>Some generalities about performance testing of Web applications: description of the different types of performances tests, architecture of a performance test environment, in-house vs. vendor vs. open source performance tools, keeping all the data for a while‚Ä¶</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Code coverage</TITLE>
      <ITEM><ARTICLE><X quality="1"><T>Software Negligence and Testing Coverage</T><A>https://kaner.com/pdfs/negligence_and_testing_coverage.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>After describing what is negligence and malpractice, explaining that tests must be prioritised depending on the risks, <AUTHOR><FIRSTNAME>Cem</FIRSTNAME><LASTNAME>Kaner</LASTNAME></AUTHOR> gives a list of coverage measures as some food for thought.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Coverage Analysis</T><A>https://www.bullseye.com/coverage.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Cornett</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>7</MONTH><DAY>29</DAY></DATE><COMMENT>An exhaustive list of the different types of coverage measurements, but some descriptions are not so clear‚Ä¶</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>In pursuit of code quality: Don't be fooled by the coverage report</T><ST>Are your test coverage measurements leading you astray?</ST><A>https://www.ibm.com/developerworks/java/library/j-cq01316/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>31</DAY></DATE><COMMENT>An introduction to code coverage. The coverage booby traps are clearly exposed, but this article is too much verbose.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code coverage goal: 80% and no less!</T><A>https://testing.googleblog.com/2010/07/code-coverage-goal-80-and-no-less.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alberto</FIRSTNAME><LASTNAME>Savoia</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>7</MONTH><DAY>20</DAY></DATE><COMMENT>How much code coverage should we target?</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code coverage considered harmful</T><A>http://adiws.blogspot.com/2012/04/code-coverage-considered-harmful.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Graham</FIRSTNAME><LASTNAME>Pearson</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>6</DAY></DATE><COMMENT>The perverse effects of code coverage when dealing with dumb developers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Coverage Best Practices</T><A>https://testing.googleblog.com/2020/08/code-coverage-best-practices.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Carlos</FIRSTNAME><LASTNAME>Arguelles</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Marko</FIRSTNAME><LASTNAME>Ivankoviƒá</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Adam</FIRSTNAME><LASTNAME>Bender</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>8</MONTH><DAY>7</DAY></DATE><COMMENT>Some good advice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Intro to JaCoCo</T><A>https://www.baeldung.com/jacoco</A><L>en</L><F>HTML</F></X><DATE><YEAR>2024</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>