<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE status="unmaintained" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>C++</TITLE>
<PATH>links/cpp.xml</PATH>
<DATE><YEAR>2012</YEAR><MONTH>10</MONTH><DAY>3</DAY></DATE>
<CONTENT>

<X><T>Yahoo page</T><A>http://dir.yahoo.com/Computers_and_Internet/Programming_and_Development/Languages/C_and_C__/C__/</A><L>en</L><F>HTML</F></X>,
<X><T>Cetus</T><A>http://www.sente.ch/cetus/oo_c_plus_plus.html</A><L>en</L><F>HTML</F></X>
(<X><T>M</T><A>http://web.nchu.edu.tw/~jlu/cetus/oo_c_plus_plus.html</A><L>en</L><F>HTML</F></X>,
<X><T>M</T><A>http://www.objenv.com/cetus/oo_c_plus_plus.html</A><L>en</L><F>HTML</F></X>),<X><T>Open Directory</T><A>http://www.dmoz.org/Computers/Programming/Languages/C%2b%2b/</A><L>en</L><F>HTML</F></X>,
<X><T>ZAM</T><A>http://www.fz-juelich.de/zam/cxx</A><L>en</L><F>HTML</F></X><BR/>

<X><T>WG21</T><A>http://www.open-std.org/jtc1/sc22/wg21/</A><L>en</L><F>HTML</F></X>,
<X><T>C/C++ Reference</T><A>http://www.cppreference.com/</A><L>en</L><F>HTML</F></X>,
<X><T>Glen McCluskey</T><A>http://www.glenmccl.com/</A><L>en</L><F>HTML</F></X>,
<X><T>Dinkumware (archive.org)</T><A>http://web.archive.org/web/20110710131926/http://www.dinkumware.com/manuals/default.aspx</A><L>en</L><F>HTML</F></X>,
<X><T>cplusplus.com</T><A>http://www.cplusplus.com/</A><L>en</L><F>HTML</F></X><BR/>

ANSI C++:
<X><T>the committee</T><A>http://www.open-std.org/jtc1/sc22/wg21/</A><L>en</L><F>HTML</F></X>,
<X><T>standard draft</T><A>http://std.dkuug.dk/jtc1/sc22/wg21/docs/wp/html/oct97/</A><L>en</L><F>HTML</F></X>,
<X><T>beyond the ARM</T><A>http://www.corfield.org/index.php?event=cplusplus.main</A><L>en</L><F>HTML</F></X><BR/>

compilers:
<X><T>gcc</T><A>coding.html#gcc</A><L>en</L><F>HTML</F></X><BR/>

code documentation:
<X><T>literate programming</T><A>http://www.literateprogramming.com</A><L>en</L><F>HTML</F></X>,
<X><T>doc++</T><A>http://docpp.sourceforge.net</A><L>en</L><F>HTML</F></X>,
<X><T>doxygen</T><A>http://www.doxygen.org</A><L>en</L><F>HTML</F></X><BR/>

<ANCHOR>STL</ANCHOR>STL:
<X><T>STLport</T><A>http://www.stlport.com/</A><L>en</L><F>HTML</F></X>,
<X><T>SGI</T><A>http://www.sgi.com/tech/stl/</A><L>en</L><F>HTML</F></X>,
<X><T>personal notes</T><A>../notes/stl.html</A><L>en</L><F>HTML</F></X><BR/>

iostream:
<X><T>cplusplus.com</T><A>http://www.cplusplus.com/ref/iostream/</A><L>en</L><F>HTML</F></X><BR/>

<X><T>GNU C++ Standard Library</T><A>http://gcc.gnu.org/onlinedocs/libstdc++/</A><L>en</L><F>HTML</F></X><BR/>

FAQ:
<X><T>C++</T><A>http://www.faqs.org/faqs/C++-faq/</A><L>en</L><F>HTML</F></X>,
<X><T>C++ FAQ Lite</T><A>http://www.parashift.com/c++-faq-lite/</A><L>en</L><F>HTML</F></X>,
<X><T>g++</T><A>http://www.faqs.org/faqs/g++-FAQ/plain/</A><L>en</L><F>HTML</F></X>,
<X><T>libraries</T><A>http://www.faqs.org/faqs/C++-faq/libraries/</A><L>en</L><F>HTML</F></X>,
<X><T>Developpez.com</T><A>http://cpp.developpez.com/faq/cpp/</A><L>en</L><F>HTML</F></X><BR/>

check your knowledge:
<X><T>Gimpel</T><A>http://www.gimpel.com/bugs.htm</A><L>en</L><F>HTML</F></X><BR/>

tutorials:
<X><T>C++ Annotations</T><A>http://www.icce.rug.nl/documents/cplusplus/</A><L>en</L><F>HTML</F></X><BR/>

<ANCHOR>rules</ANCHOR>coding rules:
<X><T>Ellemtel</T><A>http://www.doc.ic.ac.uk/lab/cplus/c++.rules/</A><L>en</L><F>HTML</F></X>,
<X><T>Industrial Strength C++</T><A>http://hem.passagen.se/erinyq/industrial/</A><L>en</L><F>HTML</F></X>,
<X><T>Mozilla C++ portability guide</T><A>http://www.literateprogramming.com/portablecpp.pdf</A><L>en</L><F>PDF</F></X>,
<X><T>CoreLinux</T><A>http://corelinux.sourceforge.net/cppstnd.php</A><L>en</L><F>HTML</F></X>,
<X><T>Todd Hoff</T><A>http://www.possibility.com/Cpp/CppCodingStandard.html</A><L>en</L><F>HTML</F></X>,
<X><T>Mark Williams</T><A>http://www.cryst.bbk.ac.uk/%7Eclasslib/bioinf/standards.html</A><L>en</L><F>HTML</F></X>,
<X><T>SPIDER CERN</T><A>http://pst.web.cern.ch/PST/HandBookWorkBook/Handbook/Programming/CodingStandard/c++standard.pdf</A><L>en</L><F>PDF</F></X>,
<X><T>Macadamian</T><A>http://www.macadamian.com/codingconventions.htm</A><L>en</L><F>HTML</F></X>,
<X><T>Universit&#xE4;t Bonn Computer Graphik</T><A>http://cg.cs.uni-bonn.de/docs/teaching/2002/SS/pg2002/documents/ProgrammingGuidelines1-22.pdf</A><L>en</L><F>PDF</F></X><BR/>

<BLIST><TITLE>libraries</TITLE>
<ITEM><X><T>Boost.org</T><A>http://www.boost.org/</A><L>en</L><F>HTML</F></X></ITEM>
<ITEM><X><T>OSE</T><A>http://www.dscpl.com.au</A><L>en</L><F>HTML</F></X>: C++ class library</ITEM>
<ITEM><X><T>ACE</T><A>http://www.cs.wustl.edu/%7Eschmidt/ACE.html</A><L>en</L><F>HTML</F></X>: OS independant IPC mechanisms</ITEM>
</BLIST>

mathematical libraries:
<X><T>CwMtx</T><A>http://www.xs4all.nl/%7Ehkuiper/cwmtx/cwmtx.html</A><L>en</L><F>HTML</F></X><BR/>

interface with other languages:
<X><T>SWIG</T><A>http://www.swig.org/</A><L>en</L><F>HTML</F></X><BR/>

<X><T>personnal notes</T><A>../notes/cpp.html</A><L>en</L><F>HTML</F></X>

<LINE/>

<BLIST><TITLE>articles</TITLE>
  <ITEM><BLIST><TITLE>books</TITLE>
    <ITEM><ARTICLE><X><T>Thinking in C++</T><A>http://www.mindview.net/Books/TICPP/ThinkingInCPP2e.html</A><L>en</L><F>HTML</F></X><AUTHOR><X><T>Bruce Eckel</T><A>http://www.BruceEckel.com/</A><L>en</L><F>HTML</F></X></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>9</MONTH><DAY>27</DAY></DATE><COMMENT>A free book to learn C++.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>memory management</TITLE>
    <ITEM><ARTICLE><X><T>The "Empty Member" C++ Optimization</T><A>http://www.cantrip.org/emptyopt.html</A><L>en</L><F>HTML</F></X><AUTHOR><X><T>Nathan C. Myers</T><A>http://www.cantrip.org/</A><L>en</L><F>HTML</F></X></AUTHOR><DATE><YEAR>1997</YEAR><MONTH>8</MONTH></DATE><COMMENT>Avoid to allocate space for an empty class by using it as a base class.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Memory Management in C++</T><A>http://www.cantrip.org/wave12.html</A><L>en</L><F>HTML</F></X><AUTHOR><X><T>Nathan C. Myers</T><A>http://www.cantrip.org/</A><L>en</L><F>HTML</F></X></AUTHOR><DATE><YEAR>1993</YEAR></DATE><COMMENT>The first part describes the interface to use private memory allocators. The second part gives an example of algorithm for such an allocator.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>C++ Memory Management: From Fear to Triumph</T><A>http://linux.oreillynet.com/pub/a/linux/2003/05/08/cpp_mm-1.html</A><L>en</L><F>HTML</F></X><AUTHOR>George Belotsky</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT>Nothing interesting in the first half of the article: the usual advice about copy constructors and assignment operators, ... But the second part gives an interesting and not so common list of frequent errors.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Counting Objects in C++</T><A>http://www.ddj.com/cpp/184403484</A><L>en</L><F>HTML</F></X><AUTHOR>Scott Meyers</AUTHOR><DATE><YEAR>1998</YEAR><MONTH>4</MONTH></DATE><COMMENT>The driving idea of this article is how to implement class instance counting. But the main interest is that several C++ complex features are referred: thrown exception in <CODEROUTINE>new</CODEROUTINE>, placement <CODEROUTINE>new</CODEROUTINE>/<CODEROUTINE>delete</CODEROUTINE>...</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>exceptions</TITLE>
    <ITEM><ARTICLE><X><T>Exception Handling: A False Sense of Security</T><A>http://www.awprofessional.com/content/images/020163371x/supplements/Exception_Handling_Article.html</A><L>en</L><F>HTML</F></X><X><T>Exception Handling: A False Sense of Security</T><A>http://www.awprofessional.com/content/images/020163371x/supplements/Exception_Handling_Article.html</A><L>en</L><F>HTML</F></X><AUTHOR>Tom Cargill</AUTHOR><DATE><YEAR>1994</YEAR><MONTH>11</MONTH></DATE><COMMENT>A very good warning that exceptions are much more complex to use than you would think.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Coping with Exceptions</T><A>http://www.bleading-edge.com/Publications/C++Report/v9603/Article2a.htm</A><L>en</L><F>HTML</F></X><X><T>Coping with Exceptions</T><A>../attic/Article2a.rtf</A><L>en</L><F>HTML</F></X><AUTHOR>Jack W. Reeves</AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>The author proposes some guidelines to use the exceptions. He applies them to the example described in the previous article.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Exception-Safe Generic Containers</T><A>http://www.cs.huji.ac.il/course/2003/ood/resources/Exception_Safe_Generic_Containers.pdf</A><L>en</L><F>PDF</F></X><X><T>Exception-Safe Generic Containers</T><A>../attic/Exception_Safe_Generic_Containers.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Herb Sutter</AUTHOR><DATE><YEAR>1997</YEAR><MONTH>9</MONTH></DATE><COMMENT>Another answer to Cargill article. This one is simpler than Reeves' one.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Unmanaged Pointers in C++: Parameter Evaluation, auto_ptr, and Exception Safety</T><A>http://www.ddj.com/cpp/184403851</A><L>en</L><F>HTML</F></X><AUTHOR>Herb Sutter</AUTHOR><DATE><YEAR>2002</YEAR></DATE><COMMENT>Understanding the evaluation order of function parameters and how to correctly use<CODEROUTINE>auto_ptr</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>C++ exception-handling tricks for Linux - Four techniques for dealing with built-in language limitations</T><A>http://www.ibm.com/developerworks/library/l-cppexcep.html</A><L>en</L><F>HTML</F></X><AUTHOR>Sachin O. Agrawal</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>A bag of tricks for exceptions: dumping the backtrace, translating signals into exceptions, catching exceptions thrown during construction/destruction of global variables and ignoring exceptions in non-vital threads.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>templates</TITLE>
    <ITEM><ARTICLE><X quality='2'><T>Using Templates in Practice</T><A>http://www.ddj.com/cpp/184403945</A><L>en</L><F>HTML</F></X><AUTHOR>David Vandevoorde</AUTHOR><AUTHOR>Nicolai M. Josuttis</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>2</MONTH></DATE><COMMENT>A very practical description of template use: how to handle their sources (inclusion vs. separation), precompiled header, debugging...</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Template Metaprograms</T><A>http://osl.iu.edu/%7Etveldhui/papers/Template-Metaprograms/meta-art.html</A><L>en</L><F>HTML</F></X><X><T>Template Metaprograms</T><A>http://www10.informatik.uni-erlangen.de/~pflaum/pflaum/ProSeminar/meta-art.html</A><L>en</L><F>HTML</F></X><AUTHOR>Todd Veldhuizen</AUTHOR><DATE><YEAR>1995</YEAR><MONTH>5</MONTH></DATE><COMMENT>Stretching template use beyond belief in order to help the compiler... The resulting code is simply unreadable. There are better ways to improve performance than using this trick.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Expression Templates</T><A>http://www10.informatik.uni-erlangen.de/~pflaum/pflaum/Literatur_Grid/exprtmpl.ps.gz</A><L>en</L><F>PostScript</F></X><AUTHOR>Todd Veldhuizen</AUTHOR><DATE><YEAR>1995</YEAR><MONTH>6</MONTH></DATE><COMMENT>This paper applies the same techniques as the previous one to handle expression evaluation without defining a routine. This time the result is interesting: code is faster and more readable than using the usual routine definition.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>C++ Expression Templates</T><A>http://www.ddj.com/cpp/184401627</A><L>en</L><F>HTML</F></X><AUTHOR>Angelika Langer</AUTHOR><AUTHOR>Klaus Kreft</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>3</MONTH></DATE><COMMENT>Yet another article describing how to use templates to generate readable expressions evaluated at compilation time.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Traits: a new and useful template technique</T><A>http://www.cantrip.org/traits.html</A><L>en</L><F>HTML</F></X><AUTHOR><X><T>Nathan C. Myers</T><A>http://www.cantrip.org/</A><L>en</L><F>HTML</F></X></AUTHOR><DATE><YEAR>1995</YEAR><MONTH>6</MONTH></DATE><COMMENT>A description of what traits are and the example of their use in <CODEROUTINE>iostream</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Class Template for N-Dimensional Generic Resizable Arrays</T><A>http://www.ddj.com/cpp/184401319</A><L>en</L><F>HTML</F></X><AUTHOR>Giovanni Bavestrelli</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>12</MONTH></DATE><COMMENT>Yet another matrix implementation... This one is using templates.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>An Improved Variant Type Based on Member Templates</T><A>http://www.ddj.com/cpp/184401293</A><L>en</L><F>HTML</F></X><AUTHOR>Fernando Cacciola</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>10</MONTH></DATE><COMMENT>The author designs a class to store any data type, but which is still type safe.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Elegant Function Call Wrappers</T><A>http://www.ddj.com/cpp/184401385</A><L>en</L><F>HTML</F></X><AUTHOR>Andreas Huber</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>1</MONTH></DATE><COMMENT>Encapsulating function calls and their parameters in a class instance (useful for multithreading, for example).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Common Knowledge: typeints</T><A>http://www.ddj.com/cpp/184403856</A><L>en</L><F>HTML</F></X><AUTHOR>Stephen C. Dewhurst</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>2</MONTH></DATE><COMMENT>This is probably because I have not read other Dewhurst's articles, but I do not understand the point to code types to/from integers.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>STL</TITLE>
    <ITEM><ARTICLE><X><T>Using auto_ptr Effectively</T><A>http://www.gotw.ca/publications/using_auto_ptr_effectively.htm</A><L>en</L><F>HTML</F></X><AUTHOR>Herb Sutter</AUTHOR><DATE><YEAR>1999</YEAR><MONTH>10</MONTH></DATE><COMMENT>A good overview of the <CODEROUTINE>auto_ptr</CODEROUTINE> smart pointer.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Three Guidelines for Effective Iterator Usage</T><A>http://www.ddj.com/cpp/184401406</A><L>en</L><F>HTML</F></X><AUTHOR><X><T>Scott Meyers</T><A>http://www.aristeia.com/</A><L>en</L><F>HTML</F></X></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>6</MONTH></DATE><COMMENT>As usual with Scott, some good advice on using <CODEROUTINE>iterator</CODEROUTINE>, <CODEROUTINE>const_iterator</CODEROUTINE>,   <CODEROUTINE>reverse_iterator</CODEROUTINE> and <CODEROUTINE>reverse_const_iterator</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>STL Algorithms vs. Hand-Written Loops</T><A>http://www.ddj.com/cpp/184401446</A><L>en</L><F>HTML</F></X><AUTHOR><X><T>Scott Meyers</T><A>http://www.aristeia.com/</A><L>en</L><F>HTML</F></X></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>10</MONTH></DATE><COMMENT>Why it is better to use the algorithms rather than the loops with iterators.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>libraries</TITLE>
    <ITEM><BLIST><TITLE>parsers</TITLE>
      <ITEM><ARTICLE><X><T>Introducing the Boost parser framework</T><A>http://www.ibm.com/developerworks/aix/library/au-boost_parser/</A><L>en</L><F>HTML</F></X><AUTHOR>Arpan Sen</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>21</DAY></DATE><COMMENT>A presentation of Boost's Spirit which is a simple parser based on functors.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>locales</TITLE>
    <ITEM><ARTICLE><X><T>The Standard C++ Locale</T><A>http://www.cantrip.org/locale.html</A><L>en</L><F>HTML</F></X><AUTHOR>Nathan C. Myers</AUTHOR><DATE><YEAR>1997</YEAR></DATE><COMMENT>A description of the implementation of the locale support (<CODEROUTINE>facet</CODEROUTINE>, <CODEROUTINE>locale</CODEROUTINE>, <CODEROUTINE>locale::id</CODEROUTINE>...).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Internationalization Using Standard C++</T><A>http://www.angelikalanger.com/Articles/Cuj/Internationalization/I18N.html</A><L>en</L><F>HTML</F></X><AUTHOR>Klaus Kreft</AUTHOR><AUTHOR>Angelina Langer</AUTHOR><DATE><YEAR>1997</YEAR><MONTH>9</MONTH></DATE><COMMENT>Yet another description of the locales and facets.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>language philosophy</TITLE>
    <ITEM><ARTICLE><X status='dead'><T>The language barrier</T><A>http://www.redherring.com/Home/1981</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Madden</AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>James Gosling and Bjarne Stroustrup have diverging ideas about how a language should evolve.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>C++ Answers From Bjarne Stroustrup</T><A>http://slashdot.org/interviews/00/02/25/1034222.shtml</A><L>en</L><F>HTML</F></X><DATE><YEAR>2000</YEAR><MONTH>2</MONTH><DAY>25</DAY></DATE><COMMENT>A Slashdot interview of Bjarne Stroustrup: the usual C++ subjects are spoken about.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>An interview with Bjarne Stroustrup - The future is multiparadigm programming</T><A>http://linux.sys-con.com/node/32929</A><L>en</L><F>HTML</F></X><AUTHOR>Danny Kalev</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>2</MONTH><DAY>20</DAY></DATE><COMMENT>Stroustrup describes why the object orientation adoption was so slow, the divergence of C and C++, his desired new features and C++ poor advocacy.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The New C++: Trip Report</T><A>http://www.ddj.com/cpp/184403857</A><L>en</L><F>HTML</F></X><AUTHOR>Herb Sutter</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>A description of how the C++ standard committee works and its current status.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>code analysis</TITLE>
    <ITEM><ARTICLE><X><T>A First Look at C++ Program Analyzers</T><A>http://www.aristeia.com/ddjpaper1_frames.html</A><L>en</L><F>HTML</F></X><X><T>A First Look at C++ Program Analyzers</T><A>http://www.aristeia.com/ddjpaper1.html</A><L>en</L><F>HTML</F></X><AUTHOR><X><T>Scott Meyers</T><A>http://www.aristeia.com/</A><L>en</L><F>HTML</F></X></AUTHOR><AUTHOR>Martin Klaus</AUTHOR><DATE><YEAR>1997</YEAR><MONTH>2</MONTH></DATE><COMMENT>The authors perform a benchmark on several static analysers for C++ code. This benchmark is based on Meyers' rules.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>C compatibility</TITLE>
  <ITEM><ARTICLE><X quality='2'><T>Incompatibilities Between ISO C and ISO C++</T><A>http://david.tribble.com/text/cdiffs.htm</A><L>en</L><F>HTML</F></X><AUTHOR>David R. Tribble</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH><DAY>13</DAY></DATE><COMMENT>The author first lists the incompatibilities which have been fixed by C99, then he lists the ones which are still present or have been introduced.</COMMENT></ARTICLE></ITEM>
  <ITEM><BLIST><TITLE>Stroustrup on the C99 vs C++98 compatibility issues</TITLE>
      <ITEM><ARTICLE><X><T>C and C++: Siblings</T><A>http://www.ddj.com/cpp/184401543</A><L>en</L><F>HTML</F></X><X><T>C and C++: A Case for Compatibility</T><A>http://www.research.att.com/~bs/siblings_short.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Bjarne Stroustrup</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>7</MONTH></DATE><COMMENT>A presentation of some C/C++ incompatibilities.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>C and C++: A Case for Compatibility</T><A>http://www.ddj.com/cpp/184401555</A><L>en</L><F>HTML</F></X><X><T>C and C++: A Case for Compatibility</T><A>http://www.research.att.com/~bs/compat_short.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Bjarne Stroustrup</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH></DATE><COMMENT>Bjarne advocates for fixing the C/C++ compatibilities.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>C and C++: Case Studies in Compatibility</T><A>http://www.ddj.com/cpp/184401562</A><L>en</L><F>HTML</F></X><X><T>C and C++: Case Studies in Compatibility</T><A>http://www.research.att.com/~bs/examples_short.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Bjarne Stroustrup</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>9</MONTH></DATE><COMMENT>A discussion about possible solutions to some C/C++ incompatibilities.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><ARTICLE><X><T>The C/C++ Programming Language</T><A>http://www.ddj.com/cpp/184401575</A><L>en</L><F>HTML</F></X><AUTHOR>P.J. Plauger</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH></DATE><COMMENT>Plaugher explains that the incompatibilities between C and C++ standards are not such a problem: each language is and will remain a big player in the software development field; most compatibility issues can be avoided.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Standard Librarian: Complex Numbers</T><A>http://www.ddj.com/web-development/184401491</A><L>en</L><F>HTML</F></X><AUTHOR>Matt Austern</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>3</MONTH></DATE><COMMENT>A quick presentation of the support of complex numbers in the standard library.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Matrix libraries for C and C++</T><A>http://www.ibm.com/developerworks/library/l-matrix.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew L. Blais</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>7</MONTH></DATE><COMMENT>A quick presentation and speed comparison of <X><T>Meschach</T><A>http://www.math.uiowa.edu/%7Edstewart/meschach/</A><L>en</L><F>HTML</F></X>, <X><T>CwMtx</T><A>http://www.xs4all.nl/%7Ehkuiper/cwmtx/cwmtx.html</A><L>en</L><F>HTML</F></X> and <X><T>blitz++</T><A>http://oonumerics.org/blitz/</A><L>en</L><F>HTML</F></X></COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>performance</TITLE>
    <ITEM><ARTICLE><X><T>Programming Guidelines for Vectorizing C/C++ Compilers</T><A>http://www.ddj.com/cpp/184401611</A><L>en</L><F>HTML</F></X><AUTHOR>Aart Bik</AUTHOR><AUTHOR>Milind Girkar</AUTHOR><AUTHOR>Paul Grey</AUTHOR><AUTHOR>Xinmin Tian</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>2</MONTH></DATE><COMMENT>How to provide some hints to help the Intel compiler to vectorize some loops.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>gcc</TITLE>
    <ITEM><ARTICLE><X><T>Migration Guide for gcc 3.2</T><A>http://annwm.lbl.gov/%7Eleggett/Atlas/gcc-3.2.html</A><L>en</L><F>HTML</F></X><AUTHOR>Charles Leggett</AUTHOR><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
 </BLIST></ITEM>
  <ITEM><BLIST><TITLE>C++0x</TITLE>
    <ITEM><ARTICLE><X><T>New Features in the Next C++ Standard</T><A>http://www.youtube.com/watch?v=ZAG5txfYnW4</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>51</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR>Lawrence Crowl</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>A quick overview of the new features: concurrency, template concepts, move semantics, generalized constant expressions, automatic variable typing, and garbage collection.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Advanced Topics in Programming Languages Series: C++ Threads</T><A>http://video.google.com/videoplay?docid=3528799355371049884</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>29</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR>Lawrence Crowl</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>The current status of the future C++ standard for threads, several points are still undecided.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Google Speaker Series: Bjarne Stroustrup</T><A>http://video.google.com/videoplay?docid=-3478907067117491758</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>39</MINUTE><SECOND>33</SECOND></DURATION></X><AUTHOR>Bjarne Stroustrup</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>31</DAY></DATE><COMMENT>After speaking about the current usage status of C++ and the ISO effort to create C++0x, Bjarne describes some additions of the future new version: initializer list, concepts...</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Getting C++ Threads Right</T><A>http://www.youtube.com/watch?v=mrvAqvtWYb4</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>10</MINUTE><SECOND>17</SECOND></DURATION></X><AUTHOR>Hans Boehm</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>12</MONTH><DAY>12</DAY></DATE><COMMENT>A presentation of some issues when dealing with multi-threading and how the C++0x standard will handle them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>An Overview of the Coming C++ (C++0x) Standard</T><A>http://www.youtube.com/watch?v=JffvCivHEHU</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>59</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR>Lawrence Crowl</AUTHOR><AUTHOR>Matt Austern</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>31</DAY></DATE><COMMENT>A very fast presentation of all the new features of C++0X as this one is now in review.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
 <ITEM><BLIST><TITLE>miscellaneous</TITLE>
   <ITEM><ARTICLE><X status='dead'><T>Navigating C++ Streams: How to Paddle Softly and Avoid the Alligators</T><A>http://www.cse.concordia.ca/%7Egrogono/streams.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Peter Grogono</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>12</MONTH></DATE><COMMENT>A tutorial on streams.</COMMENT></ARTICLE></ITEM>
   <ITEM><ARTICLE><X><T>C++ Idioms</T><A>http://users.rcn.com/jcoplien/Patterns/C++Idioms/EuroPLoP98.html</A><L>en</L><F>HTML</F></X><AUTHOR>James O. Coplien</AUTHOR><DATE><YEAR>1998</YEAR></DATE><COMMENT>The idioms are too quickly described, this makes this stuff not correctly understandable (this is probably different if you have already read other Coplien's papers).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead' quality='2'><T>Casting in C++: Bringing Safety and Smartness to Your Programs</T><A>http://www.acm.org/crossroads/xrds3-1/ovp3-1.html</A><L>en</L><F>HTML</F></X><AUTHOR>G. Bowden Wise</AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>A clear presentation of the C++ cast operators.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Statics: Schizophrenia for C++ Programmers</T><A>http://www.acm.org/crossroads/xrds2-4/ovp.html</A><L>en</L><F>HTML</F></X><AUTHOR>G. Bowden Wise</AUTHOR><DATE><YEAR>1996</YEAR></DATE><COMMENT>A description of the miscellaneous meanings of <CODEROUTINE>static</CODEROUTINE> in C++, but there are several errors in this article...</COMMENT></ARTICLE></ITEM>
   <ITEM><ARTICLE><X><T>C++ Conformance Roundup</T><A>http://www.ddj.com/cpp/184401381</A><L>en</L><F>HTML</F></X><AUTHOR>Herb Sutter</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>4</MONTH><DAY>1</DAY></DATE><COMMENT>Three conformance tests have been run on the major C++ compilers and libraries. Result comments from vendors and some C++ experts are presented.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>C++ Name Mangling/Demangling</T><A>http://www.kegel.com/mangle.html</A><L>en</L><F>HTML</F></X><AUTHOR>Dan Kegel</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>Gnu and Microsoft mangling algorithms.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Binary Compatibility Issues With C++</T><A>http://web.fe.up.pt/~jmcruz/etc/kde/kdeqt/kde2arch/devel-binarycompatibility.html</A><L>en</L><F>HTML</F></X><AUTHOR>Matthias Ettrich</AUTHOR><COMMENT>This paper describes how to ensure binary compatibility with a previous release of a library.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Double Metaphone Search Algorithm</T><A>http://www.ddj.com/cpp/184401251</A><L>en</L><F>HTML</F></X><AUTHOR>Lawrence Philips</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>6</MONTH></DATE><COMMENT>An improved algorithm (Double Metaphone) for sound-alike matching.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Using Genetic Algorithms</T><A>http://www.ddj.com/architect/184401528</A><L>en</L><F>HTML</F></X><AUTHOR>Mark Bucci</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>6</MONTH></DATE><COMMENT>Some sample code for genetic programs.</COMMENT></ARTICLE></ITEM>
<ITEM><ARTICLE><X><T>Parsing C++</T><A>http://www.nobugs.org/developer/parsingcpp/</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Birkett</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>3</MONTH></DATE><COMMENT>The author summarizes at the current tools available to parse C++.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>C/C++ development with the Eclipse Platform - How to use the C/C++ Development Toolkit (CDT)</T><A>http://www.ibm.com/developerworks/opensource/library/os-ecc/</A><L>en</L><F>HTML</F></X><AUTHOR>Pawel Leszek</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH><DAY>22</DAY></DATE><COMMENT>A quick overview of the current status of C/C++ support in Eclipse.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Generic&lt;Programming&gt;: Assertions</T><A>http://www.ddj.com/cpp/184403861</A><L>en</L><F>HTML</F></X><AUTHOR>Andrei Alexandrescu</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>4</MONTH></DATE><COMMENT>An implementation of an assertion mechanism. The chosen solution is probably enough powerful to be adaptable to your own project.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>C++ Stylistics</T><A>http://www.youtube.com/watch?v=zh8W4ZglOlw</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR>Kevlin Henney</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>4</MONTH><DAY>5</DAY></DATE><COMMENT>A fast presentation of some different ways to code in C++.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
</BLIST>

</CONTENT>
</PAGE>

