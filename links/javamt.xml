<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Java multi-threading</TITLE>
<PATH>links/javamt.xml</PATH>
<DATE><YEAR>2024</YEAR><MONTH>3</MONTH><DAY>9</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><X><T>personal notes</T><A>../notes/javathread.htm</A><L>en</L><F>HTML</F></X></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>Why Are Thread.stop, Thread.suspend, Thread.resume and Runtime.runFinalizersOnExit Deprecated?</T><A>https://docs.oracle.com/javase/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html</A><L>en</L><F>HTML</F></X><COMMENT>The article explains the rational of these deprecations and how to correctly stop or suspend a thread.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Threading lightly, Part 1: Synchronization is not the enemy</T><ST>When do we have to synchronize, and how expensive is it really?</ST><A>https://www.ibm.com/developerworks/java/library/j-threads1/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>7</MONTH><DAY>17</DAY></DATE><COMMENT>After debunking the false ideas about the performance cost of synchronised, the author quickly reminds when synchronisation should be used.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-threads1/index.html"><X status="removed"><T>Threading lightly, Part 2: Reducing contention</T><ST>Improve application performance by staying out of your own way</ST><A>https://www.ibm.com/developerworks/java/library/j-threads2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>9</MONTH><DAY>5</DAY></DATE><COMMENT>How to reduce contention due to thread synchronisation: synchronise blocks as short as possible, use monitors of small sub-objects instead of the monitor of the whole object and lock collapsing (instead of repetitively acquiring and release a lock, just acquire it once, do the whole job and release it).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-threads2/index.html"><X status="removed"><T>Threading lightly, Part 3: Sometimes it's best not to share</T><ST>Exploiting ThreadLocal to enhance scalability</ST><A>https://www.ibm.com/developerworks/java/library/j-threads3/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>10</MONTH><DAY>16</DAY></DATE><COMMENT>How to use the <CODEROUTINE>ThreadLocal</CODEROUTINE> and <CODEROUTINE>InheritableThreadLocal</CODEROUTINE> classes.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Safe construction techniques</T><ST>Don't let the "this" reference escape during construction</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp0618/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>6</MONTH></DATE><COMMENT>In order to avoid race conditions (the object being used before being fully constructed), <CODEROUTINE>this</CODEROUTINE> must not escape, explicitly or implicitly, from the constructor.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Concurrency made simple (sort of)</T><ST>An introduction to the util.concurrent package</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp1126/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>11</MONTH><DAY>1</DAY></DATE><COMMENT>A description of <AUTHOR><FIRSTNAME>Doug</FIRSTNAME><LASTNAME>Lea</LASTNAME></AUTHOR>’s classes, for easier thread handling, which will be part of Java 1.5: <CODEROUTINE>QueuedExecutor</CODEROUTINE>, <CODEROUTINE>PooledExecutor</CODEROUTINE> and <CODEROUTINE>FutureResult</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Characterizing thread safety</T><ST>Thread safety is not an all-or-nothing proposition</ST><A>https://www.ibm.com/developerworks/library/j-jtp09263.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>9</MONTH><DAY>23</DAY></DATE><COMMENT>Thread-safetiness is not a simple boolean flag. Goetz presents Bloch’s classification: immutable, thread-safe, conditionally thread-safe, tread-compatible and thread-hostile.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Scheduling recurring tasks in Java applications</T><ST>Introducing a simple generalisation of the Java language's Timer class</ST><A>https://www.ibm.com/developerworks/library/j-schedule.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tom</FIRSTNAME><LASTNAME>White</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>11</MONTH><DAY>4</DAY></DATE><COMMENT>The author describes how he wrote classes on top of <CODEROUTINE>Timer</CODEROUTINE> and <CODEROUTINE>TimerTask</CODEROUTINE> to handle periodic tasks.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Fixing the Java Memory Model, Part 1</T><ST>What is the Java Memory Model, and how was it broken in the first place?</ST><A>https://www.ibm.com/developerworks/library/j-jtp02244/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>A description of the problems with the current memory model.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jtp02244/index.html"><X status="removed"><T>Java theory and practice: Fixing the Java Memory Model, Part 2</T><ST>How will the JMM change under JSR 133?</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp03304/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>Reads/writes to volatile variables cannot be reordered with reads/writes to non-volatile variables, all final fields of an object are guaranteed to be correctly initialised by the constructor when other threads access the object.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Dealing with InterruptedException</T><ST>You caught it, now what are you going to do with it?</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>5</MONTH><DAY>23</DAY></DATE><COMMENT>An overview of thread interruption and the <CODEROUTINE>InterruptedException</CODEROUTINE> exception and how to deal with this one (rethrowing or restoring the interrupted status).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Advanced Topics in Programming Languages: The Java Memory Model</T><A>https://www.youtube.com/watch?v=1FX4zco0ziY</A><L>en</L><F>MP4</F><DURATION><MINUTE>57</MINUTE><SECOND>23</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Jeremy</FIRSTNAME><LASTNAME>Manson</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>3</MONTH><DAY>21</DAY></DATE><COMMENT>Some explanation on the changes introduced with JSR-133, using <CODEROUTINE>volatile</CODEROUTINE>, thread safe lazy initialisation, using <CODEROUTINE>final</CODEROUTINE>…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Advanced Topics in Programming Languages: Effective Static Race Detection for Java</T><A>https://www.youtube.com/watch?v=EJXebaPx1mU</A><L>en</L><F>MP4</F><DURATION><MINUTE>58</MINUTE><SECOND>11</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Aiken</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>A high-level presentation of the algorithm used by Chord to find race conditions.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Managing volatility</T><ST>Guidelines for using volatile variables</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp06197/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>Some patterns using <CODEROUTINE>volatile</CODEROUTINE>: status flag, publication of an immutable object, cheap read-write lock…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Java on a 1000 Cores - Tales of Hardware / Software CoDesign</T><A>https://www.youtube.com/watch?v=5uljtqyBLxI</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>12</MINUTE><SECOND>1</SECOND></DURATION><DATE><YEAR>2009</YEAR><MONTH>9</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Cliff</FIRSTNAME><LASTNAME>Click</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>8</MONTH><DAY>12</DAY></DATE><COMMENT>The history and the technology of Azul Systems: highly parallel computers dedicated to Java.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="removed"><T>5 things you didn't know about … java.util.concurrent, Part 1</T><ST>Multithreaded programming with concurrent Collections</ST><A>https://www.ibm.com/developerworks/java/library/j-5things4/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>18</DAY></DATE><COMMENT><CODEROUTINE>TimeUnit</CODEROUTINE>, <CODEROUTINE>CopyOnWriteArrayList</CODEROUTINE>, <CODEROUTINE>BlockingQueue</CODEROUTINE>, <CODEROUTINE>ConcurrentMap</CODEROUTINE>, and <CODEROUTINE>SynchronousQueue</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-5things4/index.html"><X status="removed"><T>5 things you didn't know about … java.util.concurrent, Part 2</T><ST>Concurrent programming means working smarter, not harder</ST><A>https://www.ibm.com/developerworks/java/library/j-5things5/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Neward</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT><CODEROUTINE>Semaphore</CODEROUTINE>, <CODEROUTINE>CountDownLatch</CODEROUTINE>, <CODEROUTINE>Executor</CODEROUTINE>/<CODEROUTINE>ExecutorService</CODEROUTINE>, <CODEROUTINE>ScheduledExecutorServices</CODEROUTINE>, and timeouts.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="-1" status="removed"><T>5 things you didn't know about … multithreaded programming</T><ST>On the subtleties of high-performance threading</ST><A>https://www.ibm.com/developerworks/java/library/j-5things15/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Steven</FIRSTNAME><LASTNAME>Haines</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>11</MONTH><DAY>9</DAY></DATE><COMMENT>Some facts, on multithreading, missing examples and analysis: synchronised method vs. synchronised block, <CODEROUTINE>ThreadLocal</CODEROUTINE>, <CODEROUTINE>volatile</CODEROUTINE>, and <CODEROUTINE>java.util.concurrent.atomic</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="-1" status="removed"><T>Multicore CPUs and the concurrency changes they bring</T><ST>Why thread-based application parallelism is trumped in the multicore era</ST><A>https://www.ibm.com/developerworks/java/library/j-nothreads/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vasudevan</FIRSTNAME><LASTNAME>Thiyagarajan</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>7</MONTH><DAY>31</DAY></DATE><COMMENT>The author explains that multithread applications are not adequate for multicore architectures, but there is no real explanation and he only points to an alternative (actors) in the conclusion.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="1" status="zombie"><T>Turbo Charge CPU Utilization in Fork/Join Using the ManagedBlocker by Heinz Kabutz</T><A>https://www.youtube.com/watch?v=12qM3GFnfzI</A><L>en</L><F>MP4</F><DURATION><MINUTE>52</MINUTE><SECOND>6</SECOND></DURATION><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>17</DAY></DATE></X><AUTHOR><FIRSTNAME>Heinz</FIRSTNAME><LASTNAME>Kabutz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A fast-paced demonstration on how to parallelise a Fibonacci computation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>AtomicStampedReference</T><A>https://jenkov.com/tutorials/java-util-concurrent/atomicstampedreference.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jakob</FIRSTNAME><LASTNAME>Jenkov</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>12</DAY></DATE><COMMENT>A description of <CODEROUTINE>AtomicStampedReference</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Synchronization in Java, Part 1: Race conditions, locks, and conditions</T><ST>The first article in this series on thread synchronization covers the fundamentals of race conditions, lock objects, condition objects, and the await, signal, and signalAll methods.</ST><A>https://blogs.oracle.com/javamagazine/post/java-thread-synchronization-raceconditions-locks-conditions</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cay</FIRSTNAME><MIDDLENAME>S.</MIDDLENAME><LASTNAME>Horstmann</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>2</MONTH><DAY>4</DAY></DATE><COMMENT>The subtitle says it all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://blogs.oracle.com/javamagazine/post/java-thread-synchronization-raceconditions-locks-conditions"><X><T>Synchronization in Java, Part 2: The synchronized keyword</T><ST>This second article in a series on thread synchronization addresses intrinsic locks, the synchronized keyword, synchronized blocks, and ad hoc locks.</ST><A>https://blogs.oracle.com/javamagazine/post/java-thread-synchronization-synchronized-blocks-adhoc-locks</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cay</FIRSTNAME><MIDDLENAME>S.</MIDDLENAME><LASTNAME>Horstmann</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>2</MONTH><DAY>18</DAY></DATE><COMMENT>The subtitle says it all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE predecessor="https://blogs.oracle.com/javamagazine/post/java-thread-synchronization-synchronized-blocks-adhoc-locks"><X><T>Synchronization in Java, Part 3: Atomic operations and deadlocks</T><ST>This third article in a series on thread synchronization describes volatile fields, final variables, atomic operations, deadlocks, the deprecated stop and suspend methods, and on-demand initializations.</ST><A>https://blogs.oracle.com/javamagazine/post/java-thread-synchronization-volatile-final-atomic-deadlocks</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cay</FIRSTNAME><MIDDLENAME>S.</MIDDLENAME><LASTNAME>Horstmann</LASTNAME></AUTHOR><DATE><YEAR>2022</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>The subtitle says it all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Quiz yourself: Locking mechanisms and Java’s postincrement ++ operator</T><A>https://blogs.oracle.com/javamagazine/post/java-quiz-reentrantlock-trylock-unlock</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mikalai</FIRSTNAME><LASTNAME>Zaikin</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>How to use <CODEROUTINE>ReentrantLock.tryLock()</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Quiz yourself: The overloaded submit(…) methods in Java’s ExecutorService</T><A>https://blogs.oracle.com/javamagazine/post/java-quiz-executorservice-submit-callable-runnable</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Simon</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mikalai</FIRSTNAME><LASTNAME>Zaikin</LASTNAME></AUTHOR><DATE><YEAR>2023</YEAR><MONTH>8</MONTH><DAY>21</DAY></DATE><COMMENT>The diferences between <CODEROUTINE>Runnable</CODEROUTINE> and <CODEROUTINE>Callable</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Mastering Concurrency: An In-Depth Guide to Java's ExecutorService</T><ST>Java's ExecutorService is a powerful framework for managing and executing concurrent tasks in Java applications. It provides a higher-level abstraction over raw threads.</ST><A>https://dzone.com/articles/demystifying-java-executorservice-a-comprehensive</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrei</FIRSTNAME><LASTNAME>Tuchin</LASTNAME></AUTHOR><DATE><YEAR>2024</YEAR><MONTH>2</MONTH><DAY>5</DAY></DATE><COMMENT>A good overview of <CODEROUTINE>ExecutorService</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Double-checked locking</TITLE>
      <ITEM><ARTICLE><X><T>The "Double-Checked Locking is Broken" Declaration</T><A>http://www.cs.umd.edu/%7Epugh/java/memoryModel/DoubleCheckedLocking.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Bacon</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Joshua</FIRSTNAME><LASTNAME>Bloch</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Jeff</FIRSTNAME><LASTNAME>Bogda</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Cliff</FIRSTNAME><LASTNAME>Click</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Haahr</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Doug</FIRSTNAME><LASTNAME>Lea</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Tom</FIRSTNAME><LASTNAME>May</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Jan-Willem</FIRSTNAME><LASTNAME>Maessen</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>John</FIRSTNAME><MIDDLENAME>D.</MIDDLENAME><LASTNAME>Mitchell</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelvin</FIRSTNAME><LASTNAME>Nilsen</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Bill</FIRSTNAME><LASTNAME>Pugh</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Emin</FIRSTNAME><MIDDLENAME>Gun</MIDDLENAME><LASTNAME>Sirer</LASTNAME></AUTHOR><COMMENT>A technical description of the issue.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>Double-checked locking and the Singleton pattern</T><A>https://www.ibm.com/developerworks/java/library/j-dcl.html?loc=j</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Haggar</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>5</MONTH></DATE><COMMENT>A subtle synchronising bug when assigning a created object to a variable.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Collections</TITLE>
      <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Concurrent collections classes</T><ST>ConcurrentHashMap and CopyOnWriteArrayList offer thread safety and improved scalability</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp07233/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>A short presentation of <CODEROUTINE>ConcurrentHashMap</CODEROUTINE> and <CODEROUTINE>CopyOnWriteArrayList</CODEROUTINE> classes whose better locking mechanism ensures improved performance when many thread are accessing the collections.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Building a better HashMap</T><ST>How ConcurrentHashMap offers higher concurrency without compromising thread safety</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp08223/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>8</MONTH><DAY>21</DAY></DATE><COMMENT>A description of how multithread safetyness has been implemented in <CODEROUTINE>ConcurrentHashMap</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>Taming Tiger: Concurrent collections</T><ST>Moving beyond Map, Collection, List, and Set</ST><A>https://www.ibm.com/developerworks/java/library/j-tiger06164/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Zukowski</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>16</DAY></DATE><COMMENT>A short overview of the concurrent classes in Java 1.5: <CODEROUTINE>Queue</CODEROUTINE> and its derived classes, <CODEROUTINE>ConcurrentMap</CODEROUTINE>, <CODEROUTINE>ConcurrentHashMap</CODEROUTINE> and <CODEROUTINE>ConcurrentHashMap</CODEROUTINE> and <CODEROUTINE>CopyOnWriteArrayList</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Advanced Topics in Programming Languages: A Lock-Free Hash Table</T><A>https://www.youtube.com/watch?v=k5FltpgKcVk</A><L>en</L><F>MP4</F><DURATION><MINUTE>58</MINUTE><SECOND>35</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Cliff</FIRSTNAME><LASTNAME>Click</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>3</MONTH><DAY>28</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Cliff</FIRSTNAME><LASTNAME>Click</LASTNAME></AUTHOR> describes his hash table algorithm, how he proves this one works and presents some performance benchmarks.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Thread pools</TITLE>
      <ITEM><ARTICLE><X status="removed"><T>Java theory and practice: Thread pools and work queues</T><ST>Thread pools help achieve optimum resource utilization</ST><A>https://www.ibm.com/developerworks/java/library/j-jtp0730/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>7</MONTH></DATE><COMMENT>The title says it all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="removed"><T>Pooling threads to execute short tasks</T><A>http://java.sun.com/developer/JDCTechTips/2004/tt1116.html#2</A><L>en</L><F>HTML</F></X><DATE><YEAR>2004</YEAR><MONTH>11</MONTH><DAY>16</DAY></DATE><COMMENT>A simple example of <CODEROUTINE>Executors.newFixedThreadPool</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>JCSP</TITLE>
      <ITEM><ARTICLE><X status="removed"><T>CSP for Java programmers, Part 1</T><ST>Pitfalls of multithreaded programming on the Java platform</ST><A>https://www.ibm.com/developerworks/java/library/j-csp1/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abhijit</FIRSTNAME><LASTNAME>Belapurkar</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>21</DAY></DATE><COMMENT>Some generalities about Java multi-threading and its pitfalls.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-csp1/index.html"><X status="removed"><T>CSP for Java programmers, Part 2</T><ST>Concurrent programming with JCSP</ST><A>https://www.ibm.com/developerworks/java/library/j-csp2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abhijit</FIRSTNAME><LASTNAME>Belapurkar</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>21</DAY></DATE><COMMENT>A presentation of JCSP framework: how to build a network of processes linked by channels.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-csp2/index.html"><X status="removed"><T>CSP for Java programmers, Part 3</T><ST>Advanced topics in JCSP</ST><A>https://www.ibm.com/developerworks/java/library/j-csp3/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Abhijit</FIRSTNAME><LASTNAME>Belapurkar</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>21</DAY></DATE><COMMENT>Some advanced JCSP features (<CODEROUTINE>Barrier</CODEROUTINE>, <CODEROUTINE>Bucket</CODEROUTINE>, <CODEROUTINE>CREW</CODEROUTINE>, <CODEROUTINE>ProcessManager</CODEROUTINE>…) with some non-convincing comparison with AOP and the <CODEROUTINE>java.util.concurrent</CODEROUTINE> package.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>JVM concurrency</TITLE>
      <ITEM><ARTICLE><X status="removed"><T>JVM concurrency: Java and Scala concurrency basics</T><ST>Understand concurrency in the Java language and the added options that Scala provides</ST><A>https://www.ibm.com/developerworks/library/j-jvmc1/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>A short recall of <CODEROUTINE>synchronied</CODEROUTINE> and <CODEROUTINE>volatile</CODEROUTINE>, a description of how to use thread pools and fork/join in Java, and callbacks, <CODEROUTINE>for</CODEROUTINE> comprehension and waiting in Scala.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jvmc1/index.html"><X status="removed"><T>JVM concurrency: Java 8 concurrency basics</T><ST>See how Java 8 features make concurrent programming easier</ST><A>https://www.ibm.com/developerworks/library/j-jvmc2/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT><CODEROUTINE>CompletableFuture</CODEROUTINE> and streams.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jvmc2/index.html"><X status="removed"><T>JVM concurrency: To block, or not to block?</T><ST>Compare blocking and nonblocking approaches to handling asynchronous events in Java 8</ST><A>https://www.ibm.com/developerworks/library/j-jvmc3/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>7</MONTH><DAY>22</DAY></DATE><COMMENT>Using <CODEROUTINE>CompletableFuture</CODEROUTINE>s with a waiting thread or by combining them, and the performance / complexity of both solutions.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jvmc3/index.html"><X status="removed"><T>JVM concurrency: Asynchronous event handling in Scala</T><ST>Learn blocking and nonblocking techniques, including easy nonblocking code with the async macro</ST><A>https://www.ibm.com/developerworks/library/j-jvmc4/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>2</DAY></DATE><COMMENT>The same content as the previous article, but this time in Scala with the special <CODEROUTINE>async</CODEROUTINE>/<CODEROUTINE>await</CODEROUTINE> macro.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jvmc4/index.html"><X status="removed"><T>JVM concurrency: Acting asynchronously with Akka</T><ST>Build actor systems for concurrent applications</ST><A>https://www.ibm.com/developerworks/library/j-jvmc5/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>8</DAY></DATE><COMMENT>A presentation of Akka, an actor-based toolkit.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/library/j-jvmc5/index.html"><X status="removed"><T>JVM concurrency: Building actor applications with Akka</T><ST>Go beyond the basics to build applications that use actor interactions</ST><A>https://www.ibm.com/developerworks/library/j-jvmc6/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dennis</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Sosnoski</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>8</MONTH><DAY>12</DAY></DATE><COMMENT>More information on Akka.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>