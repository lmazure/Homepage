<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Design</TITLE>
<PATH>links/design.xml</PATH>
<DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>19</DAY></DATE>
<CONTENT>

<X><T>Yahoo!</T><A>http://dir.yahoo.com/Computers_and_Internet/Programming_and_Development/Tools/Software_Engineering/</A><L>en</L><F>HTML</F></X>,
<X><T>Open Directory</T><A>http://dmoz.org/Computers/Software/Software_Engineering/</A><L>en</L><F>HTML</F></X>,
<X><T>FAQ</T><A>http://www.faqs.org/faqs/software-eng/</A><L>en</L><F>HTML</F></X><BR/>

O'Reilly's CD bookshelf:
(<X><T>S</T><A>http://www.google.com/search?q=%22O%27Reilly%27s+CD+bookshelf%22</A><L>en</L><F>HTML</F></X>)
<X><T>unix.org.ua</T><A>http://www.unix.org.ua/orelly/</A><L>en</L><F>HTML</F></X>,
<X><T>www.c3.hu</T><A>http://www.c3.hu/docs/oreilly</A><L>en</L><F>HTML</F></X><BR/>

<BLIST><TITLE>software theory</TITLE>
<ITEM><X><T>CiteSeer</T><A>http://citeseer.ist.psu.edu/cs</A><L>en</L><F>HTML</F></X></ITEM>
</BLIST>

<BLIST><TITLE>aspect programming</TITLE>
  <ITEM><X><T>AspectJ</T><A>http://eclipse.org/aspectj</A><L>en</L><F>HTML</F></X></ITEM>
</BLIST>

<BLIST><TITLE>object technology</TITLE>
  <ITEM>general:
    <X><T>the Object Oriented-Page</T><A>http://www.arrakis.es/%7Edevis/oo.html</A><L>en</L><F>HTML</F></X>,
    <X><T>The Object Agency</T><A>http://www.toa.com/</A><L>en</L><F>HTML</F></X>
  </ITEM>
  <ITEM><X><T>design patterns</T><A>dp.html</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>frameworks</T><A>http://st-www.cs.uiuc.edu/users/johnson/frameworks.html</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>Taligent Developper Resources</T><A>http://pcroot.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/index.html</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM>CORBA:
    <X><T>OMG</T><A>http://www.omg.org/corba/</A><L>en</L><F>HTML</F></X>,
    <X><T>ORBit</T><A>http://www.redhat.com/support/wpapers/redhat/ORBit/index.html</A><L>en</L><F>HTML</F></X>,
    <X><T>Cetus</T><A>http://www.sente.ch/cetus/oo_corba.html</A><L>en</L><F>HTML</F></X>
    (<X><T>M</T><A>http://web.nchu.edu.tw/~jlu/cetus/oo_corba.html</A><L>en</L><F>HTML</F></X>,
    <X><T>M</T><A>http://www.objenv.com/cetus/oo_corba.html</A><L>en</L><F>HTML</F></X>),
  </ITEM>
  <ITEM>databases:
    <X><T>ODMG</T><A>http://www.odmg.org/</A><L>en</L><F>HTML</F></X>
  </ITEM>
</BLIST>

<BLIST><TITLE>miscellaneous</TITLE>
  <ITEM><X><T>Uncle Bob's Principles of OOD</T><A>http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>Architecture Review Checklist</T><A>http://www.opengroup.org/togaf/p4/comp/clists/syseng.htm</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>sysml</T><A>http://www.sysml.org/</A><L>en</L><F>HTML</F></X></ITEM>
</BLIST>

<X><T>IEEE 1016-1998</T><A>http://users.snip.net/~gbooker/ISYS425/IEEE-1016-1998.pdf</A><L>en</L><F>PDF</F></X>: IEEE Recommended Practice for Software Design Descriptions<BR/>
<BR/>

<BLIST><TITLE>user interface</TITLE>
  <ITEM><BLIST><TITLE>mockup</TITLE>
    <ITEM><X><T>Balsamiq</T><A>http://balsamiq.com</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Pencil Project</T><A>http://pencil.evolus.vn</A><L>en</L><F>HTML</F></X></ITEM>
  </BLIST></ITEM>
</BLIST>

<LINE/>

<BLIST><TITLE><B>articles</B></TITLE>
  <ITEM><BLIST><TITLE>library design</TITLE>
    <ITEM><ARTICLE><X><T>Good practices in Library Design Implementation, and Maintenance</T><A>http://www.akkadia.org/drepper/goodpractice.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Ulrich Drepper</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>This article speaks mainly of the C/C++ compilation issues: keeping binary compatibility, avoiding name clashes...</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>How To Design A Good API and Why it Matters</T><A>http://www.youtube.com/watch?v=aAb7hSCtvGw</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR>Joshua Bloch</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>24</DAY></DATE><COMMENT>Some good advice on design a good API: when in doubt, leave it out; the principle of least astonishment...</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>NoSQL</TITLE>
    <ITEM><ARTICLE><X><T>10 things you should know about NoSQL databases</T><A>http://www.techrepublic.com/blog/10-things/10-things-you-should-know-about-nosql-databases/</A><L>en</L><F>HTML</F></X><AUTHOR>Guy Harrison</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>26</DAY></DATE><COMMENT>The pros and cons of NoSQL databases given their current maturity status.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Software Development in the 21st Century by Martin Fowler</T><A>http://www.youtube.com/watch?v=TgdFA72crHM</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>50</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>The first talk is about when to use a schema vs when being schemaless. The second talk is about the origins of agile and levels of agile fluency.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Bigtable</TITLE>
      <ITEM><ARTICLE><X><T>Java development 2.0: NoSQL -- Schemaless data modeling with Bigtable and Groovy's Gaelyk</T><A>https://www.ibm.com/developerworks/java/library/j-javadev2-8/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Glover</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A Groovy example storing data in Google's Bigtable.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>MongoDB</TITLE>
      <ITEM><ARTICLE><X><T>Java development 2.0: MongoDB: A NoSQL datastore with (all the right) RDBMS moves -- Create and query documents using Java code and Groovy</T><A>http://www.ibm.com/developerworks/java/library/j-javadev2-12/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Glover</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of MongoDB with its JavaScript and Groovy (GMongo) APIs.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>ESB</TITLE>
    <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 10 &#x2013; Le syndrome &#xAB; Not Invented Here &#xBB;</T><A>http://blog.xebia.fr/2008/05/16/les-10-pieges-de-la-soa-10-le-syndrome-not-invented-here/</A><L>fr</L><F>HTML</F></X><AUTHOR>Vincent Partington</AUTHOR><AUTHOR>Christophe Heub&#xE8;s</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>Two NIH symptoms: not reusing a service, writing its own ESB.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>miscellaneous</TITLE>
    <ITEM><ARTICLE><X><T>A Field Guide to Boxology: Preliminary Classification of Architectural Styles for Software Systems</T><A>http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/vit/www/paper_abstracts/Boxology.html</A><L>en</L><F>HTML</F></X><AUTHOR>Mary Shaw</AUTHOR><AUTHOR>Paul Clements</AUTHOR><DATE><YEAR>1996</YEAR><MONTH>4</MONTH></DATE><COMMENT>After trying to define architecture styles, the authors propose a classification of these ones.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>http://www.sei.cmu.edu/reports/94tr010.pdf</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>http://www.dtic.mil/cgi-bin/GetTRDoc?Location=U2&amp;doc=GetTRDoc.pdf&amp;AD=ADA283827</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>../attic/tr10.94.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Rick Kazman</AUTHOR><AUTHOR>Len Bass</AUTHOR><DATE><YEAR>1994</YEAR><MONTH>8</MONTH></DATE><COMMENT>The authors propose to look how the software architecture and the non-fonctional attributes are linked. This is still not rocket science, but this article is very helpful to make understand that most design choices have some good and some bad effects, these ones but be analysed and, depending on the prioritization of the non-functional attributes, the correct decision must be taken.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Steps in an Architecture Tradeoff Analysis Method: Quality Attribute Models and Analysis</T><A>http://www.sei.cmu.edu/reports/97tr029.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Mario R. Barbacci</AUTHOR><AUTHOR>S. Jeromy Carriere</AUTHOR><AUTHOR>Peter H. Feiler</AUTHOR><AUTHOR>Rick Kazman</AUTHOR><AUTHOR>Mark H. Klein</AUTHOR><AUTHOR>Howard F. Lipson</AUTHOR><AUTHOR>Thomas A. Longstaff</AUTHOR><AUTHOR>Charles B. Weinstock</AUTHOR><DATE><YEAR>1998</YEAR><MONTH>5</MONTH></DATE><COMMENT>The authors give a simplistic example of using performance, availability and security numerical models to perform the architectural tradeoff.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Global Survey of Software Development Practices</T><A>http://ebusiness.mit.edu/research/papers/2003.06_Cusumano_MacCormack_Kemerer_Crandall_A%20Global%20Survey_178.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Michael Cusumano</AUTHOR><AUTHOR>Alan MacCormack</AUTHOR><AUTHOR>Chris F. Kemerer</AUTHOR><AUTHOR>William Crandall</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>A survey of some software project metrics in US, India, Japan and Europe. I don't think there is any value in this survey: the measurements are biased by the fact that there are provided by the companies themselves and the productivity (KLOC) and quality (number of bugs /KLOC) measures are plainly dumb.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>History-making components</T><A>http://www.ibm.com/developerworks/java/library/co-tmline/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Durham</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>4</MONTH></DATE><COMMENT>This timeline is more a generic computer/software history than focused on object-oriented events.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Programming a functional future</T><A>http://www.techworld.com.au/article/46562/programming_functional_future</A><L>en</L><F>HTML</F></X><AUTHOR>Cameron Laird</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>A short introduction to the advantages of functional languages.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Code Generation Templates Using XML and XSL</T><A>http://www.drdobbs.com/code-generation-templates-using-xml-and/184401474</A><L>en</L><F>HTML</F></X><AUTHOR>Cristian Georgescu</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>1</MONTH></DATE><COMMENT>I don't think this type of code generation can be used for programs in non trivial domains.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Primer for IEC 60601-1</T><A>http://www.orbitmicro.com/company/blog/334</A><L>en</L><F>HTML</F></X><AUTHOR>Leonard Eisner</AUTHOR><AUTHOR>Robert M. Brown</AUTHOR><AUTHOR>Dan Modi</AUTHOR><DATE><YEAR>2003</YEAR></DATE><COMMENT>A description of IEC 60601(Medical Electrical Equipment).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Preserving Backward Compatibility</T><A>http://www.onlamp.com/pub/a/onlamp/2005/02/17/backwardscompatibility.html</A><L>en</L><F>HTML</F></X><AUTHOR>Garrett Rooney</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>A very good article about the different issues possible with backward compatibility and some solutions to solve them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Top Ten Data Crunching Tips and Tricks</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/09/datacrunching.html</A><L>en</L><F>HTML</F></X><AUTHOR>Greg Wilson</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>Some good general advice on parsing and filtering data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Go To Statement Considered Harmful</T><A>http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html</A><L>en</L><F>HTML</F></X><X><T>Go To Statement Considered Harmful</T><A>https://files.ifi.uzh.ch/rerg/arvo/courses/kvse/uebungen/Dijkstra_Goto.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Edsger W. Dijkstra</AUTHOR><DATE><YEAR>1968</YEAR><MONTH>3</MONTH></DATE><COMMENT>One of the most well-known software design article.</COMMENT></ARTICLE></ITEM>
     <ITEM><ARTICLE><X status='dead'><T>Code and Personality - How to tell your personality type from your code</T><A>http://homepage.mac.com/kevinmarks/personality.html</A><L>en</L><F>HTML</F></X><AUTHOR>Kevin Marks</AUTHOR><AUTHOR>Maf Vosburgh</AUTHOR><DATE><YEAR>1998</YEAR><MONTH>6</MONTH></DATE><COMMENT>From Optimistic to Cynical: the different types of Mac developers.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Tracking Down Killer Bugs</T><A>http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/2002/0204/0204g/0204g.htm</A><L>en</L><F>HTML</F></X><AUTHOR>Eric McRae</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>4</MONTH></DATE><COMMENT>Debugging an embedded system may be tricky...</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What Developers Want</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/23/whatdevswant.html</A><L>en</L><F>HTML</F></X><AUTHOR>Murugan Pal</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>23</DAY></DATE><COMMENT>A developer wish list, this one is maybe too linked to the latest fashions (e.g. SOA)...</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why I Stopped Coding and Why I'd Start Again</T><A>http://www.onlamp.com/pub/a/python/2007/01/18/why-i-stopped-coding.html</A><L>en</L><F>HTML</F></X><AUTHOR>Brian McConnell</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>An idea: dynamically download libraries from Internet repositories.</COMMENT></ARTICLE></ITEM>
  <ITEM><ARTICLE><X><T>Visual Perception with Deep Learning</T><A>http://www.youtube.com/watch?v=3boKlkPBckA</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR>Yann Le Cun</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>4</MONTH><DAY>10</DAY></DATE><COMMENT>Machine Learning: a description of the structure and learning methodology of a deep multi-layered architecture. Yann gives some examples for real-time video analysis.</COMMENT></ARTICLE></ITEM>
  <ITEM><ARTICLE><X><T>A Possible Future of Software Development</T><A>http://www.youtube.com/watch?v=4moyKUHApq4</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR>Sean Parent</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>After a description of the current status of software development, Sean explains the interest of generic programming and of constraining the architecture to be a DAG. Then, he gives an example built by his team: a library using declarations to model user interfaces.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Convenience Over Correctness</T><A>http://steve.vinoski.net/pdf/IEEE-Convenience_Over_Correctness.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Steve Vinoski</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>7</MONTH></DATE><COMMENT>Why RPC is a bad idea (this is an oversimplification that cannot properly work in the real world) and should not be used anymore.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Three Beautiful Quicksorts</T><A>http://www.youtube.com/watch?v=aMnn0Jq0J-E</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR>Jon Bentley</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH><DAY>9</DAY></DATE><COMMENT>A quick sort simple implementation, the simplification of the algorithm performance computation, and the Unix <CODEROUTINE>qsort</CODEROUTINE> implementation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1' status='dead'><T>An introduction to object prevalence -- Unleash the power of object orientation with a better persistence strategy</T><A>http://www.ibm.com/developerworks/library/wa-objprev/</A><L>en</L><F>HTML</F></X><AUTHOR>Carlos Villela</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH><DAY>1</DAY></DATE><COMMENT>A presentation of Prevayler.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>On the criteria to be used in decomposing systems into modules</T><A>http://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>D. L. Palma</AUTHOR><DATE><YEAR>1972</YEAR><MONTH>12</MONTH></DATE><COMMENT>A well known old article explaining that design decomposition should be based on information hiding rather than on the workflow.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>New machines, XML, and disambiguation -- Help the machine resolve contextual information</T><A>http://www.ibm.com/developerworks/library/x-disambig/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Colin Beckingham</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>29</DAY></DATE><COMMENT>A trivial idea: having several facets to words so different text consumers can interpret it at different ambiguity levels.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Design Principles and Design Patterns</T><A>http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2000</YEAR></DATE><COMMENT>A presentation of<BR/>- the class design principles:<BR/>o the Open Closed Principle<BR/>o the Liskov Substitution Principle<BR/>o the Dependency Inversion Principle<BR/>- the package architecture principles:<BR/>o the Release Reuse Equivalency Principe<BR/>o the Common Closure Principle<BR/>o the Common Reuse Principle<BR/>o the Acyclic Dependencies Principle<BR/>o the Stable Dependencies Principle<BR/>o the Stable Abstractions Principle<BR/>- some design patterns:<BR/>o the Abstract Server<BR/>o the Adapter<BR/>o the Observer<BR/>o the Bridge<BR/>o the Abstract Factory</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Legacy Application Strangulation : Case Studies</T><A>http://paulhammant.com/2013/07/14/legacy-application-strangulation-case-studies/</A><L>en</L><F>HTML</F></X><AUTHOR>Paul Hammant</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE><COMMENT>Some examples of strangulation of a legacy application: rewriting parts after parts while still using the (fewer and fewer) old parts meanwhile.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Synchronization in a Distributed System</T><A>http://blog.8thlight.com/rylan-dirksen/2013/10/04/synchronization-in-a-distributed-system.html</A><L>en</L><F>HTML</F></X><AUTHOR>Rylan Dirksen</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>4</DAY></DATE><COMMENT>Lamport timestamp and vector clock.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Ruby Midwest 2011 - Keynote: Architecture the Lost Years by Robert Martin</T><A>http://www.youtube.com/watch?v=WpkDN78P884</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>39</SECOND></DURATION></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>11</MONTH><DAY>4</DAY></DATE><COMMENT>Uncle Bob explains basic good architecture principles, which we knew 10 years ago, but have been forgotten because of the Web craziness...</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Robert C. Martin - Clean Architecture</T><A>http://vimeo.com/43612849</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>6</MONTH><DAY>7</DAY></DATE><COMMENT>This is the same presentation that above, this one is better structured, but less lively, I prefer the previous one.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Dance you Imps!</T><A>http://blog.8thlight.com/uncle-bob/2013/10/01/Dance-You-Imps.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>Object-Relational Mapping is a misnomer, ORMs are data structure migrators. An object is an abstraction of behaviour, not an abstraction of data. They should represent business objects, not database tables.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
</BLIST>

</CONTENT>
</PAGE>

