<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Design</TITLE>
<PATH>links/design.xml</PATH>
<DATE><YEAR>2021</YEAR><MONTH>4</MONTH><DAY>28</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><CLIST><TITLE>Directories</TITLE>
      <ITEM><X><T>FAQ</T><A>http://www.faqs.org/faqs/software-eng/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>O'Reilly's CD bookshelf</TITLE>
      <ITEM>(<X status='obsolete'><T>S</T><A>https://www.google.com/search?q=%22O%27Reilly%27s+CD+bookshelf%22</A><L>en</L><F>HTML</F></X>)</ITEM>
      <ITEM><X status='obsolete'><T>docstore.mik.ua</T><A>https://docstore.mik.ua/orelly/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X status='obsolete'><T>www.c3.hu</T><A>http://www.c3.hu/docs/oreilly</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><BLIST><TITLE>Aspect programming</TITLE>
      <ITEM><X><T>AspectJ</T><A>http://eclipse.org/aspectj</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Object technology</TITLE>
      <ITEM><X><T>design patterns</T><A>dp.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Taligent Developer Resources</T><A>https://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Home/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><CLIST><TITLE>CORBA</TITLE>
        <ITEM><X><T>OMG</T><A>https://www.omg.org/corba/</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><CLIST><TITLE>Databases</TITLE>
        <ITEM><X><T>ODMG</T><A>http://www.odmg.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>NoSQL</TITLE>
      <ITEM><X><T>MongoDB</T><A>https://www.mongodb.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Redis</T><A>https://redis.io/</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Miscellaneous</TITLE>
      <ITEM><X quality='2'><T>Martin Fowler</T><A>https://martinfowler.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Architecture Review Checklist</T><A>http://www.opengroup.org/public/arch/p4/comp/clists/syseng.htm</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>sysml</T><A>https://www.sysml.org/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Catalog of Patterns of Enterprise Application Architecture</T><A>https://martinfowler.com/eaaCatalog/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Enterprise Integration Patterns</T><A>https://www.enterpriseintegrationpatterns.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Accidentally Quadratic</T><A>https://accidentallyquadratic.tumblr.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Microsoft REST API Guidelines</T><A>https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Conway's law</T><A>http://www.melconway.com/Home/Committees_Paper.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Clean Code Discussion</T><A>https://groups.google.com/forum/#!forum/clean-code-discussion</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>The Twelve-Factor App</T><A>https://12factor.net</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Principles Wiki</T><A>http://principles-wiki.net/start</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><X><T>IEEE 1016-2009</T><A>https://perso.univ-st-etienne.fr/jacquene/gl/articles/IEEE-1016-2009.pdf</A><L>en</L><F>PDF</F></X>: IEEE Recommended Practice for Software Design Descriptions</ITEM>
    <ITEM><BLIST><TITLE>User interface</TITLE>
      <ITEM><BLIST><TITLE>Mockup</TITLE>
        <ITEM><X><T>Balsamiq</T><A>https://balsamiq.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>WireframeSketcher</T><A>https://wireframesketcher.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Pencil Project</T><A>http://pencil.evolus.vn/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>Go To Statement Considered Harmful</T><A>http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html</A><L>en</L><F>HTML</F></X><X><T>Go To Statement Considered Harmful</T><A>https://files.ifi.uzh.ch/rerg/arvo/courses/kvse/uebungen/Dijkstra_Goto.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Edsger</FIRSTNAME><MIDDLENAME>W.</MIDDLENAME><LASTNAME>Dijkstra</LASTNAME></AUTHOR><DATE><YEAR>1968</YEAR><MONTH>3</MONTH></DATE><COMMENT>One of the most well-known software design article.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>On the criteria to be used in decomposing systems into modules</T><A>https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>D.</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Palma</LASTNAME></AUTHOR><DATE><YEAR>1972</YEAR><MONTH>12</MONTH></DATE><COMMENT>A well-known old article explaining that design decomposition should be based on information hiding rather than on the workflow.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>https://www.sei.cmu.edu/reports/94tr010.pdf</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>https://apps.dtic.mil/dtic/tr/fulltext/u2/a283827.pdf</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>../attic/tr10.94.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><LASTNAME>Kazman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Len</FIRSTNAME><LASTNAME>Bass</LASTNAME></AUTHOR><DATE><YEAR>1994</YEAR><MONTH>8</MONTH></DATE><COMMENT>The authors propose to look how the software architecture and the non-fonctional attributes are linked. This is still not rocket science, but this article is very helpful to make understand that most design choices have some good and some bad effects, these ones but be analysed and, depending on the prioritization of the non-functional attributes, the correct decision must be taken.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Architectural Blueprints—The “4+1” View Model of Software Architecture</T><A>https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Philippe</FIRSTNAME><LASTNAME>Kruchten</LASTNAME></AUTHOR><DATE><YEAR>1995</YEAR><MONTH>11</MONTH></DATE><COMMENT>A model for describing the architecture of a software system: logical view / development view / process view / physical view + scenarios.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Field Guide to Boxology: Preliminary Classification of Architectural Styles for Software Systems</T><A>http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/vit/www/paper_abstracts/Boxology.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mary</FIRSTNAME><LASTNAME>Shaw</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Clements</LASTNAME></AUTHOR><DATE><YEAR>1996</YEAR><MONTH>4</MONTH></DATE><COMMENT>After trying to define architecture styles, the authors propose a classification of these ones.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Steps in an Architecture Tradeoff Analysis Method: Quality Attribute Models and Analysis</T><A>https://www.sei.cmu.edu/reports/97tr029.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><MIDDLENAME>R.</MIDDLENAME><LASTNAME>Barbacci</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>S.</FIRSTNAME><MIDDLENAME>Jeromy</MIDDLENAME><LASTNAME>Carriere</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><MIDDLENAME>H.</MIDDLENAME><LASTNAME>Feiler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><LASTNAME>Kazman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><MIDDLENAME>H.</MIDDLENAME><LASTNAME>Klein</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Howard</FIRSTNAME><MIDDLENAME>F.</MIDDLENAME><LASTNAME>Lipson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Longstaff</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Charles</FIRSTNAME><MIDDLENAME>B.</MIDDLENAME><LASTNAME>Weinstock</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR><MONTH>5</MONTH></DATE><COMMENT>The authors give a simplistic example of using performance, availability and security numerical models to perform the architectural tradeoff.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Code and Personality</T><ST>How to tell your personality type from your code.</ST><A>http://www.kevinmarks.com/personality.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Marks</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Maf</FIRSTNAME><LASTNAME>Vosburgh</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR><MONTH>6</MONTH></DATE><COMMENT>From Optimistic to Cynical: the different types of Mac developers.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>History-making components</T><A>https://www.ibm.com/developerworks/java/library/co-tmline/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Durham</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>4</MONTH></DATE><COMMENT>This timeline is more a generic computer/software history than focused on object-oriented events.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Code Generation Templates Using XML and XSL</T><A>https://www.drdobbs.com/code-generation-templates-using-xml-and/184401474</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cristian</FIRSTNAME><LASTNAME>Georgescu</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>1</MONTH></DATE><COMMENT>I don't think this type of code generation can be used for programs in non trivial domains.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Tracking Down Killer Bugs</T><A>https://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/2002/0204/0204g/0204g.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>McRae</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>4</MONTH></DATE><COMMENT>Debugging an embedded system may be tricky…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1' status='zombie'><T>An introduction to object prevalence</T><ST>Unleash the power of object orientation with a better persistence strategy</ST><A>https://www.ibm.com/developerworks/library/wa-objprev/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Carlos</FIRSTNAME><LASTNAME>Villela</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH><DAY>1</DAY></DATE><COMMENT>A presentation of Prevayler.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Primer for IEC 60601-1</T><A>https://www.mddionline.com/news/primer-iec-60601-1</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Leonard</FIRSTNAME><LASTNAME>Eisner</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Brown</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Dan</FIRSTNAME><LASTNAME>Modi</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR></DATE><COMMENT>A description of IEC 60601(Medical Electrical Equipment).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Global Survey of Software Development Practices</T><A>http://ebusiness.mit.edu/research/papers/2003.06_Cusumano_MacCormack_Kemerer_Crandall_A%20Global%20Survey_178.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Cusumano</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Alan</FIRSTNAME><LASTNAME>MacCormack</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><MIDDLENAME>F.</MIDDLENAME><LASTNAME>Kemerer</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>William</FIRSTNAME><LASTNAME>Crandall</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>A survey of some software project metrics in US, India, Japan and Europe. I don't think there is any value in this survey: the measurements are biased by the fact that there are provided by the companies themselves and the productivity (KLOC) and quality (number of bugs /KLOC) measures are plainly dumb.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Top Ten Data Crunching Tips and Tricks</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/09/datacrunching.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Greg</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>Some good general advice on parsing and filtering data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>What Developers Want</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/23/whatdevswant.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Murugan</FIRSTNAME><LASTNAME>Pal</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>23</DAY></DATE><COMMENT>A developer wish list, this one is maybe too linked to the latest fashions (e.g. SOA)…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Why I Stopped Coding and Why I'd Start Again</T><A>http://www.onlamp.com/pub/a/python/2007/01/18/why-i-stopped-coding.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>McConnell</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>An idea: dynamically download libraries from Internet repositories.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Advanced Topics in Programming Languages: Concurrency and Message Passing in Newsqueak</T><A>https://www.youtube.com/watch?v=HmxnCEa8Ctw</A><L>en</L><F>MP4</F><DURATION><MINUTE>57</MINUTE><SECOND>6</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Pike</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Pike</LASTNAME></AUTHOR> describes a language he created 20 years ago: pragmas, channels…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Three Beautiful Quicksorts</T><A>https://www.youtube.com/watch?v=aMnn0Jq0J-E</A><L>en</L><F>MP4</F><DURATION><MINUTE>53</MINUTE><SECOND>56</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Jon</FIRSTNAME><LASTNAME>Bentley</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH><DAY>9</DAY></DATE><COMMENT>A quick sort simple implementation, the simplification of the algorithm performance computation, and the Unix <CODEROUTINE>qsort</CODEROUTINE> implementation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Possible Future of Software Development</T><A>https://www.youtube.com/watch?v=4moyKUHApq4</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sean</FIRSTNAME><LASTNAME>Parent</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>After a description of the current status of software development, Sean explains the interest of generic programming and of constraining the architecture to be a DAG. Then, he gives an example built by his team: a library using declarations to model user interfaces.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Convenience Over Correctness</T><A>http://steve.vinoski.net/pdf/IEEE-Convenience_Over_Correctness.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Vinoski</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>7</MONTH></DATE><COMMENT>Why RPC is a bad idea (this is an oversimplification that cannot properly work in the real world) and should not be used anymore.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>New machines, XML, and disambiguation</T><ST>Help the machine resolve contextual information</ST><A>https://www.ibm.com/developerworks/library/x-disambig/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Colin</FIRSTNAME><LASTNAME>Beckingham</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>29</DAY></DATE><COMMENT>A trivial idea: having several facets to words so different text consumers can interpret it at different ambiguity levels.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Agile Connect 2011 - Keynote: Software Design in the 21st Century</T><A>https://www.youtube.com/watch?v=p5Qj75nJPEs</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>19</MINUTE><SECOND>8</SECOND></DURATION><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>10</DAY></DATE></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR></DATE><COMMENT>- Flaky tests must be fixed, some causes why tests are randomly failing<BR/>- why doing design<BR/>- 10 years after the Agile Manifesto</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>TolerantReader</T><A>https://martinfowler.com/bliki/TolerantReader.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>Be as tolerant as possible when reading data from a service.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>GoRuCo 2011 - Sandi Metz - Less - The Path to Better Design</T><A>https://vimeo.com/26330100</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>41</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sandi</FIRSTNAME><LASTNAME>Metz</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Sandi</FIRSTNAME><LASTNAME>Metz</LASTNAME></AUTHOR> indicates first that code must be transparent, reasonable, usable and exemplary. Then, she analyzes some implementations with these criteria.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>MemoryImage</T><A>https://martinfowler.com/bliki/MemoryImage.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>8</MONTH><DAY>31</DAY></DATE><COMMENT>A short discussion about applications keeping data in memory instead of in a database and using event sourcing to persist the data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Simple Made Easy</T><A>https://www.infoq.com/presentations/Simple-Made-Easy/</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>26</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Rich</FIRSTNAME><LASTNAME>Hickey</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The difference between simple and easy, writing simple code is difficult, TBD gives some advice on reaching simplicity.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Software Design Glossary</T><A>https://www.facebook.com/notes/facebook-engineering/software-design-glossary/10150309412413920</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>27</DAY></DATE><COMMENT>This is a list of ideas about design rather than a glossary.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>ContextualValidation</T><A>https://martinfowler.com/bliki/ContextualValidation.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>11</MONTH><DAY>3</DAY></DATE><COMMENT>Objects should be validated in a context, not in an absolute manner. It may be a good thing to allow saving (in the database) objects which are erroneous.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality ='1'><T>Bret Victor - Inventing on Principle</T><A>https://vimeo.com/36579366</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Bret</FIRSTNAME><LASTNAME>Victor</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Bret</FIRSTNAME><LASTNAME>Victor</LASTNAME></AUTHOR> demoes some results from applying his principle "Creators need an immediate connection to what they are creating", then he gives examples of other persons whose life is driven by a principle, and finishes advocating to choose such a way of life.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Ruby Conf 12 - Boundaries by Gary Bernhardt</T><A>https://www.youtube.com/watch?v=yTkzNHF6rMs</A><L>en</L><F>MP4</F><DURATION><MINUTE>45</MINUTE><SECOND>54</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>25</DAY></DATE></X><AUTHOR><FIRSTNAME>Gary</FIRSTNAME><LASTNAME>Bernhardt</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>3</DAY></DATE><COMMENT>Implementing the business logic in a core using immutable objects and the remainder in a shell using usual procedural programming. This can be done using the actor model.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Language of the System - Rich Hickey</T><A>https://www.youtube.com/watch?v=ROor6_NGIWU</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>49</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>2</MONTH><DAY>28</DAY></DATE></X><AUTHOR><FIRSTNAME>Rich</FIRSTNAME><LASTNAME>Hickey</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>15</DAY></DATE><COMMENT>Some ideas about system design and the differences with design of a single process.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Synchronization in a Distributed System</T><A>https://8thlight.com/blog/rylan-dirksen/2013/10/04/synchronization-in-a-distributed-system.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rylan</FIRSTNAME><LASTNAME>Dirksen</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>4</DAY></DATE><COMMENT>Lamport timestamp and vector clock.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Building on SOLID foundations - Steve Freeman &amp; Nat Pryce</T><A>https://www.youtube.com/watch?v=6Bia81dI-JE</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>16</MINUTE><SECOND>50</SECOND></DURATION><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Freeman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Nat</FIRSTNAME><LASTNAME>Pryce</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>The two speakers advocate for implementing "behaviour assembled from immutable objects acting on a stateful context".</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Refactoring for the cloud: lessons &amp; practices learned - Itamar Syn-Hershko</T><A>m85CUfKPYas</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>30</MINUTE><SECOND>36</SECOND></DURATION><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE></X><AUTHOR><FIRSTNAME>Itamar</FIRSTNAME><LASTNAME>Syn-Hershko</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>How Buzzilla redesigned its search software using Elasticsearch.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>October CincyRb - Jim Weirich on Decoupling from Rails</T><A>https://www.youtube.com/watch?v=tg5RFeSfBM4</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>15</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Weirich</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>15</DAY></DATE><COMMENT>How to decouple business logic from rails framework code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Datensparsamkeit</T><A>https://www.martinfowler.com/bliki/Datensparsamkeit.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>12</MONTH><DAY>12</DAY></DATE><COMMENT>Companies should only store the data they really need.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Game Loop</T><A>http://gameprogrammingpatterns.com/game-loop.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><LASTNAME>Nystrom</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR></DATE><COMMENT>The main design pattern of any game.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Little Architecture</T><A>https://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>4</DAY></DATE><COMMENT>Inversion of control, interface segregation, and doing good architecture consists in deferring design decisions when possible.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Framework Bound[2]</T><A>https://blog.cleancoder.com/uncle-bob/2014/05/11/FrameworkBound.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>The frameworks can be useful, but they should stay at the periphery of the system.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>Leaky Libraries: How To Assess The Risk Of Dependencies</T><A>https://8thlight.com/blog/ben-voss/2014/05/26/leaky-libraries.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Voss</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>26</DAY></DATE><COMMENT>An unclear article advising to avoid libraries which will result into the application code being difficult to change later on.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Visualizing Algorithms</T><A>https://bost.ocks.org/mike/algorithms/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Bostock</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>Creating some visualisations of some algorithms to help understanding them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Software Design: Why, When &amp; How - Kent Beck</T><A>https://vimeo.com/105771493</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>The title says all. <AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR> provides very nuanced answer to the three questions: Why, when and how doing design decisions.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The More Things Change...</T><A>https://blog.cleancoder.com/uncle-bob/2014/09/18/TheMoreThingsChange.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The names of the architectural patterns are changing along the years, but the patterns stay the same…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>'Interface' Considered Harmful</T><A>https://blog.cleancoder.com/uncle-bob/2015/01/08/InterfaceConsideredHarmful.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> is complaining about C# and Java <CODEROUTINE>interface</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Exponential Backoff And Jitter</T><A>https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Marc</FIRSTNAME><LASTNAME>Brooker</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>4</DAY></DATE><COMMENT>Adding randomness to the delay between the network request retries enhances performance. But the simulation here is a very particular condition where all the initial requests are performed at the same time. Most of the time, a server load does not have such a repartition, requests are more distributed along the time.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Option Type</T><A>https://8thlight.com/blog/dave-torre/2015/03/11/the-option-type.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Torre</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>11</DAY></DATE><COMMENT>A description of the Option Type using the Rust language.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why You Should Avoid a Canonical Data Model</T><A>https://www.innoq.com/en/blog/thoughts-on-a-canonical-data-model/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stefan</FIRSTNAME><LASTNAME>Tilkov</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>24</DAY></DATE><COMMENT>Having a model common to the whole enterprise is a bad idea and the author suggests, instead, providing a searchable repository of small fragments each one being provided by the team mastering its domain.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Does Organization Matter?</T><A>https://blog.cleancoder.com/uncle-bob/2015/04/15/DoesOrganizationMatter.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>The larger a program is, the more organized it must be, and new comers must learn that organization.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Make the Magic go away.</T><A>https://blog.cleancoder.com/uncle-bob/2015/08/06/LetTheMagicDie.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>8</MONTH><DAY>6</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> advices to understand how you could implement a framework by yourselves before starting to use one, it may not be worthwhile to use the framework.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Retract with the old, add with the new</T><A>https://blog.8thlight.com/elizabeth-engelman/2015/09/26/retract-with-the-old-add-with-the-new.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elizabeth</FIRSTNAME><LASTNAME>Engelman</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>A presentation of Datomic, a distributed database using immutable data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Refactoring Code to Load a Document</T><A>https://martinfowler.com/articles/refactoring-document-load.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>12</MONTH><DAY>17</DAY></DATE><COMMENT>Encapsulating the data loading and several strategies to manipulate the data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Evolutionary Database Design</T><A>https://martinfowler.com/articles/evodb.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Pramod</FIRSTNAME><LASTNAME>Sadalage</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH></DATE><COMMENT>Some basic but good advice on managing databases: DBAs work closely with developers, perform small automated changes, these changes being version controlled…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Program to where the performance puck is going to be, not where it has been</T><A>https://m.signalvnoise.com/program-to-where-the-performance-puck-is-going-to-be-not-where-it-has-been-2e1c89bac058</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH><DAY>21</DAY></DATE><COMMENT>You should design for the future performance of the machines, not for the current one.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Fundamental Tensions in Code Smells</T><A>https://8thlight.com/blog/colin-jones/2016/09/29/fundamental-code-smell-tensions.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Colin</FIRSTNAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH><DAY>29</DAY></DATE><COMMENT>Two code smells may be the opposite one of the other. But this is just the fact that design is compromise…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Sorting Secret - Computerphile</T><A>https://www.youtube.com/watch?v=pcJHkWwjNl4</A><L>en</L><F>MP4</F><DURATION><MINUTE>9</MINUTE><SECOND>44</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Graham</FIRSTNAME><LASTNAME>Hutton</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>18</DAY></DATE><COMMENT>Using a graphic representation (in fact, a sorting network) to show that selection sort and insertion sort are the same thing.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>GOTO 2017 • The Many Meanings of Event-Driven Architecture • Martin Fowler</T><A>https://www.youtube.com/watch?v=STKCRSUsyP0</A><L>en</L><F>MP4</F><DURATION><MINUTE>50</MINUTE><SECOND>5</SECOND></DURATION><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>1</DAY></DATE><COMMENT><BLIST><TITLE>Four types of event driven architectures:</TITLE><ITEM>Event Notification</ITEM><ITEM>Event-carried State Transfer</ITEM><ITEM>Event Sourcing</ITEM><ITEM>Command Query Reponsability Segregation</ITEM></BLIST></COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Architect Elevator — Visiting the upper floors</T><A>https://martinfowler.com/articles/architect-elevator.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gregor</FIRSTNAME><LASTNAME>Hohpe</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>5</MONTH><DAY>24</DAY></DATE><COMMENT>A miscellaneous list of ideas about the role of an architect today.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>API Assumption Tests</T><A>https://8thlight.com/blog/christoph-gockel/2017/06/14/api-assumption-tests.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christoph</FIRSTNAME><LASTNAME>Gockel</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>14</DAY></DATE><COMMENT>Creating tests to check the structure of the answers of calls to external services and implementing a conversion between these answers and our code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Breaking Up the Behemoth</T><A>https://www.sandimetz.com/blog/2017/9/13/breaking-up-the-behemoth</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sandi</FIRSTNAME><LASTNAME>Metz</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>13</DAY></DATE><COMMENT>In every projet, there are a few large classes with a lot of code churn.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Feature Toggles (aka Feature Flags)</T><A>https://www.martinfowler.com/articles/feature-toggles.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pete</FIRSTNAME><LASTNAME>Hodgson</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE><COMMENT>A detailed overview of how to use and implement feature flags.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Use Uncertainty As a Driver</T><A>https://medium.com/@kevlinhenney/https-medium-com-kevlinhenney-use-uncertainty-as-a-driver-493ebebd575d</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevlin</FIRSTNAME><LASTNAME>Henney</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>Instead of deciding between two options, design to make the choice less significant.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Evolutionary Architecture</T><A>https://codeburst.io/evolutionary-architecture-27dae14b323d</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Randy</FIRSTNAME><LASTNAME>Shoup</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>5</DAY></DATE><COMMENT>An architecture should be temporary, for the current needs and within the available resources, and should evolve incrementally.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Comprendre les « 12-factors app » pour une application cloud</T><A>https://promyze.com/blog-comprendre-12-factor-app-cloud/</A><L>fr</L><F>HTML</F></X><DATE><YEAR>2018</YEAR><MONTH>2</MONTH><DAY>1</DAY></DATE><COMMENT>A description of the 12 criteria, but some details are not clear.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Craftsman’s Guide to Designing a Clean Architecture - by Marcus Biel at JBCNConf'18</T><A>https://www.youtube.com/watch?v=0M4DXVaktPc</A><L>en</L><F>MP4</F><DURATION><MINUTE>47</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Marcus</FIRSTNAME><LASTNAME>Biel</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>24</DAY></DATE><COMMENT>An overview of common architecture ideas: hexagonal architecture, DDD, naming, encapsulation, coupling, cohesion.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Event Sourcing vs. Blockchain</T><ST>Want to know the difference between event sourcing and blockchain? Check out this post on the differences and use cases for these evolving technologies.</ST><A>https://dzone.com/articles/event-sourcing-vs-blockchain-1</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Frans</FIRSTNAME><LASTNAME>van Buul</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>24</DAY></DATE><COMMENT>This article clearly explains something that is obvious for those who know the two architectural patterns.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What to Look for at RubyConf 2018: Jeremy Hanna and Molly Struve Previewed Their Talks at 8th Light</T><A>https://8thlight.com/blog/nicole-carpenter/2018/11/13/what-to-look-for-at-rubyconf-2018.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicole</FIRSTNAME><LASTNAME>Carpenter</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH><DAY>13</DAY></DATE><COMMENT>Some basic and well-known advice on implementing server services.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>Self-Organizing Maps Using Python</T><A>https://visualstudiomagazine.com/articles/2019/01/01/self-organizing-maps-python.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>McCaffrey</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>15</DAY></DATE><COMMENT>The explanations and the code could have been clearer.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Domain-Oriented Observability</T><A>https://martinfowler.com/articles/domain-oriented-observability.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Pete</FIRSTNAME><LASTNAME>Hodgson</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>9</DAY></DATE><COMMENT>The description of some design options on how to log some information without polluting too much the business logic code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>“Testing” Structure Changes</T><A>https://medium.com/@kentbeck_7670/testing-structure-changes-d8d01f65b64e</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>2</DAY></DATE><COMMENT>Evaluating the gains/losses that a proposed structural change would have had generated on previous behaviour changes (assuming this is possible) could help evaluating if it is valuable.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Service Layer in Software Development Doesn't Exist</T><A>https://visualstudiomagazine.com/articles/2019/07/25/service-layer.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>26</DAY></DATE><COMMENT>The author claims that the "service layer" notion makes no sense and gives some design examples to prove it.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Twelve-Factor Methodology in a Spring Boot Microservice</T><A>https://www.baeldung.com/spring-boot-12-factor</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kumar</FIRSTNAME><LASTNAME>Chandrakant</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>A basic description of a Java/Maven/Docker/… technical stack and design to comply with the Twelve Factors.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>How Big Technical Changes Happen at Slack</T><A>https://slack.engineering/how-big-technical-changes-happen-at-slack-f1569d25ee7b</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Keith</FIRSTNAME><LASTNAME>Adams</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Johnny</FIRSTNAME><LASTNAME>Rodger</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>13</DAY></DATE><COMMENT>A description of how Slack choses and integrates new technologies.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Beginning of Extreme Programming</T><A>https://leftsideagile.com/index.php?post/2020/02/16/The-Beginning-of-Extreme-Programming</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chet</FIRSTNAME><LASTNAME>Hendrickson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>An old post (1996) about an object oriented kata using Smalltalk.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>KeystoneInterface</T><A>https://martinfowler.com/bliki/KeystoneInterface.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>4</MONTH><DAY>29</DAY></DATE><COMMENT>Integrating a feature in production except for its UI so users cannot access it, and testing in place.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Knapsack Problem &amp; Genetic Algorithms - Computerphile</T><A>https://www.youtube.com/watch?v=MacVqujSXWE</A><L>en</L><F>MP4</F><DURATION><MINUTE>12</MINUTE><SECOND>12</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Turner</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>A simple explanation of a genetic algorithm.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Model Driven Development</TITLE>
      <ITEM><ARTICLE><X status='zombie' quality='-1'><T>Model-Driven Development</T><A>https://msdn.microsoft.com/en-us/library/aa964145.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joseph</FIRSTNAME><LASTNAME>Hofstader</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>11</MONTH></DATE><COMMENT>An unclear description of MDD.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Hexagonal architecture</TITLE>
      <ITEM><ARTICLE><X quality='1'><T>Hexagonal Architecture: three principles and an implementation example</T><A>https://blog.octo.com/en/hexagonal-architecture-three-principles-and-an-implementation-example/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Erwan</FIRSTNAME><LASTNAME>Alliaume</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Sébastien</FIRSTNAME><LASTNAME>Roccaserra</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>10</MONTH><DAY>15</DAY></DATE><COMMENT>A slow but clear description of the hexagonal architecture.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Introduction to the Hexagonal Architecture in Java</T><ST>Learn how to implement the hexagonal architecture in your code.</ST><A>https://dzone.com/articles/demonstration-of-hexagonal-architecture-in-java</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Akash</FIRSTNAME><LASTNAME>Verma</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>This description is much too short and does not properly explain the hexagonal architecture.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Conversation about Hexagonal Rails</TITLE>
        <ITEM><X><T>Martin Fowler's notes</T><A>https://martinfowler.com/articles/badri-hexagonal/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><ARTICLE><X><T>Conversation about Hexagonal Rails Part 1</T><A>https://thoughtworks.wistia.com/medias/uxjb0lwrcz</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>28</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Badri</FIRSTNAME><LASTNAME>Janakiraman</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>5</DAY></DATE><COMMENT>First, a definition of the hexagonal architecture, the database may be in or out the hexagon. Second, how to choose between Active Record and Data Mapper: the second one fits better for databases which are not fully controlled, for example because they result from the history of the company.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://thoughtworks.wistia.com/medias/uxjb0lwrcz'><X><T>Conversation About Hexagonal Rails Part 2</T><A>https://thoughtworks.wistia.com/medias/jhdk2wa37j</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>22</MINUTE><SECOND>15</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Badri</FIRSTNAME><LASTNAME>Janakiraman</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>12</DAY></DATE><COMMENT>Should we use things such as Rails as a framework or as a set of components? We must define first the architecture we want to implement and, then, pick a framework enabling this architecture. External services should be isolated.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Library design</TITLE>
      <ITEM><ARTICLE><X><T>Good practices in Library Design Implementation, and Maintenance</T><A>https://www.akkadia.org/drepper/goodpractice.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Ulrich</FIRSTNAME><LASTNAME>Drepper</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>This article speaks mainly of the C/C++ compilation issues: keeping binary compatibility, avoiding name clashes…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Preserving Backward Compatibility</T><A>http://www.onlamp.com/pub/a/onlamp/2005/02/17/backwardscompatibility.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Garrett</FIRSTNAME><LASTNAME>Rooney</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>A very good article about the different issues possible with backward compatibility and some solutions to solve them.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>How To Design A Good API and Why it Matters</T><A>https://www.youtube.com/watch?v=aAb7hSCtvGw</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>19</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Joshua</FIRSTNAME><LASTNAME>Bloch</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>24</DAY></DATE><COMMENT>Some good advice on design a good API: when in doubt, leave it out; the principle of least astonishment…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Every public change is a breaking change</T><A>https://blogs.msdn.microsoft.com/ericlippert/2012/01/09/every-public-change-is-a-breaking-change/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Lippert</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How to Design Great APIs - Parse Developer Day 2013</T><A>https://www.youtube.com/watch?v=qCdpTji8nxo</A><L>en</L><F>MP4</F><DURATION><MINUTE>32</MINUTE><SECOND>54</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>2</DAY></DATE></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Lacker</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>5</DAY></DATE><COMMENT><BLIST><TITLE>An API must be</TITLE><ITEM>intuitive (homogeneity, ugliness of dangerous calls)</ITEM><ITEM>documented (reference docs, tutorials, quick-starts)</ITEM><ITEM>opinionated (dictatorship of design philosophy)</ITEM></BLIST></COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Don't Make Me Remember Things</T><A>https://blog.8thlight.com/rob-looby/2016/01/28/dont-make-me-remember-things.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Looby</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>1</MONTH><DAY>28</DAY></DATE><COMMENT>Designing an API in a way the developer does not have to remember about possible pitfalls.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: Make Interfaces Hard to Misuse</T><A>https://testing.googleblog.com/2018/07/code-health-make-interfaces-hard-to.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Marek</FIRSTNAME><LASTNAME>Kiszkis</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>25</DAY></DATE><COMMENT>Design an API so its users to do have take care of constraints that should be instead managed inside the library.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Let’s Make a Contract: The Art of Designing a Java API</T><A>https://medium.com/97-things/lets-make-a-contract-the-art-of-designing-a-java-api-854441cd42f5</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><LASTNAME>Fusco</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>Some very short advice on designing an API.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Testing on the Toilet: Avoid Hardcoding Values for Better Libraries</T><A>https://testing.googleblog.com/2020/08/testing-on-toilet-avoid-hardcoding.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Adel</FIRSTNAME><LASTNAME>Saoud</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>8</MONTH><DAY>19</DAY></DATE><COMMENT>Some warning about using hardcoded values in a library.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>ORM</TITLE>
      <ITEM><ARTICLE><X><T>Dance you Imps!</T><A>https://blog.cleancoder.com/uncle-bob/2013/10/01/Dance-You-Imps.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>Object-Relational Mapping is a misnomer, ORMs are data structure migrators. An object is an abstraction of behaviour, not an abstraction of data. They should represent business objects, not database tables.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>ORMs - You're doing it wrong</T><A>https://skillsmatter.com/skillscasts/5688-orms-you-re-doing-it-wrong</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>5</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Jimmy</FIRSTNAME><LASTNAME>Bogard</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>3</DAY></DATE><COMMENT>Some advice on using ORMs. But some points are somewhat dubious: Is complex SQL better than indecipherable LINQ? Where is the business layer?…</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>NoSQL</TITLE>
      <ITEM><ARTICLE><X><T>10 things you should know about NoSQL databases</T><A>https://www.techrepublic.com/blog/10-things/10-things-you-should-know-about-nosql-databases/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Guy</FIRSTNAME><LASTNAME>Harrison</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>26</DAY></DATE><COMMENT>The pros and cons of NoSQL databases given their current maturity status.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>GOTO 2013 • Software Development in the 21st Century • Martin Fowler</T><A>https://www.youtube.com/watch?v=TgdFA72crHM</A><L>en</L><F>MP4</F><DURATION><MINUTE>50</MINUTE><SECOND>4</SECOND></DURATION><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>4</DAY></DATE></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>The first talk is about when to use a schema vs. when being schemaless. The second talk is about the origins of agile and levels of agile fluency.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>Øredev 2014 - Pramod Sadalage - NOSQL: AN INTRODUCTION TO POLYGLOT PERSISTENCE</T><A>https://vimeo.com/111285813</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>33</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Pramod</FIRSTNAME><LASTNAME>Sadalage</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>A good overview of the NoSQL databases.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Have the tables turned on NoSQL?</T><A>https://stackoverflow.blog/2021/01/14/have-the-tables-turned-on-nosql/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Biggs</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Ryan</FIRSTNAME><LASTNAME>Donovan</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>1</MONTH><DAY>14</DAY></DATE><COMMENT>An overview of SQL vs. NoSQL databases with some debatable claims, so there are a lot of comments.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Bigtable</TITLE>
        <ITEM><ARTICLE><X><T>Java development 2.0: NoSQL</T><ST>Schemaless data modeling with Bigtable and Groovy's Gaelyk</ST><A>https://www.ibm.com/developerworks/java/library/j-javadev2-8/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A Groovy example storing data in Google's Bigtable.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>MongoDB</TITLE>
        <ITEM><ARTICLE><X><T>Java development 2.0: MongoDB: A NoSQL datastore with (all the right) RDBMS moves</T><ST>Create and query documents using Java code and Groovy</ST><A>https://www.ibm.com/developerworks/java/library/j-javadev2-12/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of MongoDB with its JavaScript and Groovy (GMongo) APIs.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>SOA</TITLE>
      <ITEM><ARTICLE><X><T>Versioning in SOA</T><A>https://docs.microsoft.com/en-us/previous-versions/bb491124(v=msdn.10)</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Boris</FIRSTNAME><LASTNAME>Lublinsky</LASTNAME></AUTHOR><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Bridging the gap between BI &amp; SOA</T><A>https://www.infoq.com/articles/BI-and-SOA/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Arnon</FIRSTNAME><LASTNAME>Rotem-Gal-Oz</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>10</DAY></DATE><COMMENT>How to get the data necessary for the BI in a SOA architecture: using a push model where events are published.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Does My Bus Look Big in This?</T><A>https://www.infoq.com/presentations/soa-without-esb/</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>42</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Webber</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>19</DAY></DATE><COMMENT>Fowler and Webber advice to use agility to build the enterprise architecture, doing incremental improvements, each adding value, instead of trying to respect big multi-year plans. They suggest to use Web technologies rather that a big proprietary middleware.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Les 10 pièges de la SOA</TITLE>
        <ITEM><ARTICLE><X><T>Les 10 pièges de la SOA : 10 – Le syndrome « Not Invented Here »</T><A>https://blog.engineering.publicissapient.fr/2008/05/16/les-10-pieges-de-la-soa-10-le-syndrome-not-invented-here/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Partington</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>Two NIH symptoms: not reusing a service, writing his/her own ESB.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/05/16/les-10-pieges-de-la-soa-10-le-syndrome-not-invented-here/'><X><T>Les 10 pièges de la SOA : 09 – Le Versioning</T><A>https://blog.engineering.publicissapient.fr/2008/05/21/les-10-pieges-de-la-soa-09-le-versioning/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rik</FIRSTNAME><LASTNAME>de Groot</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>21</DAY></DATE><COMMENT>Managing service versions and lifecycles.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/05/21/les-10-pieges-de-la-soa-09-le-versioning/'><X><T>Les 10 pièges de la SOA : 08 – La sécurité</T><A>https://blog.engineering.publicissapient.fr/2008/05/27/les-10-pieges-de-la-soa-08-la-securite/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Viktor</FIRSTNAME><LASTNAME>Grgic</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>27</DAY></DATE><COMMENT>Some thoughts about security (confidentiality, integrity, and availability).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/05/27/les-10-pieges-de-la-soa-08-la-securite/'><X><T>Les 10 pièges de la SOA : 07 – Mauvaise granularité des services</T><A>https://blog.engineering.publicissapient.fr/2008/05/30/les-10-pieges-de-la-soa-07-mauvaise-granularite-des-services/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gero</FIRSTNAME><LASTNAME>Vermaas</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>The problem of the incorrect granularity of services and how to avoid it.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/05/30/les-10-pieges-de-la-soa-07-mauvaise-granularite-des-services/'><X><T>Les 10 pièges de la SOA : 06 – La SOA ne résout pas automatiquement la complexité</T><A>https://blog.engineering.publicissapient.fr/2008/06/03/les-10-pieges-de-la-soa-06-la-soa-ne-resout-pas-automatiquement-la-complexite/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rik</FIRSTNAME><LASTNAME>de Groot</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/06/03/les-10-pieges-de-la-soa-06-la-soa-ne-resout-pas-automatiquement-la-complexite/'><X><T>Les 10 pièges de la SOA : 05 – Big Design Up Front (BDUF)</T><A>https://blog.engineering.publicissapient.fr/2008/06/11/les-10-pieges-de-la-soa-05-big-design-up-front-bduf/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Partington</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>11</DAY></DATE><COMMENT>The risks of BDUF: the teams in charge of the specification and the design will not handle the implementation, the services may have an incorrect granularity.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/06/11/les-10-pieges-de-la-soa-05-big-design-up-front-bduf/'><X><T>Les 10 pièges de la SOA : 04 – Mauvaise utilisation des Modèles de Données Canoniques (pivots)</T><A>https://blog.engineering.publicissapient.fr/2008/06/17/les-10-pieges-de-la-soa-04-mauvaise-utilisation-des-modeles-de-donnees-canoniques-pivots/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gero</FIRSTNAME><LASTNAME>Vermaas</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>The possible problems when defining the Canonical Data Model and how to avoid them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/06/17/les-10-pieges-de-la-soa-04-mauvaise-utilisation-des-modeles-de-donnees-canoniques-pivots/'><X><T>Les 10 pièges de la SOA : 03 – Le manque de compétences</T><A>https://blog.engineering.publicissapient.fr/2008/06/20/les-10-pieges-de-la-soa-03-le-manque-competences/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Viktor</FIRSTNAME><LASTNAME>Grhic</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>20</DAY></DATE><COMMENT>In order to apply SOA, all stakeholders must have a new mindset.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/06/20/les-10-pieges-de-la-soa-03-le-manque-competences/'><X><T>Les 10 pièges de la SOA : 02 – Propriété des composants et Financement au projet</T><A>https://blog.engineering.publicissapient.fr/2008/06/24/les-10-pieges-de-la-soa-02-propriete-des-composants-et-financement-au-projet/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Viktor</FIRSTNAME><LASTNAME>Grhic</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>24</DAY></DATE><COMMENT>How to manage who pays for implementing the services and who owns each component.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor='https://blog.engineering.publicissapient.fr/2008/06/24/les-10-pieges-de-la-soa-02-propriete-des-composants-et-financement-au-projet/'><X><T>Les 10 pièges de la SOA : 01 – Ignorer les impacts culturels</T><A>https://blog.engineering.publicissapient.fr/2008/06/27/les-10-pieges-de-la-soa-01-ignorer-les-impacts-culturels/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rik</FIRSTNAME><LASTNAME>de Groot</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heubès</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>The risks described here have already been discussed more or less in the previous articles. The proposed mitigations are: create a shared vision, define a strategy of how to change, and define clear tasks/roles/responsibilities.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Netflix</TITLE>
        <ITEM><ARTICLE><X><T>Making the Netflix API More Resilient</T><A>https://medium.com/netflix-techblog/making-the-netflix-api-more-resilient-a8ec62159c2d</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Schmaus</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>12</MONTH><DAY>8</DAY></DATE><COMMENT>How Netflix implemented the CircuitBreaker pattern.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Fault Tolerance in a High Volume, Distributed System</T><A>https://medium.com/netflix-techblog/fault-tolerance-in-a-high-volume-distributed-system-91ab4faae74a</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Christensen</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>29</DAY></DATE><COMMENT>A description of the DependencyCommand implemented by Netflix. This one provides timeout and retry management, and acts as a circuit breaker. It is implemented using threads (for network calls) or semaphore (if no network call).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Application Resilience in a Service-oriented Architecture</T><ST>Failure Isolation and Operations with Hystrix</ST><A>http://radar.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Christensen</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>10</DAY></DATE><COMMENT>A short introduction to Hystrix, a Netflix tool providing failure isolation and graceful degradation.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>NetflixOSS: Announcing Hollow</T><A>https://medium.com/netflix-techblog/netflixoss-announcing-hollow-5f710eefca4b</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Drew</FIRSTNAME><LASTNAME>Koszewnik</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>Netflix open-sources a system for read-only in-memory caching.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Microservices</TITLE>
      <ITEM><ARTICLE><X><T>Microservices and Jars</T><A>https://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>Microservices is the latest fad, but the most important is to split the system into parts using a plugin architecture, then setup service only at some boundaries.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Clean Micro-service Architecture</T><A>https://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>A similar blog: using microservices is a deployment detail. By adopting a Clean Architecture, you will be able to switch to microservices if scaling requires it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Microscope on Microservices</T><A>https://medium.com/netflix-techblog/a-microscope-on-microservices-923b906103f4</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Coburn</FIRSTNAME><LASTNAME>Watson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Emmons</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Brendan</FIRSTNAME><LASTNAME>Gregg</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>18</DAY></DATE><COMMENT>An impressive description of the monitoring tools used by Netflix.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Performance Issue Considerations for Microservices APIs</T><A>https://smartbear.com/blog/test-and-monitor/performance-issue-considerations-for-microservices/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Mueller</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>26</DAY></DATE><COMMENT>This article does not speak only about performance, but it contains some good basic advice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>Introduction to microservices</T><ST>Smaller, faster, stronger: Building better cloud applications from the ground up</ST><A>https://developer.ibm.com/technologies/microservices/tutorials/cl-ibm-cloud-microservices-in-action-part-1-trs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Osowski</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>A very basic introduction to microservices, but this is presented more as marketing bullshit than as technologies.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor='https://developer.ibm.com/technologies/microservices/tutorials/cl-ibm-cloud-microservices-in-action-part-1-trs/'><X><T>Containers and microservices — a perfect pair</T><ST>Why smaller, faster application components can be delivered more easily than ever</ST><A>https://www.ibm.com/developerworks/cloud/library/cl-bluemix-microservices-in-action-part-2-trs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Osowski</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>11</MONTH><DAY>13</DAY></DATE><COMMENT>Using containers (Docker) to deploy microservices, logging and monitoring, sero-downtime deployment, dynamic service registries.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Expecting Failures In Microservices and Working Around Them</T><A>https://www.codeguru.com/csharp/csharp/cs_network/expecting-failures-in-microservices-and-working-around-them.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christian</FIRSTNAME><LASTNAME>Horsdal</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>Also some basic but good design advice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>Use Swagger to document and define RESTful APIs</T><ST>Create customized documentation for your REST APIs by extending Swagger properties</ST><A>https://developer.ibm.com/technologies/web-development/articles/wa-use-swagger-to-document-and-define-restful-apis/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Fuyi</FIRSTNAME><LASTNAME>Li</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Vincenzes</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Anne</FIRSTNAME><LASTNAME>Wang</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>An unclear description on how authors customized Swagger to extend it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Serverless Computing: What It Is, Why You Should Care</T><A>https://www.forbes.com/sites/oracle/2017/11/08/serverless-computing-what-it-is-why-you-should-care/#12d85b266f45</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alan</FIRSTNAME><LASTNAME>Zeichick</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>8</DAY></DATE><COMMENT>A short non-technical introduction to Fn.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Entity Service Antipattern</T><A>https://www.michaelnygard.com/blog/2017/12/the-entity-service-antipattern/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Nygard</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor='https://www.michaelnygard.com/blog/2017/12/the-entity-service-antipattern/'><X><T>Services by Lifecycle</T><A>https://www.michaelnygard.com/blog/2018/01/services-by-lifecycle/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Nygard</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>1</MONTH><DAY>5</DAY></DATE><COMMENT>The continuation of the previous article. The author proposes to have one service per state in the entity lifecycle.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Microservices Aren’t Magic: Handling Timeouts</T><A>https://8thlight.com/blog/colin-jones/2018/09/18/microservices-arent-magic-handling-timeouts.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Colin</FIRSTNAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>Some options for handling timeouts.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>[Microservices Architecture] What is SAGA Pattern and How important is it?</T><A>https://medium.com/swlh/microservices-architecture-what-is-saga-pattern-and-how-important-is-it-55f56cfedd6b</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thanh</FIRSTNAME><LASTNAME>Le</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE><COMMENT>A basic presentation of the SAGA pattern (choreography and orchestration), but some claims (e.g. about 2PC) are wrong.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>GOTO 2020 • When To Use Microservices (And When Not To!) • Sam Newman &amp; Martin Fowler</T><A>https://www.youtube.com/watch?v=GBTdnfD6s5Q</A><L>en</L><F>MP4</F><DURATION><MINUTE>38</MINUTE><SECOND>43</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sam</FIRSTNAME><LASTNAME>Newman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>9</MONTH><DAY>3</DAY></DATE><COMMENT>Some interesting thoughts about microservices.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why do microservices need an API Gateway?</T><A>https://dev.to/rahul_ramfort/why-do-microservices-need-an-api-gateway-503i</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rahul</FIRSTNAME><LASTNAME>Ramfort</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>2</DAY></DATE><COMMENT>A too short desciption of what is an API gateway.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Monolith -&gt; Services: Theory &amp; Practice</T><A>https://medium.com/@kentbeck_7670/monolith-services-theory-practice-617e4546a879</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>3</DAY></DATE><COMMENT>Do not try to quickly switch to microservices, you must first master miniming coupling and increasing cohesion.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The macro problem with microservices</T><A>https://stackoverflow.blog/2020/11/23/the-macro-problem-with-microservices/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ryland</FIRSTNAME><LASTNAME>Goldstein</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>11</MONTH><DAY>23</DAY></DATE><COMMENT>A presentation/advertisement of Temporal.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>GOTO 2021 • The Problem with Microservices • Dave Farley</T><A>https://www.youtube.com/watch?v=V3NQt5KP7EM</A><L>en</L><F>MP4</F><DURATION><MINUTE>18</MINUTE><SECOND>11</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Farley</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>4</MONTH><DAY>9</DAY></DATE><COMMENT>A good overview of what is a microservices architecture.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Istio</TITLE>
        <ITEM><ARTICLE><X><T>Istio Circuit Breaker With Outlier Detection</T><ST>The basic intent of outlier detection is to stop sending requests to an unhealthy instance and give it time to recover.</ST><A>https://dzone.com/articles/istio-circuit-breaker-with-outlier-detection</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Samir</FIRSTNAME><LASTNAME>Behara</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>10</DAY></DATE><COMMENT>A short description of using Istio Circuit Breaker to detect a deficient node and to stop using it for a while.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Resilient Microservices With Istio Circuit Breaker</T><ST>In this article, we take a look at how to protect services from an unexpected number of requests or a dependent service outage.</ST><A>https://dzone.com/articles/resilient-microservices-with-istio-circuit-breaker</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Samir</FIRSTNAME><LASTNAME>Behara</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>13</DAY></DATE><COMMENT>A short description of using Istio Circuit Breaker to throttle the connections and requests to a node.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Serverless</TITLE>
      <ITEM><ARTICLE><X><T>Serverless Architectures</T><A>https://martinfowler.com/articles/serverless.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>5</MONTH><DAY>22</DAY></DATE><COMMENT>A description of a serverless architecture, its advantages and its problems.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor='https://martinfowler.com/articles/serverless.html'><X><T>Revisiting "Serverless Architectures"</T><A>https://blog.symphonia.io/revisiting-serverless-architectures-29f0b831303c</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>5</MONTH><DAY>22</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR> explains how he updated the previous article due to the evolution of the serverless ecosystem.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>CQRS</TITLE>
      <ITEM><ARTICLE><X><T>CQRS, Task Based UIs, Event Sourcing agh!</T><A>http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Greg</FIRSTNAME><LASTNAME>Young</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>CQRS is a really simple pattern. Task-based UI, events, eventual consistency are not required, even if they are often also present.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>CQRS</T><A>https://www.martinfowler.com/bliki/CQRS.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE><COMMENT>A description of the Command Query Responsibility Segregation where the model is split into two ones: one for display (the Query Model) and one for update (the Command Model).</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Functional programming</TITLE>
      <ITEM><ARTICLE><X status='dead'><T>Programming a functional future</T><A>http://www.techworld.com.au/article/46562/programming_functional_future</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cameron</FIRSTNAME><LASTNAME>Laird</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>A short introduction to the advantages of functional languages.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>Advanced Topics in Programming Languages: Parametric Polymorphism and the Girard-Reynolds Isomorphism</T><A>https://www.youtube.com/watch?v=h0OkptwfX4g</A><L>en</L><F>MP4</F><DURATION><MINUTE>30</MINUTE><SECOND>40</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Phill</FIRSTNAME><LASTNAME>Gossett</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>4</MONTH><DAY>18</DAY></DATE><COMMENT>A very theoretical and too fast presentation, you need to know functional programming to understand something here.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>OO vs FP</T><A>https://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>24</DAY></DATE><COMMENT>Functional Programming (no assignment operator) and Object Orientation (polymorphism) are not mutually exclusive.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Pragmatic Functional Programming</T><A>https://blog.cleancoder.com/uncle-bob/2017/07/11/PragmaticFunctionalProgramming.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>11</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR> repeats the reasons why learning FP is important and does some advertisement for Clojure.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>FP vs. OO</T><A>https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>13</DAY></DATE><COMMENT>Yet another explanation that FP and OO are compatible and should be used together.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Data Analysis by <AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR>: a good overview of the subject</TITLE>
      <ITEM><ARTICLE><X><T>Data Analysis - Computerphile</T><A>https://www.youtube.com/watch?v=NxYEzbbpk-4</A><L>en</L><F>MP4</F><DURATION><SECOND>52</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>The introduction of the series.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 0: Introduction to Data Analysis - Computerphile</T><A>https://www.youtube.com/watch?v=8GIbOJtUw8w</A><L>en</L><F>MP4</F><DURATION><MINUTE>14</MINUTE><SECOND>7</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>An introduction to data analysis and to R.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 1: What is Data? - Computerphile</T><A>https://www.youtube.com/watch?v=SEeQgNdJ6AQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>12</MINUTE><SECOND>14</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>The different types of data: nominal, ordinal, interval, ratio.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 2: Data Visualisation - Computerphile</T><A>https://www.youtube.com/watch?v=j6ClFJhnG18</A><L>en</L><F>MP4</F><DURATION><MINUTE>17</MINUTE><SECOND>41</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>Being careful of biased graphics and some basic explanation on which type of graph to use.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 3: Cleaning Data - Computerphile</T><A>https://www.youtube.com/watch?v=zVImIQuqjQ0</A><L>en</L><F>MP4</F><DURATION><MINUTE>14</MINUTE><SECOND>26</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>A description of data cleaning which is described as a very unscientific process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 4: Data Transformation - Computerphile</T><A>https://www.youtube.com/watch?v=ms6EV1pG3tc</A><L>en</L><F>MP4</F><DURATION><MINUTE>19</MINUTE><SECOND>30</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>Some examples of data transformations.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 5: Data Reduction - Computerphile</T><A>https://www.youtube.com/watch?v=8k56bvhXw4s</A><L>en</L><F>MP4</F><DURATION><MINUTE>17</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>Subsampling the data set or reducing its number of dimensions.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 6: Principal Component Analysis (PCA) - Computerphile</T><A>https://www.youtube.com/watch?v=TJdH6rPA-TI</A><L>en</L><F>MP4</F><DURATION><MINUTE>20</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>A description of Principle Component Analysis without the mathematical details.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 7: Clustering - Computerphile</T><A>https://www.youtube.com/watch?v=KtRLF6rAkyo</A><L>en</L><F>MP4</F><DURATION><MINUTE>16</MINUTE><SECOND>12</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>The same with k-means and PAM.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 8: Classifying Data - Computerphile</T><A>https://www.youtube.com/watch?v=1opLSwlqBSI</A><L>en</L><F>MP4</F><DURATION><MINUTE>15</MINUTE><SECOND>48</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>The training / validation / test phases, k-nearest neighbors, decision tree, support-vector machines and Weka.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Data Analysis 9: Data Regression - Computerphile</T><A>https://www.youtube.com/watch?v=ek0yyL8iV7I</A><L>en</L><F>MP4</F><DURATION><MINUTE>16</MINUTE><SECOND>3</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Pound</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>9</DAY></DATE><COMMENT>Linear regression, neural network and measuring the prediction effectiveness.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>