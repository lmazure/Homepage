<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Design</TITLE>
<PATH>links/design.xml</PATH>
<DATE><YEAR>2017</YEAR><MONTH>4</MONTH><DAY>3</DAY></DATE>
<CONTENT>

<LLIST>
  <ITEM><SLIST>
    <ITEM><CLIST><TITLE>Directories</TITLE>
      <ITEM><X><T>Open Directory</T><A>http://dmoz.org/Computers/Software/Software_Engineering/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>FAQ</T><A>http://www.faqs.org/faqs/software-eng/</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><CLIST><TITLE>O'Reilly's CD bookshelf</TITLE>
      <ITEM>(<X status='obsolete'><T>S</T><A>http://www.google.com/search?q=%22O%27Reilly%27s+CD+bookshelf%22</A><L>en</L><F>HTML</F></X>)</ITEM>
      <ITEM><X status='obsolete'><T>unix.org.ua</T><A>http://www.unix.org.ua/orelly/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X status='obsolete'><T>www.c3.hu</T><A>http://www.c3.hu/docs/oreilly</A><L>en</L><F>HTML</F></X></ITEM>
    </CLIST></ITEM>
    <ITEM><BLIST><TITLE>Software theory</TITLE>
      <ITEM><X><T>CiteSeer</T><A>http://citeseer.ist.psu.edu/cs</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Aspect programming</TITLE>
      <ITEM><X><T>AspectJ</T><A>http://eclipse.org/aspectj</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Object technology</TITLE>
      <ITEM><X><T>design patterns</T><A>dp.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>frameworks</T><A>http://st-www.cs.uiuc.edu/users/johnson/frameworks.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Taligent Developer Resources</T><A>http://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Home/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><CLIST><TITLE>CORBA</TITLE>
        <ITEM><X><T>OMG</T><A>http://www.omg.org/corba/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X status='obsolete'><T>Cetus</T><A>http://web.nchu.edu.tw/~jlu/cetus/oo_corba.html</A><L>en</L><F>HTML</F></X>
        (<X status='obsolete'><T>M</T><A>http://www.objenv.com/cetus/oo_corba.html</A><L>en</L><F>HTML</F></X>)</ITEM>
      </CLIST></ITEM>
      <ITEM><CLIST><TITLE>databases</TITLE>
        <ITEM><X><T>ODMG</T><A>http://www.odmg.org/</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Miscellaneous</TITLE>
      <ITEM><X><T>Uncle Bob's Principles of OOD</T><A>http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Architecture Review Checklist</T><A>http://www.opengroup.org/public/arch/p4/comp/clists/syseng.htm</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>sysml</T><A>http://www.sysml.org/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Catalog of Patterns of Enterprise Application Architecture</T><A>http://martinfowler.com/eaaCatalog/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Enterprise Integration Patterns</T><A>http://www.enterpriseintegrationpatterns.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Accidentally Quadratic</T><A>http://accidentallyquadratic.tumblr.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Microsoft REST API Guidelines</T><A>https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><X><T>IEEE 1016-2009</T><A>https://cow.ceng.metu.edu.tr/Courses/download_courseFile.php?id=6211</A><L>en</L><F>PDF</F></X>: IEEE Recommended Practice for Software Design Descriptions</ITEM><ITEM><BLIST><TITLE>User interface</TITLE>
      <ITEM><BLIST><TITLE>Mockup</TITLE>
        <ITEM><X><T>Balsamiq</T><A>http://balsamiq.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Pencil Project</T><A>http://pencil.evolus.vn</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles</TITLE>
    <ITEM><BLIST><TITLE>Design principles</TITLE>
      <ITEM><ARTICLE><X><T>Design Principles and Design Patterns</T><A>http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR></DATE><COMMENT>A presentation of<BR/>- the class design principles:<BR/>o the Open Closed Principle<BR/>o the Liskov Substitution Principle<BR/>o the Dependency Inversion Principle<BR/>- the package architecture principles:<BR/>o the Release Reuse Equivalency Principe<BR/>o the Common Closure Principle<BR/>o the Common Reuse Principle<BR/>o the Acyclic Dependencies Principle<BR/>o the Stable Dependencies Principle<BR/>o the Stable Abstractions Principle<BR/>- some design patterns:<BR/>o the Abstract Server<BR/>o the Adapter<BR/>o the Observer<BR/>o the Bridge<BR/>o the Abstract Factory</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='2'><T>Ruby Midwest 2011 - Keynote: Architecture the Lost Years by Robert Martin</T><A>https://www.youtube.com/watch?v=WpkDN78P884</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>39</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>11</MONTH><DAY>4</DAY></DATE><COMMENT>Uncle Bob explains basic good architecture principles, which we knew 10 years ago, but have been forgotten because of the Web craziness&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Robert C. Martin - Clean Architecture</T><A>http://vimeo.com/43612849</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>6</MONTH><DAY>7</DAY></DATE><COMMENT>This is the same presentation that above, this one is better structured, but less lively, I prefer the previous one.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Clean Architecture</T><A>http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>13</DAY></DATE><COMMENT>Four concentric layers: Entities, Use Cases, Interface Adapters, and Frameworks and Drivers. Using Dependency Inversion to have only inward dependencies and passing isolated simple data structures through the layer boundaries.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Single Responsibility Principle</T><A>http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>8</DAY></DATE><COMMENT>Group together what change together, separate things that change for different reasons, and remember that changes are requested by different persons.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Open Closed Principle</T><A>http://blog.8thlight.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>12</DAY></DATE><COMMENT>You should be able to extend the behavior of a system without having to modify that system. This is what plugins achieve.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Visualization Mnemonics for Software Principles</T><A>http://www.daedtech.com/visualization-mnemonics-for-software-principles</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Erik</FIRSTNAME><LASTNAME>Dietrich</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>This blog entry will not teach the software first principles (SOLID + law of Demeter), but tells some funny stories to remember them.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>SOLID Deconstruction</T><A>http://yowconference.com.au/slides/yow2013/Henney-SOLIDDeconstruction.pdf</A><L>en</L><F>PDF</F></X><X><T>SOLID Deconstruction</T><A>https://github.com/newmana/solid-deconstructed/blob/master/Henney-SOLIDDeconstruction.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Jakub</FIRSTNAME><LASTNAME>Hol&#xFD;</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>Yet another presentation of the SOLID principles.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What Is Assumed When Deferring Database Decisions?</T><A>https://blog.8thlight.com/patrick-gombert/2016/04/18/deferring-database.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Patrick</FIRSTNAME><LASTNAME>Gombert</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>4</MONTH><DAY>18</DAY></DATE><COMMENT>The choice of the database is not really a technical detail, the data access patterns of the application limit the choice of the database.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>ScreenCast sur Interface Segregation Principle</T><A>https://www.youtube.com/watch?v=4D3AkCg6x7I</A><L>fr</L><F>Flash Video</F><DURATION><MINUTE>5</MINUTE><SECOND>27</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sab</FIRSTNAME><LASTNAME>Buisson</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>Cleaning up some code to respect the ISP.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Beck's Design Rules</TITLE>
        <ITEM><ARTICLE><X><T>Clean Code: Four Simple Design Rules &#x2013; Obligatory Read</T><A>http://java.dzone.com/articles/clean-code-four-simple-design</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jakub</FIRSTNAME><LASTNAME>Hol&#xFD;</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>Kent Beck's Four Simple Design Rules:<BR/>- Runs all the tests<BR/>- Contains no duplications<BR/>- Expresses the intent of the programmers<BR/>- Minimizes the number of classes and methods</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>BeckDesignRules</T><A>http://martinfowler.com/bliki/BeckDesignRules.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>A shorter description of the four rules.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Model Driven Development</TITLE>
      <ITEM><ARTICLE><X quality='-1'><T>Model-Driven Development</T><A>https://msdn.microsoft.com/en-us/library/aa964145.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joseph</FIRSTNAME><LASTNAME>Hofstader</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>11</MONTH></DATE><COMMENT>An unclear description of MDD.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Conversation about Hexagonal Rails</TITLE>
      <ITEM><X><T>Martin Fowler's notes</T><A>http://martinfowler.com/articles/badri-hexagonal/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><ARTICLE><X><T>Conversation about Hexagonal Rails Part 1</T><A>http://thoughtworks.wistia.com/medias/uxjb0lwrcz</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>28</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Badri</FIRSTNAME><LASTNAME>Janakiraman</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>5</DAY></DATE><COMMENT>First, a definition of the hexagonal architecture, the database may be in or out the hexagon. Second, how to choose between Active Record and Data Mapper: the second one fits better for databases which are not fully controlled, for example because they result from the history of the company.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Conversation about Hexagonal Rails Part 2</T><A>http://thoughtworks.wistia.com/medias/jhdk2wa37j</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>22</MINUTE><SECOND>15</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Badri</FIRSTNAME><LASTNAME>Janakiraman</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>12</DAY></DATE><COMMENT>Should we use things such as Rails as a framework or as a set of components? We must define first the architecture we want to implement and, then, pick a framework enabling this architecture. External services should be isolated.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Library design</TITLE>
      <ITEM><ARTICLE><X><T>Good practices in Library Design Implementation, and Maintenance</T><A>http://www.akkadia.org/drepper/goodpractice.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Ulrich</FIRSTNAME><LASTNAME>Drepper</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>This article speaks mainly of the C/C++ compilation issues: keeping binary compatibility, avoiding name clashes&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>How To Design A Good API and Why it Matters</T><A>https://www.youtube.com/watch?v=aAb7hSCtvGw</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Joshua</FIRSTNAME><LASTNAME>Bloch</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>24</DAY></DATE><COMMENT>Some good advice on design a good API: when in doubt, leave it out; the principle of least astonishment&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Every public change is a breaking change</T><A>https://blogs.msdn.microsoft.com/ericlippert/2012/01/09/every-public-change-is-a-breaking-change/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Lippert</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>How to Design Great APIs - Parse Developer Day 2013</T><A>https://www.youtube.com/watch?v=qCdpTji8nxo</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>32</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Lacker</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>5</DAY></DATE><COMMENT>An API must be:<BR/>- intuitive (homogeneity, ugliness of dangerous calls)<BR/>- documented (reference docs, tutorials, quick-starts)<BR/>- opinionated (dictatorship of design philosophy)</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Don't Make Me Remember Things</T><A>https://blog.8thlight.com/rob-looby/2016/01/28/dont-make-me-remember-things.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rob</FIRSTNAME><LASTNAME>Looby</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>1</MONTH><DAY>28</DAY></DATE><COMMENT>Designing an API in a way the developer does not have to remember about possible pitfalls.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>ORM</TITLE>
      <ITEM><ARTICLE><X><T>Dance you Imps!</T><A>http://blog.8thlight.com/uncle-bob/2013/10/01/Dance-You-Imps.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>Object-Relational Mapping is a misnomer, ORMs are data structure migrators. An object is an abstraction of behaviour, not an abstraction of data. They should represent business objects, not database tables.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>ORMs - You're doing it wrong</T><A>https://skillsmatter.com/skillscasts/5688-orms-you-re-doing-it-wrong</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>5</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Jimmy</FIRSTNAME><LASTNAME>Bogard</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>3</DAY></DATE><COMMENT>Some advice on using ORMs. But some points are somewhat dubious: Is complex SQL better than indecipherable LINQ? Where is the business layer?&#x2026;</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>NoSQL</TITLE>
      <ITEM><ARTICLE><X><T>10 things you should know about NoSQL databases</T><A>http://www.techrepublic.com/blog/10-things/10-things-you-should-know-about-nosql-databases/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Guy</FIRSTNAME><LASTNAME>Harrison</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>26</DAY></DATE><COMMENT>The pros and cons of NoSQL databases given their current maturity status.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Software Development in the 21st Century by Martin Fowler</T><A>https://www.youtube.com/watch?v=TgdFA72crHM</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>50</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>The first talk is about when to use a schema vs when being schemaless. The second talk is about the origins of agile and levels of agile fluency.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>NoSQL: An introduction to polyglot persistence</T><A>http://vimeo.com/111285813</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>33</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Pramod</FIRSTNAME><LASTNAME>Sadalage</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>A good overview of the NoSQL databases.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Bigtable</TITLE>
        <ITEM><ARTICLE><X><T>Java development 2.0: NoSQL</T><ST>Schemaless data modeling with Bigtable and Groovy's Gaelyk</ST><A>https://www.ibm.com/developerworks/java/library/j-javadev2-8/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A Groovy example storing data in Google's Bigtable.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>MongoDB</TITLE>
        <ITEM><ARTICLE><X><T>Java development 2.0: MongoDB: A NoSQL datastore with (all the right) RDBMS moves</T><ST>Create and query documents using Java code and Groovy</ST><A>http://www.ibm.com/developerworks/java/library/j-javadev2-12/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of MongoDB with its JavaScript and Groovy (GMongo) APIs.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>SOA</TITLE>
      <ITEM><ARTICLE><X><T>Versioning in SOA</T><A>http://msdn.microsoft.com/en-us/library/bb491124.aspx</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Boris</FIRSTNAME><LASTNAME>Lublinsky</LASTNAME></AUTHOR><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Does My Bus Look Big in This?</T><A>http://www.infoq.com/presentations/soa-without-esb</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>42</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Webber</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>19</DAY></DATE><COMMENT>Fowler and Webber advice to use agility to build the enterprise architecture, doing incremental improvements, each adding value, instead of trying to respect big multi-year plans. They suggest to use Web technologies rather that a big proprietary middleware.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Bridging the gap between BI &amp; SOA</T><A>https://www.infoq.com/articles/BI-and-SOA</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Arnon</FIRSTNAME><LASTNAME>Rotem-Gal-Oz</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>10</DAY></DATE><COMMENT>How to get the data necessary for the BI in a SOA architecture: using a push model where events are published.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Les 10 pi&#xE8;ges de la SOA</TITLE>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 10 &#x2013; Le syndrome &#xAB; Not Invented Here &#xBB;</T><A>http://blog.xebia.fr/2008/05/16/les-10-pieges-de-la-soa-10-le-syndrome-not-invented-here/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Partington</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>Two NIH symptoms: not reusing a service, writing its own ESB.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 09 &#x2013; Le Versioning</T><A>http://blog.xebia.fr/2008/05/21/les-10-pieges-de-la-soa-09-le-versioning/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rik</FIRSTNAME><LASTNAME>de Groot</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>21</DAY></DATE><COMMENT>Managing service versions and lifecycles.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 08 &#x2013; La s&#xE9;curit&#xE9;</T><A>http://blog.xebia.fr/2008/05/27/les-10-pieges-de-la-soa-08-la-securite/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Viktor</FIRSTNAME><LASTNAME>Grgic</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>27</DAY></DATE><COMMENT>Some thoughts about security (confidentiality, integrity, and availability).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 07 &#x2013; Mauvaise granularit&#xE9; des services</T><A>http://blog.xebia.fr/2008/05/30/les-10-pieges-de-la-soa-07-mauvaise-granularite-des-services/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gero</FIRSTNAME><LASTNAME>Vermaas</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>The problem of the incorrect granularity of services and how to avoid it.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 06 &#x2013; La SOA ne r&#xE9;sout pas automatiquement la complexit&#xE9;</T><A>http://blog.xebia.fr/2008/06/03/les-10-pieges-de-la-soa-06-la-soa-ne-resout-pas-automatiquement-la-complexite/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rik</FIRSTNAME><LASTNAME>de Groot</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 05 &#x2013; Big Design Up Front (BDUF)</T><A>http://blog.xebia.fr/2008/06/11/les-10-pieges-de-la-soa-05-big-design-up-front-bduf/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Partington</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>11</DAY></DATE><COMMENT>The risks of BDUF: the teams in charge of the specification and the design will not handle the implementation, the services may have an incorrect granularity.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 04 &#x2013; Mauvaise utilisation des Mod&#xE8;les de Donn&#xE9;es Canoniques (pivots)</T><A>http://blog.xebia.fr/2008/06/17/les-10-pieges-de-la-soa-04-mauvaise-utilisation-des-modeles-de-donnees-canoniques-pivots/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gero</FIRSTNAME><LASTNAME>Vermaas</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>The possible problems when defining the Canonical Data Model and how to avoid them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 03 &#x2013; Le manque de comp&#xE9;tences</T><A>http://blog.xebia.fr/2008/06/20/les-10-pieges-de-la-soa-03-le-manque-competences/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Viktor</FIRSTNAME><LASTNAME>Grhic</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>20</DAY></DATE><COMMENT>In order to apply SOA, all stakeholders must have a new mindset.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 02 &#x2013; Propri&#xE9;t&#xE9; des composants et Financement au projet</T><A>http://blog.xebia.fr/2008/06/24/les-10-pieges-de-la-soa-02-propriete-des-composants-et-financement-au-projet/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Viktor</FIRSTNAME><LASTNAME>Grhic</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>24</DAY></DATE><COMMENT>How to manage who pays for implementing the services and who owns each component.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 01 &#x2013; Ignorer les impacts culturels</T><A>http://blog.xebia.fr/2008/06/27/les-10-pieges-de-la-soa-01-ignorer-les-impacts-culturels/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rik</FIRSTNAME><LASTNAME>de Groot</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Christophe</FIRSTNAME><LASTNAME>Heub&#xE8;s</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>The risks described here have already been discussed more or less in the previous articles. The proposed mitigations are: create a shared vision, define a strategy of how to change, and define clear tasks/roles/responsibilities.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Netflix</TITLE>
        <ITEM><ARTICLE><X><T>Making the Netflix API More Resilient</T><A>http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Schmaus</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>12</MONTH><DAY>8</DAY></DATE><COMMENT>How Netflix implemented the CircuitBreaker pattern.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Fault Tolerance in a High Volume, Distributed System</T><A>http://techblog.netflix.com/2012/02/fault-tolerance-in-high-volume.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Christensen</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>2</MONTH><DAY>29</DAY></DATE><COMMENT>A description of the DependencyCommand implemented by Netflix. This one provides timeout and retry management, and acts as a circuit breaker. It is implemented using threads (for network calls) or semaphore (if no network call).</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Application Resilience in a Service-oriented Architecture</T><ST>Failure Isolation and Operations with Hystrix</ST><A>http://radar.oreilly.com/2013/06/application-resilience-in-a-service-oriented-architecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Christensen</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>10</DAY></DATE><COMMENT>A short introduction to Hystrix, a Netflix tool providing failure isolation and graceful degradation.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>NetflixOSS: Announcing Hollow</T><A>http://techblog.netflix.com/2016/12/netflixoss-announcing-hollow.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Drew</FIRSTNAME><LASTNAME>Koszewnik</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>12</MONTH><DAY>5</DAY></DATE><COMMENT>Netflix open-sources a system for read-only in-memory caching.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Microservices</TITLE>
      <ITEM><ARTICLE><X><T>Microservices and Jars</T><A>http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>Microservices is the latest fad, but the most important is to split the system into parts using a plugin architecture, then setup service only at some boundaries.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Clean Micro-service Architecture</T><A>http://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>A similar blog: using microservices is a deployment detail. By adopting a Clean Architecture, you will be able to switch to microservices if scaling requires it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Microscope on Microservices</T><A>http://techblog.netflix.com/2015/02/a-microscope-on-microservices.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Coburn</FIRSTNAME><LASTNAME>Watson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Emmons</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Brendan</FIRSTNAME><LASTNAME>Gregg</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>2</MONTH><DAY>18</DAY></DATE><COMMENT>An impressive description of the monitoring tools used by Netflix.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Performance Issue Considerations for Microservices APIs</T><A>http://blog.smartbear.com/apm/performance-issue-considerations-for-microservices-apis/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Mueller</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>26</DAY></DATE><COMMENT>This article does not speak only about performance, but it contains some good basic advice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Expecting Failures In Microservices and Working Around Them</T><A>http://www.codeguru.com/csharp/csharp/cs_network/expecting-failures-in-microservices-and-working-around-them.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Christian</FIRSTNAME><LASTNAME>Horsdal</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>3</MONTH><DAY>23</DAY></DATE><COMMENT>Also some basic but good design advice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>Microservices in action, Part 1: Introduction to microservices</T><ST>Smaller, faster, stronger: Building better cloud applications from the ground up</ST><A>http://www.ibm.com/developerworks/cloud/library/cl-bluemix-microservices-in-action-part-1-trs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Osowski</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>A very basic introduction to microservices, but this is presented more as marketing bullshit than as technologies.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Microservices in action, Part 2: Containers and microservices &#x2014; a perfect pair</T><ST>Why smaller, faster application components can be delivered more easily than ever</ST><A>http://www.ibm.com/developerworks/cloud/library/cl-bluemix-microservices-in-action-part-2-trs/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Osowski</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>11</MONTH><DAY>13</DAY></DATE><COMMENT>Using containers (Docker) to deploy microservices, logging and monitoring, sero-downtime deployment, dynamic service registries.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>Use Swagger to document and define RESTful APIs</T><ST>Create customized documentation for your REST APIs by extending Swagger properties</ST><A>http://www.ibm.com/developerworks/library/wa-use-swagger-to-document-and-define-restful-apis/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Fuyi</FIRSTNAME><LASTNAME>Li</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Vincenzes</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Anne</FIRSTNAME><LASTNAME>Wang</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>An unclear description on how authors customized Swagger to extend it.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>CQRS</TITLE>
      <ITEM><ARTICLE><X><T>CQRS, Task Based UIs, Event Sourcing agh!</T><A>http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Greg</FIRSTNAME><LASTNAME>Young</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>16</DAY></DATE><COMMENT>CQRS is a really simple pattern. Task-based UI, events, eventual consistency are not required, even if they are often also present.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>CQRS</T><A>http://www.martinfowler.com/bliki/CQRS.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE><COMMENT>A description of the Command Query Responsibility Segregation where the model is split into two ones: one for display (the Query Model) and one for update (the Command Model).</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Miscellaneous</TITLE>
      <ITEM><ARTICLE><X><T>A Field Guide to Boxology: Preliminary Classification of Architectural Styles for Software Systems</T><A>http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/vit/www/paper_abstracts/Boxology.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mary</FIRSTNAME><LASTNAME>Shaw</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Clements</LASTNAME></AUTHOR><DATE><YEAR>1996</YEAR><MONTH>4</MONTH></DATE><COMMENT>After trying to define architecture styles, the authors propose a classification of these ones.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>http://www.sei.cmu.edu/reports/94tr010.pdf</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>http://www.dtic.mil/cgi-bin/GetTRDoc?Location=U2&amp;doc=GetTRDoc.pdf&amp;AD=ADA283827</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>../attic/tr10.94.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><LASTNAME>Kazman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Len</FIRSTNAME><LASTNAME>Bass</LASTNAME></AUTHOR><DATE><YEAR>1994</YEAR><MONTH>8</MONTH></DATE><COMMENT>The authors propose to look how the software architecture and the non-fonctional attributes are linked. This is still not rocket science, but this article is very helpful to make understand that most design choices have some good and some bad effects, these ones but be analysed and, depending on the prioritization of the non-functional attributes, the correct decision must be taken.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Steps in an Architecture Tradeoff Analysis Method: Quality Attribute Models and Analysis</T><A>http://www.sei.cmu.edu/reports/97tr029.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Mario</FIRSTNAME><MIDDLENAME>R.</MIDDLENAME><LASTNAME>Barbacci</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>S.</FIRSTNAME><MIDDLENAME>Jeromy</MIDDLENAME><LASTNAME>Carriere</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><MIDDLENAME>H.</MIDDLENAME><LASTNAME>Feiler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Rick</FIRSTNAME><LASTNAME>Kazman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><MIDDLENAME>H.</MIDDLENAME><LASTNAME>Klein</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Howard</FIRSTNAME><MIDDLENAME>F.</MIDDLENAME><LASTNAME>Lipson</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Longstaff</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Charles</FIRSTNAME><MIDDLENAME>B.</MIDDLENAME><LASTNAME>Weinstock</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR><MONTH>5</MONTH></DATE><COMMENT>The authors give a simplistic example of using performance, availability and security numerical models to perform the architectural tradeoff.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Global Survey of Software Development Practices</T><A>http://ebusiness.mit.edu/research/papers/2003.06_Cusumano_MacCormack_Kemerer_Crandall_A%20Global%20Survey_178.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Cusumano</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Alan</FIRSTNAME><LASTNAME>MacCormack</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><MIDDLENAME>F.</MIDDLENAME><LASTNAME>Kemerer</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>William</FIRSTNAME><LASTNAME>Crandall</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>A survey of some software project metrics in US, India, Japan and Europe. I don't think there is any value in this survey: the measurements are biased by the fact that there are provided by the companies themselves and the productivity (KLOC) and quality (number of bugs /KLOC) measures are plainly dumb.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>History-making components</T><A>http://www.ibm.com/developerworks/java/library/co-tmline/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Durham</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR><MONTH>4</MONTH></DATE><COMMENT>This timeline is more a generic computer/software history than focused on object-oriented events.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status='dead'><T>Programming a functional future</T><A>http://www.techworld.com.au/article/46562/programming_functional_future</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cameron</FIRSTNAME><LASTNAME>Laird</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>A short introduction to the advantages of functional languages.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Generation Templates Using XML and XSL</T><A>http://www.drdobbs.com/code-generation-templates-using-xml-and/184401474</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cristian</FIRSTNAME><LASTNAME>Georgescu</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>1</MONTH></DATE><COMMENT>I don't think this type of code generation can be used for programs in non trivial domains.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Primer for IEC 60601-1</T><A>http://www.orbitmicro.com/company/blog/334</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Leonard</FIRSTNAME><LASTNAME>Eisner</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>M.</MIDDLENAME><LASTNAME>Brown</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Dan</FIRSTNAME><LASTNAME>Modi</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR></DATE><COMMENT>A description of IEC 60601(Medical Electrical Equipment).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Preserving Backward Compatibility</T><A>http://www.onlamp.com/pub/a/onlamp/2005/02/17/backwardscompatibility.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Garrett</FIRSTNAME><LASTNAME>Rooney</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>A very good article about the different issues possible with backward compatibility and some solutions to solve them.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Top Ten Data Crunching Tips and Tricks</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/09/datacrunching.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Greg</FIRSTNAME><LASTNAME>Wilson</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>Some good general advice on parsing and filtering data.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Go To Statement Considered Harmful</T><A>http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html</A><L>en</L><F>HTML</F></X><X><T>Go To Statement Considered Harmful</T><A>https://files.ifi.uzh.ch/rerg/arvo/courses/kvse/uebungen/Dijkstra_Goto.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Edsger</FIRSTNAME><MIDDLENAME>W.</MIDDLENAME><LASTNAME>Dijkstra</LASTNAME></AUTHOR><DATE><YEAR>1968</YEAR><MONTH>3</MONTH></DATE><COMMENT>One of the most well-known software design article.</COMMENT></ARTICLE></ITEM>
       <ITEM><ARTICLE><X status='dead'><T>Code and Personality - How to tell your personality type from your code</T><A>http://homepage.mac.com/kevinmarks/personality.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Marks</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Maf</FIRSTNAME><LASTNAME>Vosburgh</LASTNAME></AUTHOR><DATE><YEAR>1998</YEAR><MONTH>6</MONTH></DATE><COMMENT>From Optimistic to Cynical: the different types of Mac developers.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Tracking Down Killer Bugs</T><A>http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/2002/0204/0204g/0204g.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>McRae</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>4</MONTH></DATE><COMMENT>Debugging an embedded system may be tricky&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What Developers Want</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/23/whatdevswant.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Murugan</FIRSTNAME><LASTNAME>Pal</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>23</DAY></DATE><COMMENT>A developer wish list, this one is maybe too linked to the latest fashions (e.g. SOA)&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why I Stopped Coding and Why I'd Start Again</T><A>http://www.onlamp.com/pub/a/python/2007/01/18/why-i-stopped-coding.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>McConnell</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>An idea: dynamically download libraries from Internet repositories.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Visual Perception with Deep Learning</T><A>https://www.youtube.com/watch?v=3boKlkPBckA</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Yann</FIRSTNAME><MIDDLENAME>Le</MIDDLENAME><LASTNAME>Cun</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>4</MONTH><DAY>10</DAY></DATE><COMMENT>Machine Learning: a description of the structure and learning methodology of a deep multi-layered architecture. Yann gives some examples for real-time video analysis.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Possible Future of Software Development</T><A>https://www.youtube.com/watch?v=4moyKUHApq4</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sean</FIRSTNAME><LASTNAME>Parent</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>After a description of the current status of software development, Sean explains the interest of generic programming and of constraining the architecture to be a DAG. Then, he gives an example built by his team: a library using declarations to model user interfaces.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Convenience Over Correctness</T><A>http://steve.vinoski.net/pdf/IEEE-Convenience_Over_Correctness.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Vinoski</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>7</MONTH></DATE><COMMENT>Why RPC is a bad idea (this is an oversimplification that cannot properly work in the real world) and should not be used anymore.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Three Beautiful Quicksorts</T><A>https://www.youtube.com/watch?v=aMnn0Jq0J-E</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Jon</FIRSTNAME><LASTNAME>Bentley</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH><DAY>9</DAY></DATE><COMMENT>A quick sort simple implementation, the simplification of the algorithm performance computation, and the Unix <CODEROUTINE>qsort</CODEROUTINE> implementation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1' status='dead'><T>An introduction to object prevalence</T><ST>Unleash the power of object orientation with a better persistence strategy</ST><A>http://www.ibm.com/developerworks/library/wa-objprev/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Carlos</FIRSTNAME><LASTNAME>Villela</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH><DAY>1</DAY></DATE><COMMENT>A presentation of Prevayler.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>On the criteria to be used in decomposing systems into modules</T><A>http://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>D.</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Palma</LASTNAME></AUTHOR><DATE><YEAR>1972</YEAR><MONTH>12</MONTH></DATE><COMMENT>A well known old article explaining that design decomposition should be based on information hiding rather than on the workflow.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>New machines, XML, and disambiguation</T><ST>Help the machine resolve contextual information</ST><A>http://www.ibm.com/developerworks/library/x-disambig/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Colin</FIRSTNAME><LASTNAME>Beckingham</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>29</DAY></DATE><COMMENT>A trivial idea: having several facets to words so different text consumers can interpret it at different ambiguity levels.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Legacy Application Strangulation : Case Studies</T><A>http://paulhammant.com/2013/07/14/legacy-application-strangulation-case-studies/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Hammant</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE><COMMENT>Some examples of strangulation of a legacy application: rewriting parts after parts while still using the (fewer and fewer) old parts meanwhile.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Synchronization in a Distributed System</T><A>http://blog.8thlight.com/rylan-dirksen/2013/10/04/synchronization-in-a-distributed-system.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rylan</FIRSTNAME><LASTNAME>Dirksen</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>4</DAY></DATE><COMMENT>Lamport timestamp and vector clock.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>GoRuCo 2011 - Sandi Metz - Less - The Path to Better Design</T><A>http://vimeo.com/26330100</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>41</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sandi</FIRSTNAME><LASTNAME>Metz</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>Sandy Metz indicates first that code must be transparent, reasonable, usable and exemplary. Then, she analyzes some implementations with these criteria.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Ruby Conf 12 - Boundaries by Gary Bernhardt</T><A>https://www.youtube.com/watch?v=yTkzNHF6rMs</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>45</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Gary</FIRSTNAME><LASTNAME>Bernhardt</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>3</DAY></DATE><COMMENT>Implementing the business logic in a core using immutable objects and the remainder in a shell using usual procedural programming. This can be done using the actor model.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>Simple Made Easy</T><A>http://www.infoq.com/presentations/Simple-Made-Easy</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>26</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Rich</FIRSTNAME><LASTNAME>Hickey</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The difference between simple and easy, writing simple code is difficult, TBD gives some advice on reaching simplicity.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Architectural Blueprints&#x2014;The &#x201C;4+1&#x201D; View Model of Software Architecture</T><A>http://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Philippe</FIRSTNAME><LASTNAME>Kruchten</LASTNAME></AUTHOR><DATE><YEAR>1995</YEAR><MONTH>11</MONTH></DATE><COMMENT>A model for describing the architecture of a software system: logical view / development view / process view / physical view + scenarios.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Framework Bound[2]</T><A>http://blog.8thlight.com/uncle-bob/2014/05/11/FrameworkBound.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>The frameworks can be useful, but they should stay at the periphery of the system.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='-1'><T>Leaky Libraries: How To Assess The Risk Of Dependencies</T><A>http://blog.8thlight.com/ben-voss/2014/05/26/leaky-libraries.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Voss</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>26</DAY></DATE><COMMENT>An unclear article advising to avoid libraries which will result into the application code being difficult to change later on.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Building on SOLID foundations - Steve Freeman &amp; Nat Pryce</T><A>http://vimeo.com/user22258446/review/79095045/9590c62ac2</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>16</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Steve</FIRSTNAME><LASTNAME>Freeman</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Nat</FIRSTNAME><LASTNAME>Pryce</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>The two speakers advocate for implementing "behaviour assembled from immutable objects acting on a stateful context".</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>October CincyRb - Jim Weirich on Decoupling from Rails</T><A>https://www.youtube.com/watch?v=tg5RFeSfBM4</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>15</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Weirich</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>15</DAY></DATE><COMMENT>How to decouple business logic from rails framework code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality ='1'><T>Bret Victor - Inventing on Principle</T><A>http://vimeo.com/36579366</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Bret</FIRSTNAME><LASTNAME>Victor</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>Bret Victor demoes some results from applying his principle "Creators need an immediate connection to what they are creating", then he gives examples of other persons whose life is driven by a principle, and finishes advocating to choose such a way of life.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Visualizing Algorithms</T><A>http://bost.ocks.org/mike/algorithms/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mike</FIRSTNAME><LASTNAME>Bostock</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>Creating some visualisations of some algorithms to help understanding them.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Refactoring for the cloud: lessons &amp; practices learned - Itamar Syn-Hershko</T><A>http://vimeo.com/user22258446/review/79105610/5925740657</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>30</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Itamar</FIRSTNAME><LASTNAME>Syn-Hershko</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>How Buzzilla redesigned its search software using Elasticsearch.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The More Things Change&#x2026;</T><A>http://blog.cleancoder.com/uncle-bob/2014/09/18/TheMoreThingsChange.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The names of the architectural patterns are changing along the years, but the patterns stay the same&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Language of the System - Rich Hickey</T><A>https://www.youtube.com/watch?v=ROor6_NGIWU</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Rich</FIRSTNAME><LASTNAME>Hickey</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>15</DAY></DATE><COMMENT>Some ideas about system design and the differences with design of a single process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>OO vs FP</T><A>http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>24</DAY></DATE><COMMENT>Functional Programming (no assignment operator) and Object Orientation (polymorphism) are not mutually exclusive.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>'Interface' Considered Harmful</T><A>http://blog.cleancoder.com/uncle-bob/2015/01/08/InterfaceConsideredHarmful.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT>Uncle Bob is complaining about C# and Java <CODEROUTINE>interface</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>Software Design: Why, When &amp; How - Kent Beck</T><A>http://vimeo.com/105771493</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>The title says all. Kent Beck provides very nuanced answer to the three questions: Why, when and how doing design decisions.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Option Type</T><A>http://blog.8thlight.com/dave-torre/2015/03/11/the-option-type.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dave</FIRSTNAME><LASTNAME>Torre</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>11</DAY></DATE><COMMENT>A description of the Option Type using the Rust language.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Why You Should Avoid a Canonical Data Model</T><A>https://www.innoq.com/en/blog/thoughts-on-a-canonical-data-model/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stefan</FIRSTNAME><LASTNAME>Tilkov</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>24</DAY></DATE><COMMENT>Having a model common to the whole enterprise is a bad idea and the author suggests, instead, providing a searchable repository of small fragments each one being provided by the team mastering its domain.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Agile Connect 2011 - Keynote: Software Design in the 21st Century</T><A>https://www.youtube.com/watch?v=p5Qj75nJPEs</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>19</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR></DATE><COMMENT>- Flaky tests must be fixed, some causes why tests are randomly failing<BR/>- why doing design<BR/>- 10 years after the Agile Manifesto</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Does Organization Matter?</T><A>http://blog.cleancoder.com/uncle-bob/2015/04/15/DoesOrganizationMatter.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>The larger a program is, the more organized it must be, and new comers must learn that organization.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Game Loop</T><A>http://gameprogrammingpatterns.com/game-loop.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><LASTNAME>Nystrom</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR></DATE><COMMENT>The main design pattern of any game.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Make the Magic go away.</T><A>http://blog.8thlight.com/uncle-bob/2015/08/06/let-the-magic-die.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>8</MONTH><DAY>6</DAY></DATE><COMMENT>Uncle Bob advices to understand how you could implement a framework by yourselves before starting to use one, it may not be worthwhile to use the framework.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Postel&#x2019;s Law is not for you</T><A>http://trevorjim.com/postels-law-is-not-for-you/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trevor</FIRSTNAME><LASTNAME>Jim</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>12</MONTH><DAY>15</DAY></DATE><COMMENT>A good comment of Postel's law ("Be conservative in what you do, be liberal in what you accept from others").</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Retract with the old, add with the new</T><A>https://blog.8thlight.com/elizabeth-engelman/2015/09/26/retract-with-the-old-add-with-the-new.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elizabeth</FIRSTNAME><LASTNAME>Engelman</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT>A presentation of Datomic, a distributed database using immutable data.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>TolerantReader</T><A>http://martinfowler.com/bliki/TolerantReader.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH><DAY>9</DAY></DATE><COMMENT>Be as tolerant as possible when reading data from a service.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>A Little Architecture</T><A>http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Martin</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>4</DAY></DATE><COMMENT>Inversion of control, interface segregation, and doing good architecture consists in deferring design decisions when possible.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Program to where the performance puck is going to be, not where it has been</T><A>https://m.signalvnoise.com/program-to-where-the-performance-puck-is-going-to-be-not-where-it-has-been-2e1c89bac058</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH><DAY>21</DAY></DATE><COMMENT>You should design for the future performance of the machines, not for the current one.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Sorting Secret - Computerphile</T><A>https://www.youtube.com/watch?v=pcJHkWwjNl4</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>9</MINUTE><SECOND>44</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Graham</FIRSTNAME><LASTNAME>Hutton</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>18</DAY></DATE><COMMENT>Using a graphic representation (in fact, a sorting network) to show that selection sort and insertion sort are the same thing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Fundamental tensions in code smells</T><A>https://8thlight.com/blog/colin-jones/2016/09/29/fundamental-code-smell-tensions.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Colin</FIRSTNAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>9</MONTH><DAY>29</DAY></DATE><COMMENT>Two code smells may be the opposite one of the other. But this is just the fact that design is compromise&#x2026;</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality='1'><T>Evolutionary Database Design</T><A>https://martinfowler.com/articles/evodb.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Pramod</FIRSTNAME><LASTNAME>Sadalage</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH></DATE><COMMENT>Some basic but good advice on managing databases: DBAs work closely with developers, perform small automated changes, these changes being version controlled&#x2026;</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>

</CONTENT>
</PAGE>

