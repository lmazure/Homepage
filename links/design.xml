<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Design</TITLE>
<PATH>links/design.xml</PATH>
<DATE><YEAR>2015</YEAR><MONTH>7</MONTH><DAY>11</DAY></DATE>
<CONTENT>

<X><T>Open Directory</T><A>http://dmoz.org/Computers/Software/Software_Engineering/</A><L>en</L><F>HTML</F></X>,
<X><T>FAQ</T><A>http://www.faqs.org/faqs/software-eng/</A><L>en</L><F>HTML</F></X><BR/>

O'Reilly's CD bookshelf:
(<X><T>S</T><A>http://www.google.com/search?q=%22O%27Reilly%27s+CD+bookshelf%22</A><L>en</L><F>HTML</F></X>)
<X><T>unix.org.ua</T><A>http://www.unix.org.ua/orelly/</A><L>en</L><F>HTML</F></X>,
<X><T>www.c3.hu</T><A>http://www.c3.hu/docs/oreilly</A><L>en</L><F>HTML</F></X><BR/>

<BLIST><TITLE>Software theory</TITLE>
<ITEM><X><T>CiteSeer</T><A>http://citeseer.ist.psu.edu/cs</A><L>en</L><F>HTML</F></X></ITEM>
</BLIST>

<BLIST><TITLE>Aspect programming</TITLE>
  <ITEM><X><T>AspectJ</T><A>http://eclipse.org/aspectj</A><L>en</L><F>HTML</F></X></ITEM>
</BLIST>

<BLIST><TITLE>Object technology</TITLE>
  <ITEM><X><T>design patterns</T><A>dp.html</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>frameworks</T><A>http://st-www.cs.uiuc.edu/users/johnson/frameworks.html</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>Taligent Developer Resources</T><A>http://root.cern.ch/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Home/index.html</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM>CORBA:
    <X><T>OMG</T><A>http://www.omg.org/corba/</A><L>en</L><F>HTML</F></X>,
    <X><T>Cetus</T><A>http://web.nchu.edu.tw/~jlu/cetus/oo_corba.html</A><L>en</L><F>HTML</F></X>
    (<X><T>M</T><A>http://www.objenv.com/cetus/oo_corba.html</A><L>en</L><F>HTML</F></X>),
  </ITEM>
  <ITEM>databases:
    <X><T>ODMG</T><A>http://www.odmg.org/</A><L>en</L><F>HTML</F></X>
  </ITEM>
</BLIST>

<BLIST><TITLE>Miscellaneous</TITLE>
  <ITEM><X><T>Uncle Bob's Principles of OOD</T><A>http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>Architecture Review Checklist</T><A>http://www.opengroup.org/public/arch/p4/comp/clists/syseng.htm</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>sysml</T><A>http://www.sysml.org/</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>Catalog of Patterns of Enterprise Application Architecture</T><A>http://martinfowler.com/eaaCatalog/index.html</A><L>en</L><F>HTML</F></X></ITEM>
  <ITEM><X><T>Enterprise Integration Patterns</T><A>http://www.enterpriseintegrationpatterns.com</A><L>en</L><F>HTML</F></X></ITEM>
</BLIST>

<X><T>IEEE 1016-2009</T><A>https://cow.ceng.metu.edu.tr/Courses/download_courseFile.php?id=6211</A><L>en</L><F>PDF</F></X>: IEEE Recommended Practice for Software Design Descriptions<BR/>
<BR/>

<BLIST><TITLE>User interface</TITLE>
  <ITEM><BLIST><TITLE>Mockup</TITLE>
    <ITEM><X><T>Balsamiq</T><A>http://balsamiq.com</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><X><T>Pencil Project</T><A>http://pencil.evolus.vn</A><L>en</L><F>HTML</F></X></ITEM>
  </BLIST></ITEM>
</BLIST>

<LINE/>

<BLIST><TITLE>Articles</TITLE>
  <ITEM><BLIST><TITLE>Design principles</TITLE>
    <ITEM><ARTICLE><X><T>Design Principles and Design Patterns</T><A>http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2000</YEAR></DATE><COMMENT>A presentation of<BR/>- the class design principles:<BR/>o the Open Closed Principle<BR/>o the Liskov Substitution Principle<BR/>o the Dependency Inversion Principle<BR/>- the package architecture principles:<BR/>o the Release Reuse Equivalency Principe<BR/>o the Common Closure Principle<BR/>o the Common Reuse Principle<BR/>o the Acyclic Dependencies Principle<BR/>o the Stable Dependencies Principle<BR/>o the Stable Abstractions Principle<BR/>- some design patterns:<BR/>o the Abstract Server<BR/>o the Adapter<BR/>o the Observer<BR/>o the Bridge<BR/>o the Abstract Factory</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='2'><T>Ruby Midwest 2011 - Keynote: Architecture the Lost Years by Robert Martin</T><A>http://www.youtube.com/watch?v=WpkDN78P884</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>6</MINUTE><SECOND>39</SECOND></DURATION></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>11</MONTH><DAY>4</DAY></DATE><COMMENT>Uncle Bob explains basic good architecture principles, which we knew 10 years ago, but have been forgotten because of the Web craziness&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Robert C. Martin - Clean Architecture</T><A>http://vimeo.com/43612849</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>6</MONTH><DAY>7</DAY></DATE><COMMENT>This is the same presentation that above, this one is better structured, but less lively, I prefer the previous one.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Clean Architecture</T><A>http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>13</DAY></DATE><COMMENT>Four concentric layers: Entities, Use Cases, Interface Adapters, and Frameworks and Drivers. Using Dependency Inversion to have only inward dependencies and passing isolated simple data structures through the layer boundaries.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Single Responsibility Principle</T><A>http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>8</DAY></DATE><COMMENT>Group together what change together, separate things that change for different reasons, and remember that changes are requested by different persons.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Open Closed Principle</T><A>http://blog.8thlight.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>12</DAY></DATE><COMMENT>You should be able to extend the behavior of a system without having to modify that system. This is what plugins achieve.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Visualization Mnemonics for Software Principles</T><A>http://www.daedtech.com/visualization-mnemonics-for-software-principles</A><L>en</L><F>HTML</F></X><AUTHOR>Erik Dietrich</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>This blog entry will not learn the software first principles (SOLID + law of Demeter), but tells some funny stories to remember them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>SOLID Deconstruction</T><A>http://yowconference.com.au/slides/yow2013/Henney-SOLIDDeconstruction.pdf</A><L>en</L><F>PDF</F></X><X><T>SOLID Deconstruction</T><A>https://github.com/newmana/solid-deconstructed/blob/master/Henney-SOLIDDeconstruction.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Jakub Hol&#xFD;</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>Yet another presentation of the SOLID principles.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Beck's Design Rules</TITLE>
    <ITEM><ARTICLE><X><T>Clean Code: Four Simple Design Rules &#x2013; Obligatory Read</T><A>http://java.dzone.com/articles/clean-code-four-simple-design</A><L>en</L><F>HTML</F></X><AUTHOR>Jakub Hol&#xFD;</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>Kent Beck's Four Simple Design Rules:<BR/>- Runs all the tests<BR/>- Contains no duplications<BR/>- Expresses the intent of the programmers<BR/>- Minimizes the number of classes and methods</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>BeckDesignRules</T><A>http://martinfowler.com/bliki/BeckDesignRules.html</A><L>en</L><F>HTML</F></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>2</DAY></DATE><COMMENT>A shorter description of the four rules.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Model Driven Development</TITLE>
    <ITEM><ARTICLE><X quality='-1'><T>Model-Driven Development</T><A>https://msdn.microsoft.com/en-us/library/aa964145.aspx</A><L>en</L><F>HTML</F></X><AUTHOR>Joseph Hofstader</AUTHOR><DATE><YEAR>2006</YEAR><MONTH>11</MONTH></DATE><COMMENT>An unclear description of MDD.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Domain Driven Design</TITLE>
    <ITEM><ARTICLE><X><T>BoundedContext</T><A>http://martinfowler.com/bliki/BoundedContext.html</A><L>en</L><F>HTML</F></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>15</DAY></DATE><COMMENT>Splitting a large models into several Bounded Contexts and defining the relations between them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>AnemicDomainModel</T><A>http://www.martinfowler.com/bliki/AnemicDomainModel.html</A><L>en</L><F>HTML</F></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>11</MONTH><DAY>25</DAY></DATE><COMMENT>When the business logic ends up in the Service Layer rather than in the Domain Layer.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Conversation about Hexagonal Rails</TITLE>
    <ITEM><X><T>Martin Fowler's notes</T><A>http://martinfowler.com/articles/badri-hexagonal/</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><ARTICLE><X><T>Conversation about Hexagonal Rails Part 1</T><A>http://thoughtworks.wistia.com/medias/uxjb0lwrcz</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>28</MINUTE><SECOND>35</SECOND></DURATION></X><AUTHOR>Martin Fowler</AUTHOR><AUTHOR>Badri Janakiraman</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>5</DAY></DATE><COMMENT>First, a definition of the hexagonal architecture, the database may be in or out the hexagon. Second, how to choose between Active Record and Data Mapper: the second one fits better for databases which are not fully controlled, for example because they result from the history of the company.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Conversation about Hexagonal Rails Part 2</T><A>http://thoughtworks.wistia.com/medias/jhdk2wa37j</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>22</MINUTE><SECOND>15</SECOND></DURATION></X><AUTHOR>Martin Fowler</AUTHOR><AUTHOR>Badri Janakiraman</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>12</DAY></DATE><COMMENT>Should we use things such as Rails as a framework or as a set of components? We must define first the architecture we want to implement and, then, pick a framework enabling this architecture. External services should be isolated.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Library design</TITLE>
    <ITEM><ARTICLE><X><T>Good practices in Library Design Implementation, and Maintenance</T><A>http://www.akkadia.org/drepper/goodpractice.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Ulrich Drepper</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>3</MONTH><DAY>7</DAY></DATE><COMMENT>This article speaks mainly of the C/C++ compilation issues: keeping binary compatibility, avoiding name clashes&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>How To Design A Good API and Why it Matters</T><A>http://www.youtube.com/watch?v=aAb7hSCtvGw</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR>Joshua Bloch</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>24</DAY></DATE><COMMENT>Some good advice on design a good API: when in doubt, leave it out; the principle of least astonishment&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>How to Design Great APIs - Parse Developer Day 2013</T><A>http://www.youtube.com/watch?v=qCdpTji8nxo</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>32</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR>Kevin Lacker</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>5</DAY></DATE><COMMENT>An API must be:<BR/>- intuitive (homogeneity, ugliness of dangerous calls)<BR/>- documented (reference docs, tutorials, quick-starts)<BR/>- opinionated (dictatorship of design philosophy)</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>ORM</TITLE>
    <ITEM><ARTICLE><X><T>Dance you Imps!</T><A>http://blog.8thlight.com/uncle-bob/2013/10/01/Dance-You-Imps.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>Object-Relational Mapping is a misnomer, ORMs are data structure migrators. An object is an abstraction of behaviour, not an abstraction of data. They should represent business objects, not database tables.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>ORMs - You're doing it wrong</T><A>https://skillsmatter.com/skillscasts/5688-orms-you-re-doing-it-wrong</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>5</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR>Jimmy Bogard</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>3</DAY></DATE><COMMENT>Some advice on using ORMs. But some points are somewhat dubious: Is complex SQL better than indecipherable LINQ? Where is the business layer?&#x2026;</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>NoSQL</TITLE>
    <ITEM><ARTICLE><X><T>10 things you should know about NoSQL databases</T><A>http://www.techrepublic.com/blog/10-things/10-things-you-should-know-about-nosql-databases/</A><L>en</L><F>HTML</F></X><AUTHOR>Guy Harrison</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>8</MONTH><DAY>26</DAY></DATE><COMMENT>The pros and cons of NoSQL databases given their current maturity status.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Software Development in the 21st Century by Martin Fowler</T><A>http://www.youtube.com/watch?v=TgdFA72crHM</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>50</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>The first talk is about when to use a schema vs when being schemaless. The second talk is about the origins of agile and levels of agile fluency.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>NoSQL: An introduction to polyglot persistence</T><A>http://vimeo.com/111285813</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>33</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR>Pramod Sadalage</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>A good overview of the NoSQL databases.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Bigtable</TITLE>
      <ITEM><ARTICLE><X><T>Java development 2.0: NoSQL</T><ST>Schemaless data modeling with Bigtable and Groovy's Gaelyk</ST><A>https://www.ibm.com/developerworks/java/library/j-javadev2-8/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Glover</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A Groovy example storing data in Google's Bigtable.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>MongoDB</TITLE>
      <ITEM><ARTICLE><X><T>Java development 2.0: MongoDB: A NoSQL datastore with (all the right) RDBMS moves</T><ST>Create and query documents using Java code and Groovy</ST><A>http://www.ibm.com/developerworks/java/library/j-javadev2-12/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Andrew Glover</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>9</MONTH><DAY>28</DAY></DATE><COMMENT>A presentation of MongoDB with its JavaScript and Groovy (GMongo) APIs.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>SOA</TITLE>
    <ITEM><ARTICLE><X><T>Versioning in SOA</T><A>http://msdn.microsoft.com/en-us/library/bb491124.aspx</A><L>fr</L><F>HTML</F></X><AUTHOR>Boris Lublinsky</AUTHOR><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Does My Bus Look Big in This?</T><A>http://www.infoq.com/presentations/soa-without-esb</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>42</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR>Martin Fowler</AUTHOR><AUTHOR>Jim Webber</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>19</DAY></DATE><COMMENT>Fowler and Webber advice to use agility to build the enterprise architecture, doing incremental improvements, each adding value, instead of trying to respect big multi-year plans. They suggest to use Web technologies rather that a big proprietary middleware.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 10 &#x2013; Le syndrome &#xAB; Not Invented Here &#xBB;</T><A>http://blog.xebia.fr/2008/05/16/les-10-pieges-de-la-soa-10-le-syndrome-not-invented-here/</A><L>fr</L><F>HTML</F></X><AUTHOR>Vincent Partington</AUTHOR><AUTHOR>Christophe Heub&#xE8;s</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>Two NIH symptoms: not reusing a service, writing its own ESB.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 09 &#x2013; Le Versioning</T><A>http://blog.xebia.fr/2008/05/21/les-10-pieges-de-la-soa-09-le-versioning/</A><L>fr</L><F>HTML</F></X><AUTHOR>Rik de Groot</AUTHOR><AUTHOR>Christophe Heub&#xE8;s</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>21</DAY></DATE><COMMENT>Managing service versions and lifecycles.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Les 10 pi&#xE8;ges de la SOA : 08 &#x2013; La s&#xE9;curit&#xE9;</T><A>http://blog.xebia.fr/2008/05/27/les-10-pieges-de-la-soa-08-la-securite/</A><L>fr</L><F>HTML</F></X><AUTHOR>Viktor Grgic</AUTHOR><AUTHOR>Christophe Heub&#xE8;s</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>27</DAY></DATE><COMMENT>Some thoughts about security (confidentiality, integrity, and availability).</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Miscellaneous</TITLE>
    <ITEM><ARTICLE><X><T>A Field Guide to Boxology: Preliminary Classification of Architectural Styles for Software Systems</T><A>http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/vit/www/paper_abstracts/Boxology.html</A><L>en</L><F>HTML</F></X><AUTHOR>Mary Shaw</AUTHOR><AUTHOR>Paul Clements</AUTHOR><DATE><YEAR>1996</YEAR><MONTH>4</MONTH></DATE><COMMENT>After trying to define architecture styles, the authors propose a classification of these ones.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>http://www.sei.cmu.edu/reports/94tr010.pdf</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>http://www.dtic.mil/cgi-bin/GetTRDoc?Location=U2&amp;doc=GetTRDoc.pdf&amp;AD=ADA283827</A><L>en</L><F>PDF</F></X><X><T>Toward Deriving Software Architectures From Quality Attributes</T><A>../attic/tr10.94.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Rick Kazman</AUTHOR><AUTHOR>Len Bass</AUTHOR><DATE><YEAR>1994</YEAR><MONTH>8</MONTH></DATE><COMMENT>The authors propose to look how the software architecture and the non-fonctional attributes are linked. This is still not rocket science, but this article is very helpful to make understand that most design choices have some good and some bad effects, these ones but be analysed and, depending on the prioritization of the non-functional attributes, the correct decision must be taken.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Steps in an Architecture Tradeoff Analysis Method: Quality Attribute Models and Analysis</T><A>http://www.sei.cmu.edu/reports/97tr029.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Mario R. Barbacci</AUTHOR><AUTHOR>S. Jeromy Carriere</AUTHOR><AUTHOR>Peter H. Feiler</AUTHOR><AUTHOR>Rick Kazman</AUTHOR><AUTHOR>Mark H. Klein</AUTHOR><AUTHOR>Howard F. Lipson</AUTHOR><AUTHOR>Thomas A. Longstaff</AUTHOR><AUTHOR>Charles B. Weinstock</AUTHOR><DATE><YEAR>1998</YEAR><MONTH>5</MONTH></DATE><COMMENT>The authors give a simplistic example of using performance, availability and security numerical models to perform the architectural tradeoff.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Global Survey of Software Development Practices</T><A>http://ebusiness.mit.edu/research/papers/2003.06_Cusumano_MacCormack_Kemerer_Crandall_A%20Global%20Survey_178.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Michael Cusumano</AUTHOR><AUTHOR>Alan MacCormack</AUTHOR><AUTHOR>Chris F. Kemerer</AUTHOR><AUTHOR>William Crandall</AUTHOR><DATE><YEAR>2003</YEAR><MONTH>6</MONTH><DAY>17</DAY></DATE><COMMENT>A survey of some software project metrics in US, India, Japan and Europe. I don't think there is any value in this survey: the measurements are biased by the fact that there are provided by the companies themselves and the productivity (KLOC) and quality (number of bugs /KLOC) measures are plainly dumb.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>History-making components</T><A>http://www.ibm.com/developerworks/java/library/co-tmline/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>James Durham</AUTHOR><DATE><YEAR>2001</YEAR><MONTH>4</MONTH></DATE><COMMENT>This timeline is more a generic computer/software history than focused on object-oriented events.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status='dead'><T>Programming a functional future</T><A>http://www.techworld.com.au/article/46562/programming_functional_future</A><L>en</L><F>HTML</F></X><AUTHOR>Cameron Laird</AUTHOR><DATE><YEAR>2000</YEAR><MONTH>11</MONTH></DATE><COMMENT>A short introduction to the advantages of functional languages.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Code Generation Templates Using XML and XSL</T><A>http://www.drdobbs.com/code-generation-templates-using-xml-and/184401474</A><L>en</L><F>HTML</F></X><AUTHOR>Cristian Georgescu</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>1</MONTH></DATE><COMMENT>I don't think this type of code generation can be used for programs in non trivial domains.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Primer for IEC 60601-1</T><A>http://www.orbitmicro.com/company/blog/334</A><L>en</L><F>HTML</F></X><AUTHOR>Leonard Eisner</AUTHOR><AUTHOR>Robert M. Brown</AUTHOR><AUTHOR>Dan Modi</AUTHOR><DATE><YEAR>2003</YEAR></DATE><COMMENT>A description of IEC 60601(Medical Electrical Equipment).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Preserving Backward Compatibility</T><A>http://www.onlamp.com/pub/a/onlamp/2005/02/17/backwardscompatibility.html</A><L>en</L><F>HTML</F></X><AUTHOR>Garrett Rooney</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>A very good article about the different issues possible with backward compatibility and some solutions to solve them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Top Ten Data Crunching Tips and Tricks</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/09/datacrunching.html</A><L>en</L><F>HTML</F></X><AUTHOR>Greg Wilson</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>Some good general advice on parsing and filtering data.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Go To Statement Considered Harmful</T><A>http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html</A><L>en</L><F>HTML</F></X><X><T>Go To Statement Considered Harmful</T><A>https://files.ifi.uzh.ch/rerg/arvo/courses/kvse/uebungen/Dijkstra_Goto.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Edsger W. Dijkstra</AUTHOR><DATE><YEAR>1968</YEAR><MONTH>3</MONTH></DATE><COMMENT>One of the most well-known software design article.</COMMENT></ARTICLE></ITEM>
     <ITEM><ARTICLE><X status='dead'><T>Code and Personality - How to tell your personality type from your code</T><A>http://homepage.mac.com/kevinmarks/personality.html</A><L>en</L><F>HTML</F></X><AUTHOR>Kevin Marks</AUTHOR><AUTHOR>Maf Vosburgh</AUTHOR><DATE><YEAR>1998</YEAR><MONTH>6</MONTH></DATE><COMMENT>From Optimistic to Cynical: the different types of Mac developers.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Tracking Down Killer Bugs</T><A>http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/2002/0204/0204g/0204g.htm</A><L>en</L><F>HTML</F></X><AUTHOR>Eric McRae</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>4</MONTH></DATE><COMMENT>Debugging an embedded system may be tricky&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What Developers Want</T><A>http://www.onlamp.com/pub/a/onlamp/2005/06/23/whatdevswant.html</A><L>en</L><F>HTML</F></X><AUTHOR>Murugan Pal</AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>23</DAY></DATE><COMMENT>A developer wish list, this one is maybe too linked to the latest fashions (e.g. SOA)&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why I Stopped Coding and Why I'd Start Again</T><A>http://www.onlamp.com/pub/a/python/2007/01/18/why-i-stopped-coding.html</A><L>en</L><F>HTML</F></X><AUTHOR>Brian McConnell</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>1</MONTH><DAY>18</DAY></DATE><COMMENT>An idea: dynamically download libraries from Internet repositories.</COMMENT></ARTICLE></ITEM>
  <ITEM><ARTICLE><X><T>Visual Perception with Deep Learning</T><A>http://www.youtube.com/watch?v=3boKlkPBckA</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>57</MINUTE><SECOND>25</SECOND></DURATION></X><AUTHOR>Yann Le Cun</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>4</MONTH><DAY>10</DAY></DATE><COMMENT>Machine Learning: a description of the structure and learning methodology of a deep multi-layered architecture. Yann gives some examples for real-time video analysis.</COMMENT></ARTICLE></ITEM>
  <ITEM><ARTICLE><X><T>A Possible Future of Software Development</T><A>http://www.youtube.com/watch?v=4moyKUHApq4</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR>Sean Parent</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>5</MONTH><DAY>20</DAY></DATE><COMMENT>After a description of the current status of software development, Sean explains the interest of generic programming and of constraining the architecture to be a DAG. Then, he gives an example built by his team: a library using declarations to model user interfaces.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Convenience Over Correctness</T><A>http://steve.vinoski.net/pdf/IEEE-Convenience_Over_Correctness.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Steve Vinoski</AUTHOR><DATE><YEAR>2008</YEAR><MONTH>7</MONTH></DATE><COMMENT>Why RPC is a bad idea (this is an oversimplification that cannot properly work in the real world) and should not be used anymore.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Three Beautiful Quicksorts</T><A>http://www.youtube.com/watch?v=aMnn0Jq0J-E</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>53</MINUTE><SECOND>56</SECOND></DURATION></X><AUTHOR>Jon Bentley</AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH><DAY>9</DAY></DATE><COMMENT>A quick sort simple implementation, the simplification of the algorithm performance computation, and the Unix <CODEROUTINE>qsort</CODEROUTINE> implementation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1' status='dead'><T>An introduction to object prevalence</T><ST>Unleash the power of object orientation with a better persistence strategy</ST><A>http://www.ibm.com/developerworks/library/wa-objprev/</A><L>en</L><F>HTML</F></X><AUTHOR>Carlos Villela</AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH><DAY>1</DAY></DATE><COMMENT>A presentation of Prevayler.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>On the criteria to be used in decomposing systems into modules</T><A>http://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>D. L. Palma</AUTHOR><DATE><YEAR>1972</YEAR><MONTH>12</MONTH></DATE><COMMENT>A well known old article explaining that design decomposition should be based on information hiding rather than on the workflow.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>New machines, XML, and disambiguation</T><ST>Help the machine resolve contextual information</ST><A>http://www.ibm.com/developerworks/library/x-disambig/index.html</A><L>en</L><F>HTML</F></X><AUTHOR>Colin Beckingham</AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>29</DAY></DATE><COMMENT>A trivial idea: having several facets to words so different text consumers can interpret it at different ambiguity levels.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Legacy Application Strangulation : Case Studies</T><A>http://paulhammant.com/2013/07/14/legacy-application-strangulation-case-studies/</A><L>en</L><F>HTML</F></X><AUTHOR>Paul Hammant</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE><COMMENT>Some examples of strangulation of a legacy application: rewriting parts after parts while still using the (fewer and fewer) old parts meanwhile.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Synchronization in a Distributed System</T><A>http://blog.8thlight.com/rylan-dirksen/2013/10/04/synchronization-in-a-distributed-system.html</A><L>en</L><F>HTML</F></X><AUTHOR>Rylan Dirksen</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>4</DAY></DATE><COMMENT>Lamport timestamp and vector clock.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>GoRuCo 2011 - Sandi Metz - Less - The Path to Better Design</T><A>http://vimeo.com/26330100</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>41</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR>Sandi Metz</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>Sandy Metz indicates first that code must be transparent, reasonable, usable and exemplary. Then, she analyzes some implementations with these criteria.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Ruby Conf 12 - Boundaries by Gary Bernhardt</T><A>http://www.youtube.com/watch?v=yTkzNHF6rMs</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>45</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR>Gary Bernhardt</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>3</DAY></DATE><COMMENT>Implementing the business logic in a core using immutable objects and the remainder in a shell using usual procedural programming. This can be done using the actor model.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Simple Made Easy</T><A>http://www.infoq.com/presentations/Simple-Made-Easy</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>1</MINUTE><SECOND>26</SECOND></DURATION></X><AUTHOR>Rich Hickey</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The difference between simple and easy, writing simple code is difficult, TBD gives some advice on reaching simplicity.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Architectural Blueprints&#x2014;The &#x201C;4+1&#x201D; View Model of Software Architecture</T><A>http://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf</A><L>en</L><F>PDF</F></X><AUTHOR>Philippe Kruchten</AUTHOR><DATE><YEAR>1995</YEAR><MONTH>11</MONTH></DATE><COMMENT>A model for describing the architecture of a software system: logical view / development view / process view / physical view + scenarios.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Framework Bound[2]</T><A>http://blog.8thlight.com/uncle-bob/2014/05/11/FrameworkBound.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>The frameworks can be useful, but they should stay at the periphery of the system.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='-1'><T>Leaky Libraries: How To Assess The Risk Of Dependencies</T><A>http://blog.8thlight.com/ben-voss/2014/05/26/leaky-libraries.html</A><L>en</L><F>HTML</F></X><AUTHOR>Ben Voss</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>26</DAY></DATE><COMMENT>An unclear article advising to avoid libraries which will result into the application code being difficult to change later on.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Building on SOLID foundations - Steve Freeman &amp; Nat Pryce</T><A>http://vimeo.com/user22258446/review/79095045/9590c62ac2</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>16</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR>Steve Freeman</AUTHOR><AUTHOR>Nat Pryce</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>The two speakers advocate for implementing "behaviour assembled from immutable objects acting on a stateful context".</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>October CincyRb - Jim Weirich on Decoupling from Rails</T><A>https://www.youtube.com/watch?v=tg5RFeSfBM4</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>15</MINUTE><SECOND>57</SECOND></DURATION></X><AUTHOR>Jim Weirich</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>15</DAY></DATE><COMMENT>How to decouple business logic from rails framework code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality ='1'><T>Bret Victor - Inventing on Principle</T><A>http://vimeo.com/36579366</A><L>en</L><F>Flash Video</F><DURATION><MINUTE>54</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR>Bret Victor</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>Bret Victor demoes some results from applying his principle "Creators need an immediate connection to what they are creating", then he gives examples of other persons whose life is driven by a principle, and finishes advocating to choose such a way of life.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Visualizing Algorithms</T><A>http://bost.ocks.org/mike/algorithms/</A><L>en</L><F>HTML</F></X><AUTHOR>Mike Bostock</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>Creating some visualisations of some algorithms to help understanding them.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Refactoring for the cloud: lessons &amp; practices learned - Itamar Syn-Hershko</T><A>http://vimeo.com/user22258446/review/79105610/5925740657</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>30</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR>Itamar Syn-Hershko</AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>10</DAY></DATE><COMMENT>How Buzzilla redesigned its search software using Elasticsearch.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The More Things Change&#x2026;</T><A>http://blog.cleancoder.com/uncle-bob/2014/09/18/TheMoreThingsChange.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The names of the architectural patterns are changing along the years, but the patterns stay the same&#x2026;</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Microservices and Jars</T><A>http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>19</DAY></DATE><COMMENT>Microservices is the latest fad, but the most important is to split the system into parts using a plugin architecture, then setup service only at some boundaries.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Clean Micro-service Architecture</T><A>http://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>A similar blog: using microservices is a deployment detail. By adopting a Clean Architecture, you will be able to switch to microservices if scaling requires it.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Language of the System - Rich Hickey</T><A>https://www.youtube.com/watch?v=ROor6_NGIWU</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>49</SECOND></DURATION></X><AUTHOR>Rich Hickey</AUTHOR><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>15</DAY></DATE><COMMENT>Some ideas about system design and the differences with design of a single process.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>OO vs FP</T><A>http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>11</MONTH><DAY>24</DAY></DATE><COMMENT>Functional Programming (no assignment operator) and Object Orientation (polymorphism) are not mutually exclusive.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>'Interface' Considered Harmful</T><A>http://blog.cleancoder.com/uncle-bob/2015/01/08/InterfaceConsideredHarmful.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>8</DAY></DATE><COMMENT>Uncle Bob is complaining about C# and Java <CODEROUTINE>interface</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality='1'><T>Software Design: Why, When &amp; How - Kent Beck</T><A>http://vimeo.com/105771493</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>0</MINUTE><SECOND>2</SECOND></DURATION></X><AUTHOR>Kent Beck</AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>10</DAY></DATE><COMMENT>The title says all. Kent Beck provides very nuanced answer to the three questions: Why, when and how doing design decisions.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>CQRS</T><A>http://www.martinfowler.com/bliki/CQRS.html</A><L>en</L><F>HTML</F></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2011</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE><COMMENT>A description of the Command Query Responsibility Segregation where the model is split into two ones: one for display (the Query Model) and one for update (the Command Model).</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Option Type</T><A>http://blog.8thlight.com/dave-torre/2015/03/11/the-option-type.html</A><L>en</L><F>HTML</F></X><AUTHOR>Dave Torre</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>11</DAY></DATE><COMMENT>A description of the Option Type using the Rust language.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Why You Should Avoid a Canonical Data Model</T><A>https://www.innoq.com/en/blog/thoughts-on-a-canonical-data-model/</A><L>en</L><F>HTML</F></X><AUTHOR>Stefan Tilkov</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>3</MONTH><DAY>24</DAY></DATE><COMMENT>Having a model common to the whole enterprise is a bad idea and the author suggests, instead, providing a searchable repository of small fragments each one being provided by the team mastering its domain.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Agile Connect 2011 - Keynote: Software Design in the 21st Century</T><A>https://www.youtube.com/watch?v=p5Qj75nJPEs</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>19</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR>Martin Fowler</AUTHOR><DATE><YEAR>2011</YEAR></DATE><COMMENT>- Flaky tests must be fixed, some causes why tests are randomly failing<BR/>- why doing design<BR/>- 10 years after the Agile Manifesto</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Does Organization Matter?</T><A>http://blog.cleancoder.com/uncle-bob/2015/04/15/DoesOrganizationMatter.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert C. Martin</AUTHOR><DATE><YEAR>2015</YEAR><MONTH>4</MONTH><DAY>15</DAY></DATE><COMMENT>The larger a program is, the more organized it must be, and new comers must learn that organization.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Game Loop</T><A>http://gameprogrammingpatterns.com/game-loop.html</A><L>en</L><F>HTML</F></X><AUTHOR>Robert Nystrom</AUTHOR><DATE><YEAR>2014</YEAR></DATE><COMMENT>The main design pattern of any game.</COMMENT></ARTICLE></ITEM>
  </BLIST></ITEM>
</BLIST>

</CONTENT>
</PAGE>

