<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Coding</TITLE>
<PATH>links/coding.xml</PATH>
<DATE><YEAR>2021</YEAR><MONTH>5</MONTH><DAY>13</DAY></DATE>
<CONTENT>
<LLIST>
  <ITEM><SLIST>
    <ITEM><X><T>stackoverflow</T><A>https://stackoverflow.com</A><L>en</L><F>HTML</F></X></ITEM>
    <ITEM><BLIST><TITLE>Refactoring</TITLE>
      <ITEM><X><T>Refactoring.com</T><A>https://www.refactoring.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>SourceMaking</T><A>https://sourcemaking.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Configuration management</TITLE>
      <ITEM><CLIST><TITLE><ANCHOR>clearcase</ANCHOR>ClearCase</TITLE>
        <ITEM><X><T>Rational</T><A>https://www.ibm.com/us-en/marketplace/rational-clearcase</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/clcase.htm</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><CLIST><TITLE><ANCHOR>cvs</ANCHOR><X><T>CVS</T><A>http://cvs.nongnu.org</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>tkcvs</T><A>https://tkcvs.sourceforge.io/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/cvs.html</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><X><T>RCS</T><A>https://www.cs.purdue.edu/homes/trinkle/RCS/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>CSSC</T><A>http://cssc.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>BitKeeper</T><A>https://www.bitkeeper.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><CLIST><TITLE><ANCHOR>svn</ANCHOR><X><T>subversion</T><A>https://subversion.apache.org/</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>TortoiseSVN</T><A>https://tortoisesvn.net/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>VisualSVN</T><A>https://www.visualsvn.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/svn.html</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><BLIST><TITLE><ANCHOR>git</ANCHOR><X><T>git</T><A>https://git-scm.com/</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>documentation</T><A>https://git-scm.com/doc</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Pro Git</T><A>https://git-scm.com/book</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>visual cheatsheet</T><A>http://ndpsoftware.com/git-cheatsheet.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>DeepGit</T><A>https://www.syntevo.com/deepgit/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>git-hyper-blame</T><A>https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/git-hyper-blame.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>SourceTree</T><A>https://www.sourcetreeapp.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/git.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><CLIST><TITLE>Repositories</TITLE>
          <ITEM><X><T>GitLab</T><A>https://about.gitlab.com/</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>BitBucket</T><A>https://bitbucket.org</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>GitHub</T><A>https://github.com</A><L>en</L><F>HTML</F></X></ITEM>
        </CLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><X><T>Aegis</T><A>https://sourceforge.net/projects/aegis/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Arch</T><A>http://www.gnu.org/software/gnu-arch/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>monotone</T><A>https://www.monotone.ca/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Perforce</T><A>https://www.perforce.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Vesta</T><A>http://www.vestasys.org/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>ArX</T><A>http://www.nongnu.org/arx/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Bazaar</T><A>http://bazaar-vcs.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>CVSNT</T><A>https://www.march-hare.com/cvspro/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Darcs</T><A>http://darcs.net</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>mercurial</T><A>https://www.mercurial-scm.org/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Dimensions CM</T><A>https://www.microfocus.com/en-us/products/dimensions-cm/overview</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE><ANCHOR>tfs</ANCHOR>TFS</TITLE>
        <ITEM><X><T>personal notes</T><A>../notes/tfs.html</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><CLIST><TITLE>Comparisons</TITLE>
        <ITEM><X quality="1"><T>Better SCM</T><A>http://better-scm.shlomifish.org</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Continuous integration</TITLE>
      <ITEM><X><T>Hudson</T><A>https://www.eclipse.org/hudson/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>CruiseControl</T><A>http://cruisecontrol.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Jenkins</T><A>https://www.jenkins.io/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>CircleCI</T><A>https://circleci.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Azure Pipelines</T><A>https://azure.microsoft.com/services/devops/pipelines/</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Zuul</T><A>https://zuul-ci.org/</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>TeamCity</T><A>https://www.jetbrains.com/teamcity/</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Bamboo</T><A>https://www.atlassian.com/software/bamboo</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Travis CI</T><A>https://travis-ci.org/</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>CodeShip</T><A>https://www.cloudbees.com/products/codeship</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Bitrise</T><A>https://www.bitrise.io/</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>JFrog Pipelines</T><A>https://www.jfrog.com/confluence/display/JFROG/JFrog+Pipelines</A><L>en</L><L>fr</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Build</TITLE>
      <ITEM><CLIST><TITLE><ANCHOR>make</ANCHOR>make</TITLE>
        <ITEM><X><T>GNU</T><A>http://www.gnu.org/software/make/manual/make.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/make.html</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><X><T>tmake</T><A>http://tmake.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Ant</T><A>http://ant.apache.org/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Maven</T><A>http://maven.apache.org/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Electric Cloud</T><A>https://www.electriccloud.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Compilers</TITLE>
      <ITEM><CLIST><TITLE><ANCHOR>gcc</ANCHOR><X><T>gcc</T><A>http://gcc.gnu.org</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>extensions</T><A>http://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/C-Extensions.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/gcc.html</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><X><T>Intel Compilers</T><A>https://software.intel.com/en-us/intel-compilers/</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Linkers</TITLE>
      <ITEM><X><T>ld</T><A>http://sourceware.org/binutils/docs-2.19/ld/</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Artefact repository</TITLE>
      <ITEM><X><T>Nexus</T><A>https://www.sonatype.com/nexus/repository-oss</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Artifactory</T><A>https://jfrog.com/artifactory/</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Code browsers</TITLE>
      <ITEM><CLIST><TITLE><ANCHOR>cscope</ANCHOR><X status="obsolete"><T>Cscope</T><A>http://cscope.sourceforge.net/</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>personal notes</T><A>../notes/cscope.html</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Debuggers</TITLE>
      <ITEM><BLIST><TITLE><ANCHOR>gdb</ANCHOR><X><T>gdb</T><A>http://www.sourceware.org/gdb/</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>rr</T><A>https://rr-project.org</A><L>en</L><F>HTML</F></X>: lightweight recording &amp; deterministic debugging</ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/gdb.html</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><CLIST><TITLE>ddd</TITLE>
        <ITEM><X><T>GNU</T><A>http://www.gnu.org/software/ddd/</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><X><T>AskIgor</T><A>https://www.st.cs.uni-saarland.de/askigor/faq.php</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Memory checkers</TITLE>
      <ITEM><CLIST><TITLE><ANCHOR>purify</ANCHOR>Purify</TITLE>
        <ITEM><X><T>doc</T><A>http://publibfp.dhe.ibm.com/epubs/pdf/i1194270.pdf</A><L>en</L><F>PDF</F></X></ITEM>
        <ITEM><X><T>personal notes</T><A>../notes/purify.html</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><CLIST><TITLE><ANCHOR>valgrind</ANCHOR><X><T>Valgrind</T><A>https://www.valgrind.org/</A><L>en</L><F>HTML</F></X></TITLE>
        <ITEM><X><T>personal notes</T><A>../notes/valgrind.html</A><L>en</L><F>HTML</F></X></ITEM>
      </CLIST></ITEM>
      <ITEM><X><T>dmalloc</T><A>https://dmalloc.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>ccmalloc</T><A>http://cs.ecs.baylor.edu/~donahoo/tools/ccmalloc/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Electric Fence</T><A>https://github.com/kallisti5/ElectricFence</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Boehm Collector</T><A>https://www.hboehm.info/gc/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>LeakTracer</T><A>http://www.andreasen.org/LeakTracer/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>MemWatch</T><A>https://sourceforge.net/projects/memwatch/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Memprof</T><A>http://www.secretlabs.de/projects/memprof/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>mpatrol</T><A>http://mpatrol.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>AddressSanitizer (aka ASan)</T><A>https://github.com/google/sanitizers</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Static analyzers</TITLE>
      <ITEM><BLIST><TITLE>C</TITLE>
        <ITEM><X><T>splint</T><A>http://www.splint.org/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>smatch</T><A>http://smatch.sourceforge.net/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>slam</T><A>https://www.microsoft.com/en-us/research/project/slam/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>SonarQube</T><A>https://www.sonarqube.org</A><L>en</L><F>HTML</F></X>: duplicated code, coding standards, unit tests, code complexity, potential bugs, code coverage…</ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Multi-language</TITLE>
        <ITEM><X><T>Coverity</T><A>https://www.synopsys.com/software-integrity/security-testing/static-analysis-sast.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>CAST</T><A>https://www.castsoftware.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Infer</T><A>https://fbinfer.com/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>C/C++</TITLE>
        <ITEM><CLIST><TITLE><ANCHOR>prolint</ANCHOR><X><T>PC-lint/FlexeLint/ProLint</T><A>https://www.gimpel.com</A><L>en</L><F>HTML</F></X></TITLE>
          <ITEM><X><T>error messages</T><A>https://www.gimpel.com/html/pub/msg.txt</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>personal notes</T><A>../notes/prolint.html</A><L>en</L><F>HTML</F></X></ITEM>
        </CLIST></ITEM>
        <ITEM><X><T>Parasoft C++test</T><A>https://www.parasoft.com/products/ctest/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>PolySpace</T><A>https://www.mathworks.com/products/polyspace.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Flawfinder</T><A>https://dwheeler.com/flawfinder/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Klocwork</T><A>https://www.klocwork.com/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><X><T>PMD</T><A>https://pmd.github.io/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>CheckStyle</T><A>https://checkstyle.sourceforge.io/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Jtest</T><A>https://www.parasoft.com/product/jtest/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Jlint</T><A>http://artho.com/jlint</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>FindBugs</T><A>http://findbugs.sourceforge.net</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>Macker</T><A>https://innig.net/macker/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>STAN</T><A>http://stan4j.com</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>C#</TITLE>
        <ITEM><X><T>StyleCop</T><A>https://stylecop.codeplex.com</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>JavaScript</TITLE>
        <ITEM><X><T>JSLint</T><A>http://www.jslint.com</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>JHLint</T><A>https://jshint.com</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>List</TITLE>
        <ITEM><X><T>Wikipedia</T><A>https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>splint</T><A>http://www.splint.org/links.html</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>spinroot</T><A>http://spinroot.com/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>CERN Computer Security</T><A>https://security.web.cern.ch/recommendations/fr/code_tools.shtml</A><L>fr</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Dependency analysis</TITLE>
      <ITEM><X><T>Lattix</T><A>https://lattix.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>JDepend</T><A>https://github.com/clarkware/jdepend</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>NDepend</T><A>https://www.ndepend.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Metrics</TITLE>
      <ITEM><X><T>M Squared Technologies</T><A>http://msquaredtechnologies.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>CMT++</T><A>http://www.testwell.fi/cmtdesc.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>JavaNCSS</T><A>http://www.kclee.de/clemens/java/javancss/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>McCabe</T><A>http://www.mccabe.com/iq.htm</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Krakatau</T><A>http://www.powersoftware.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Code Climate</T><A>https://codeclimate.com</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Profilers</TITLE>
      <ITEM><X><T>gprof</T><A>http://sourceware.org/binutils/docs-2.18/gprof/index.html</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>oprofile</T><A>https://oprofile.sourceforge.io/news/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>GlowCode</T><A>https://www.glowcode.com/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X status="obsolete"><T>FunctionCheck</T><A>https://sourceforge.net/projects/fnccheck/</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><BLIST><TITLE>Java</TITLE>
        <ITEM><BLIST><TITLE>Eclipse plugins</TITLE>
          <ITEM><X><T>EclipseColorer</T><A>https://sourceforge.net/projects/eclipsecolorer</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>jMechanic</T><A>https://sourceforge.net/projects/jmechanic/</A><L>en</L><F>HTML</F></X></ITEM>
        </BLIST></ITEM>
        <ITEM><X status="obsolete"><T>JMP</T><A>http://www.khelekore.org/jmp/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>JProfiler</T><A>https://www.ej-technologies.com/products/jprofiler/overview.html</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>.NET</TITLE>
        <ITEM><X><T>dotTrace</T><A>https://www.jetbrains.com/profiler/</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><X><T>ANTS</T><A>https://www.red-gate.com/products/dotnet-development/ants-performance-profiler/</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Diff / merge</TITLE>
      <ITEM><X><T>WinMerge</T><A>https://winmerge.org</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>KDiff3</T><A>https://invent.kde.org/sdk/kdiff3</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Other tools</TITLE>
      <ITEM><X><T>Simian</T><A>http://www.harukizaemon.com/simian/</A><L>en</L><F>HTML</F></X>: detection of code duplication</ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Code reviews</TITLE>
      <ITEM><BLIST><TITLE>Tools</TITLE>
        <ITEM><X><T>Crucible</T><A>https://www.atlassian.com/software/crucible</A><L>en</L><F>HTML</F></X></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Checklits</TITLE>
        <ITEM><X><T>Macadamian checklist</T><A>https://archive.is/voACj</A><L>en</L><F>HTML</F></X></ITEM>
        <ITEM><BLIST><TITLE>C#</TITLE>
          <ITEM><X><T>Ted Graham</T><A>https://weblogs.asp.net/tgraham/44763</A><L>en</L><F>HTML</F></X></ITEM>
          <ITEM><X><T>Mohammed Hameed</T><A>https://www.codeproject.com/reference/593751/WebControls/WebControls/?fid=1834048</A><L>en</L><F>HTML</F></X></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Games</TITLE>
      <ITEM><X><T>CodinGame</T><A>https://www.codingame.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>codewars</T><A>https://www.codewars.com</A><L>en</L><F>HTML</F></X></ITEM>
      <ITEM><X><T>Competitive Programmer's Handbook</T><A>https://cses.fi/book.html</A><L>en</L><F>HTML</F></X></ITEM>
    </BLIST></ITEM>
  </SLIST></ITEM>
  <ITEM><BLIST><TITLE>Articles and videos</TITLE>
    <ITEM><ARTICLE><X><T>CodeAsDocumentation</T><A>https://martinfowler.com/bliki/CodeAsDocumentation.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>3</MONTH><DAY>22</DAY></DATE><COMMENT>Code is the primary source of documentation, so it should be clear and readable.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>ComposedRegex</T><A>https://martinfowler.com/bliki/ComposedRegex.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>7</MONTH><DAY>24</DAY></DATE><COMMENT>Splitting a regular expression into pieces to make it readable.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Fecophiles</T><A>https://blog.cleancoder.com/uncle-bob/2012/01/20/Fecophiles.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>1</MONTH><DAY>20</DAY></DATE><COMMENT>An example of crappy code.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X status="zombie"><T>Reducing Incidental Complexity in Our Code and in Our Teaching</T><A>https://8thlight.com/blog/ryan-verner/2013/10/09/reducing-incidental-complexity-in-our-code-and-in-our-teaching.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ryan</FIRSTNAME><LASTNAME>Verner</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE><COMMENT>Some thoughts about the fact that the code we write should be simpler.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>How Long Is Too Long?</T><A>https://8thlight.com/blog/dariusz-pasciak/2014/09/11/how-long-is-too-long-source-code.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dariusz</FIRSTNAME><LASTNAME>Pasciak</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>9</MONTH><DAY>11</DAY></DATE><COMMENT>Source code files should have a maximum allowed number of lines.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>The Downsides of Clean Commits</T><A>https://randycoulman.com/blog/2015/10/20/the-downsides-of-clean-commits/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Randy</FIRSTNAME><LASTNAME>Coulman</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>Imposing clean commits results into doing less cleanup.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>ListAndHash</T><A>https://martinfowler.com/bliki/ListAndHash.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>12</MONTH><DAY>3</DAY></DATE><COMMENT>About the flexibility of data structures which are a composite of lists and hashmaps.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>ITT 2016 - Kevlin Henney - Seven Ineffective Coding Habits of Many Programmers</T><A>https://www.youtube.com/watch?v=ZsHMHukIlJY</A><L>en</L><F>MP4</F><DURATION><MINUTE>46</MINUTE><SECOND>28</SECOND></DURATION><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>16</DAY></DATE></X><AUTHOR><FIRSTNAME>Kevlin</FIRSTNAME><LASTNAME>Henney</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>4</MONTH><DAY>5</DAY></DATE><COMMENT>Miscellaneous thoughts about naming, code layout, encapsulation, getters/setters, tests…</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="-1"><T>Testing Solid Code</T><A>https://www.codeguru.com/columns/experts/testing-solid-code.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Paul</FIRSTNAME><LASTNAME>Kimmel</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>Some strongly-worded miscellaneous opinions about best practices and useless managers.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>What Will Your Legacy [Code] Be?</T><A>https://8thlight.com/blog/colin-jones/2016/08/30/what-will-your-legacy-code-be.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Colin</FIRSTNAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>8</MONTH><DAY>30</DAY></DATE><COMMENT>Thinking about legacy code, the one we inherit and the one we leave.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="-1"><T>Technical debt is real debt</T><A>https://nvie.com/posts/why-you-should-consider-technical-debt-to-be-real-debt/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Driessen</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Travis</FIRSTNAME><LASTNAME>Kimmel</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>1</MONTH><DAY>19</DAY></DATE><COMMENT>A description of technical debt, but the subject is much too simplified.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>SelfEncapsulation</T><A>https://martinfowler.com/bliki/SelfEncapsulation.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>3</MONTH><DAY>9</DAY></DATE><COMMENT>Martin explains that self-encapsulation, according to him, has little interest except in some particular cases.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Code Health: Reduce Nesting, Reduce Complexity</T><A>https://testing.googleblog.com/2017/06/code-health-reduce-nesting-reduce.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Elliott</FIRSTNAME><LASTNAME>Karpilovsky</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>5</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Code Health: Obsessed With Primitives?</T><A>https://testing.googleblog.com/2017/11/obsessed-with-primitives.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Marc</FIRSTNAME><LASTNAME>Eaddy</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>13</DAY></DATE><COMMENT>It is better to use classes rather than raw primitives.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>A Common Mistake When Caching Nullable Values</T><ST>It looks like there's a bug with the way Eclipse implemented modularity support. Let's see what happens when you try to cache nullable values in a non-modular project.</ST><A>https://dzone.com/articles/a-common-mistake-when-caching-nullable-values</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Lukas</FIRSTNAME><LASTNAME>Eder</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>12</MONTH><DAY>16</DAY></DATE><COMMENT>The problem of caching the <CODEROUTINE>null</CODEROUTINE> value.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Integers and Estimates</T><A>https://blog.cleancoder.com/uncle-bob/2018/06/21/IntegersAndEstimates.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>6</MONTH><DAY>21</DAY></DATE><COMMENT>A meaningless mixture of diophantine equations, Hilbert's Entscheidungsproblem and workload estimation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Too Clean?</T><A>https://blog.cleancoder.com/uncle-bob/2018/08/13/TooClean.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>8</MONTH><DAY>13</DAY></DATE><COMMENT>Allowing for some slight mess in the code is helpful.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Conditions Are Power-Law Distributed: An Example</T><A>https://medium.com/@kentbeck_7670/conditions-are-power-law-distributed-an-example-61fa4e0d3500</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Vincent Jugé améliore l’algorithme au cœur de Python, Java et Android</T><ST>En modifiant seulement quatre lignes de code, Vincent Jugé du LIGM surpasse les performances de l’algorithme de tri de référence : Timsort. Il présente sa nouvelle version, Adaptative Shivers Sort, lors de la conférence SODA20 à Salt Lake City, dans l’espoir de remplacer le vénérable algorithme.</ST><A>https://ins2i.cnrs.fr/fr/cnrsinfo/vincent-juge-ameliore-lalgorithme-au-coeur-de-python-java-et-android</A><L>fr</L><F>HTML</F></X><DATE><YEAR>2020</YEAR><MONTH>1</MONTH><DAY>6</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Curried Functions - Computerphile</T><A>https://www.youtube.com/watch?v=psmu_VAuiag</A><L>en</L><F>MP4</F><DURATION><MINUTE>10</MINUTE><SECOND>16</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Graham</FIRSTNAME><LASTNAME>Hutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>4</MONTH><DAY>1</DAY></DATE><COMMENT>A basic explanation of function currying.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Branchless Programming: Why "If" is Sloowww... and what we can do about it!</T><A>https://www.youtube.com/watch?v=bVJ-mWWL7cE</A><L>en</L><F>MP4</F><DURATION><MINUTE>19</MINUTE><SECOND>24</SECOND></DURATION></X><AUTHOR><GIVENNAME>Creel</GIVENNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>6</MONTH><DAY>30</DAY></DATE><COMMENT>An introduction to branchless programming, something that almost no developper sould use.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Fortunately, I don't squash my commits</T><ST>The story of a bug, and how I addressed it.</ST><A>https://blog.ploeh.dk/2020/10/05/fortunately-i-dont-squash-my-commits/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Seemann</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>5</DAY></DATE><COMMENT>The subtitle says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="-1"><T>Program Correctness - Computerphile</T><A>https://www.youtube.com/watch?v=T_IINWzQhow</A><L>en</L><F>MP4</F><DURATION><MINUTE>17</MINUTE><SECOND>13</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Graham</FIRSTNAME><LASTNAME>Hutton</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>11</MONTH><DAY>27</DAY></DATE><COMMENT>The title is very misleading, this is only about using Haskell's QuickCheck on a very simple example.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Brute Forcing The Countdown Numbers Game - Computerphile</T><A>https://www.youtube.com/watch?v=cVMhkqPP2YI</A><L>en</L><F>MP4</F><DURATION><MINUTE>13</MINUTE><SECOND>46</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Turner</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>12</MONTH><DAY>18</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>How NOT to Sample Audio! - Computerphile</T><A>https://www.youtube.com/watch?v=VQOdmckqNro</A><L>en</L><F>MP4</F><DURATION><MINUTE>14</MINUTE><SECOND>45</SECOND></DURATION></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Domminney</MIDDLENAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>1</MONTH><DAY>15</DAY></DATE><COMMENT>Rebuilding a voice record from a snapshot of a wave representation.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Top 10 Craziest Assembly Language Instructions</T><A>https://www.youtube.com/watch?v=Wz_xJPN7lAY</A><L>en</L><F>MP4</F><DURATION><MINUTE>15</MINUTE><SECOND>18</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>Some of the most complex x86/64 instructions.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X quality="-1"><T>Discussing node.js - Computerphile</T><A>https://www.youtube.com/watch?v=whwa7ua_RbA</A><L>en</L><F>MP4</F><DURATION><MINUTE>12</MINUTE><SECOND>54</SECOND></DURATION></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Domminney</MIDDLENAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>3</MONTH><DAY>1</DAY></DATE><COMMENT>A short history of V8, Electron, Node, VS Code… with some incorrect statements.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Coding Adventure: Ant and Slime Simulations</T><A>https://www.youtube.com/watch?v=X-iSQQgOd1A</A><L>en</L><F>MP4</F><DURATION><MINUTE>17</MINUTE><SECOND>53</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Sebastian</FIRSTNAME><LASTNAME>Lague</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>3</MONTH><DAY>25</DAY></DATE><COMMENT>The title says all, the results are spectacular.</COMMENT></ARTICLE></ITEM>
    <ITEM><ARTICLE><X><T>Mind the platform execution gap</T><ST>Prerequisite capabilities for successful platform strategies</ST><A>https://martinfowler.com/articles/platform-prerequisites.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Cristóbal</FIRSTNAME><LASTNAME>arcía García</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Ford</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>4</MONTH><DAY>27</DAY></DATE><COMMENT>Some advice for building and exploiting internal developper tools.</COMMENT></ARTICLE></ITEM>
    <ITEM><BLIST><TITLE>Hackable Projects</TITLE>
      <ITEM><ARTICLE><X><T>Hackable Projects - Pillar 1: Code Health</T><A>https://testing.googleblog.com/2016/08/hackable-projects.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Patrik</FIRSTNAME><LASTNAME>Höglund</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>8</MONTH><DAY>18</DAY></DATE><COMMENT>A list of miscellaneous good coding practices.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://testing.googleblog.com/2016/08/hackable-projects.html"><X><T>Hackable Projects - Pillar 2: Debuggability</T><A>https://testing.googleblog.com/2016/10/hackable-projects-pillar-2-debuggability.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Patrik</FIRSTNAME><LASTNAME>Höglund</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>10</MONTH><DAY>11</DAY></DATE><COMMENT>Run test locally, debugging mobile apps, proper logging, monitoring, testing small parts.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://testing.googleblog.com/2016/10/hackable-projects-pillar-2-debuggability.html"><X><T>Hackable Projects - Pillar 3: Infrastructure</T><A>https://testing.googleblog.com/2016/11/hackable-projects-pillar-3.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Patrik</FIRSTNAME><LASTNAME>Höglund</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>11</MONTH><DAY>10</DAY></DATE><COMMENT>About the build and test environment: fast build and tests, presubmit queues, easy reverts, performance tests.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Configuration management</TITLE>
      <ITEM><ARTICLE><X status="dead"><T>The New Breed of Version Control Systems</T><A>http://www.onlamp.com/pub/a/onlamp/2004/01/29/scm_overview.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shlomi</FIRSTNAME><LASTNAME>Fish</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>1</MONTH><DAY>29</DAY></DATE><COMMENT>A short description of the current open source version control systems.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Comments on Open Source Software / Free Software (OSS/FS) Software Configuration Management (SCM) / Revision-Control Systems</T><A>https://dwheeler.com/essays/scm.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Wheeler</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>5</MONTH><DAY>18</DAY></DATE><COMMENT>A good overview of the current source management tools.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: Providing Context with Commit Messages and Bug Reports</T><A>https://testing.googleblog.com/2017/09/code-health-providing-context-with.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Lewis</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>11</DAY></DATE><COMMENT>The title says all: writing informative commit comments and bug reports will help the future developers understand the code changes.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Branch management</TITLE>
        <ITEM><ARTICLE><X><T>Microsoft’s Branching and Merging Guidelines</T><A>https://www.infoq.com/news/2012/04/Branching-Guide/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jonathan</FIRSTNAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>4</MONTH><DAY>23</DAY></DATE><COMMENT>Microsoft released a guide on branch management.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Patterns for Managing Source Code Branches</T><A>https://martinfowler.com/articles/branching-patterns.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>28</DAY></DATE><COMMENT>A description and analysis of the several ways used to manage source code branches.</COMMENT></ARTICLE></ITEM>
        <ITEM><BLIST><TITLE>Gitflow</TITLE>
          <ITEM><ARTICLE><X><T>Gitflow Workflow</T><A>https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</A><L>en</L><F>HTML</F></X><COMMENT>Yet another description of git-flow, this one describes how to use the git-flow toolset.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X quality="1"><T>A successful Git branching model</T><A>https://nvie.com/posts/a-successful-git-branching-model/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Driessen</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>3</MONTH><DAY>5</DAY></DATE><COMMENT>The historical well-known description of git-flow.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>CVS</TITLE>
        <ITEM><ARTICLE><X><T>Open Source Development with CVS</T><A>http://cvsbook.red-bean.com/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Karl</FIRSTNAME><LASTNAME>Fogel</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Moshe</FIRSTNAME><LASTNAME>Bar</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>7</MONTH></DATE><COMMENT>A free book teaching CVS.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Subversion</TITLE>
        <ITEM><ARTICLE><X status="dead"><T>Single-User Subversion</T><A>http://www.onlamp.com/pub/a/onlamp/2002/10/31/subversion.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Rafael</FIRSTNAME><LASTNAME>Garcia-Suarez</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>10</MONTH><DAY>31</DAY></DATE><COMMENT>An introduction to Subversion.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Using and hacking Subclipse - the Subversion plugin for Eclipse</T><A>https://www.oracle.com/technical-resources/articles/enterprise-architecture/subclipse.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eugene</FIRSTNAME><LASTNAME>Kuleshov</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>11</MONTH><DAY>30</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Installation de Subversion sur Windows</T><A>https://ericreboisson.developpez.com/tutoriels/install-subversion/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Reboisson</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>4</MONTH><DAY>1</DAY></DATE><COMMENT>Installing Subversion, the Windows service, and TortoiseSVN.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Git</TITLE>
        <ITEM><ARTICLE><X><T>Git Prune</T><A>https://www.atlassian.com/git/tutorials/git-prune</A><L>en</L><F>HTML</F></X><COMMENT>Some information about (not) using <CODEROUTINE>git prune</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Git Magic</T><A>http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ben</FIRSTNAME><LASTNAME>Lynn</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>8</MONTH></DATE><COMMENT>A Git recipe book.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Git</T><A>https://www.youtube.com/watch?v=8dhZ9BXQgc4</A><L>en</L><F>MP4</F><DURATION><MINUTE>59</MINUTE><SECOND>48</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE></X><AUTHOR><FIRSTNAME>Randal</FIRSTNAME><MIDDLENAME>L.</MIDDLENAME><LASTNAME>Schwartz</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>10</MONTH><DAY>12</DAY></DATE><COMMENT>A presentation of Git, but this goes too fast, Randall tries to say too many things in too little time.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="dead"><T>YUI Theater — Tom Preston-Werner, Chris Wanstrath and Scott Chacon: "Git, GitHub and Social Coding"</T><A>https://yuiblog.com/blog/2009/09/29/video-github/</A><L>en</L><F>Flash Video</F><DURATION><HOUR>1</HOUR><MINUTE>8</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Tom</FIRSTNAME><LASTNAME>Preston-Werner</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Wanstrath</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Scott</FIRSTNAME><LASTNAME>Chacon</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>7</MONTH><DAY>2</DAY></DATE><COMMENT>A presentation of Git and GitHub: how to organise the repositories, some tips and tricks…</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="dead"><T>Git changes the game of distributed Web development</T><ST>Modern version control systems provide powerful support for collaboration</ST><A>https://www.ibm.com/developerworks/linux/library/wa-git/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>William</FIRSTNAME><MIDDLENAME>von</MIDDLENAME><LASTNAME>Hagen</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>8</MONTH><DAY>25</DAY></DATE><COMMENT>A (too) short introduction to Git.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Introducing Git Version Control into Your Team</T><A>https://channel9.msdn.com/Events/Patterns-Practices-Symposium-Online/pattern-practices-symposium-2013/Introducing-Git-Version-Control-into-Your-Team</A><L>en</L><F>Windows Media Player</F><DURATION><MINUTE>53</MINUTE><SECOND>52</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Groves</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>1</MONTH><DAY>17</DAY></DATE><COMMENT>Yet another introduction to Git. This one is rather good. It also gives a few tips for those working with TFS and wanting to use Git.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Git 2.6 Brings Many New Features and Improvements</T><A>https://www.infoq.com/news/2015/10/git-26-released/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sergio</FIRSTNAME><MIDDLENAME>De</MIDDLENAME><LASTNAME>Simone</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>10</MONTH><DAY>8</DAY></DATE><COMMENT>A description of the new release.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>A Better Git Blame</T><A>https://blog.andrewray.me/a-better-git-blame/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Ray</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>2</MONTH><DAY>7</DAY></DATE><COMMENT>Using <CODEROUTINE>git log -p -M --follow --stat -- file</CODEROUTINE> to find who is the author of some code.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Screencast : trouvez un commit avec git-bisect</T><A>https://www.youtube.com/watch?v=842RnLfqb3g</A><L>fr</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>15</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Alexandre</FIRSTNAME><LASTNAME>Dergham</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>4</MONTH><DAY>5</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Git MERGE vs REBASE</T><A>https://www.youtube.com/watch?v=CRlGDDprdOQ</A><L>fr</L><F>MP4</F><DURATION><MINUTE>16</MINUTE><SECOND>11</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Manuel</FIRSTNAME><LASTNAME>Lorenz</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>6</DAY></DATE><COMMENT>A basic description of the difference between <CODEROUTINE>merge</CODEROUTINE> and <CODEROUTINE>rebase</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Git power tools for daily use</T><A>https://nvie.com/posts/git-power-tools/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Driessen</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH><DAY>8</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Vincent</FIRSTNAME><LASTNAME>Driessen</LASTNAME></AUTHOR> presents some of his Git scripts.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>🌳🚀 CS Visualized: Useful Git Commands</T><A>https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Lydia</FIRSTNAME><LASTNAME>Hallie</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>4</MONTH><DAY>1</DAY></DATE><COMMENT>Visualizations of some git basic commands.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Git Worktrees: The Best Git Feature You’ve Never Heard Of</T><A>https://levelup.gitconnected.com/git-worktrees-the-best-git-feature-youve-never-heard-of-9cd21df67baf</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Pulec</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>4</MONTH><DAY>28</DAY></DATE><COMMENT>A short presentation of worktrees and their advantages.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality="-1"><T>GitHub vs Bitbucket vs GitLab : une bataille épique pour l’esprit de développeur</T><A>https://www.hebergeurcloud.com/github-vs-bitbucket-vs-gitlab-une-bataille-epique-pour-lesprit-de-developpeur/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Aina</FIRSTNAME><LASTNAME>Strauss</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>9</MONTH><DAY>23</DAY></DATE><COMMENT>An unclear comparison of the three tools.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality="-1"><T>A look under the hood: how branches work in Git</T><ST>Git branches allow you to keep different versions of your code cleanly separated. Here's a look at how they work and why you should know about them.</ST><A>https://stackoverflow.blog/2021/04/05/a-look-under-the-hood-how-branches-work-in-git/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tobias</FIRSTNAME><LASTNAME>Günther</LASTNAME></AUTHOR><DATE><YEAR>2021</YEAR><MONTH>4</MONTH><DAY>5</DAY></DATE><COMMENT>This article is strange: on one side, it describes the basics of why branches are useful; on the other side, it gives some technical details of how Git implements branches; but it does not explain the Git commands used to manage branches.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>GitLab</TITLE>
        <ITEM><ARTICLE><X><T>GitLab, l'élève qui veut dépasser le maître GitHub</T><A>https://www.journaldunet.com/solutions/dsi/1420355-gitlab-l-alternative-a-github-qui-veut-aller-bien-au-dela/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Antoine</FIRSTNAME><LASTNAME>Crochet-Damais</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>15</DAY></DATE><COMMENT>Some information about the current state and offer of the company.</COMMENT></ARTICLE></ITEM>
        <ITEM><BLIST><TITLE><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Pestel</LASTNAME></AUTHOR>'s presentation</TITLE>
        <ITEM><ARTICLE><X><T>GITLAB - 1. PRÉSENTATION ET PRINCIPES</T><A>https://www.youtube.com/watch?v=aQl-IKLm_9A</A><L>fr</L><F>MP4</F><DURATION><MINUTE>10</MINUTE><SECOND>8</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Pestel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>3</DAY></DATE><COMMENT>An overview of GitLab.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>GITLAB - 2. DÉPÔT GIT</T><A>https://www.youtube.com/watch?v=ySLhc3qdGEk</A><L>fr</L><F>MP4</F><DURATION><MINUTE>23</MINUTE><SECOND>6</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Pestel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>The Git repository.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Gitlab - 3. La registry docker | tutos fr</T><A>https://www.youtube.com/watch?v=2Z1QUPQ_O9M</A><L>fr</L><F>MP4</F><DURATION><MINUTE>10</MINUTE><SECOND>36</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Pestel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>3</MONTH><DAY>5</DAY></DATE><COMMENT>The Docker registry.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Gitlab - 4. Les tickets / Issues : principes, organisation... | tutos fr</T><A>https://www.youtube.com/watch?v=Pa6zUk89kXg</A><L>fr</L><F>MP4</F><DURATION><MINUTE>18</MINUTE><SECOND>28</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Pestel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>3</MONTH><DAY>21</DAY></DATE><COMMENT>Ticket, lists, boards, labels, service desk, and milestones</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Gitlab - 5. Les Merge Request | tutos fr</T><A>https://www.youtube.com/watch?v=Gf7pKDE_1K4</A><L>fr</L><F>MP4</F><DURATION><MINUTE>9</MINUTE><SECOND>32</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Pestel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>3</MONTH><DAY>28</DAY></DATE><COMMENT>A (not enough detailed) short description of Merge Requests.</COMMENT></ARTICLE></ITEM>
          <ITEM><ARTICLE><X><T>Gitlab - 6. Installation via docker-compose</T><A>https://www.youtube.com/watch?v=qingBkfTGNA</A><L>fr</L><F>MP4</F><DURATION><MINUTE>16</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Xavier</FIRSTNAME><LASTNAME>Pestel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>26</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        </BLIST></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Mercurial</TITLE>
        <ITEM><ARTICLE><X><T>Google I/O 2009 - Mercurial on BigTable</T><A>https://www.youtube.com/watch?v=ri796Hx8las</A><L>en</L><F>MP4</F><DURATION><MINUTE>47</MINUTE><SECOND>18</SECOND></DURATION><DATE><YEAR>2009</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE></X><AUTHOR><FIRSTNAME>Jacob</FIRSTNAME><LASTNAME>Lee</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>5</MONTH><DAY>28</DAY></DATE><COMMENT>A description on the Mercurial implementation done on top of Google's Bigtable.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Team Foundation Server</TITLE>
        <ITEM><ARTICLE><X quality="1"><T>diff/merge configuration in Team Foundation - common Command and Argument values</T><A>https://docs.microsoft.com/en-us/archive/blogs/jmanning/diffmerge-configuration-in-team-foundation-common-command-and-argument-values</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>James</FIRSTNAME><LASTNAME>Manning</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>2</MONTH><DAY>20</DAY></DATE><COMMENT>How to configure diff and merge tools in Visual Studio for Team Foundation Server.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="dead"><T>Cloaking in TFS</T><A>https://blogs.msdn.microsoft.com/b/fai/archive/2008/10/02/cloaking-in-tfs.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><GIVENNAME>Faister</GIVENNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>2</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Introducing Microsoft Visual Studio Team Foundation Server 2010, Part I</T><A>https://www.codeguru.com/cpp/article.php/c18481</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jani</FIRSTNAME><LASTNAME>Jarvinen</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>7</DAY></DATE><COMMENT>An overview of TFS.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Benefiting from Team Foundation Server Work Items</T><A>https://www.codeguru.com/csharp/.net/article.php/c18505</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jani</FIRSTNAME><LASTNAME>Jarvinen</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>14</DAY></DATE><COMMENT>What are Work Items and how to use them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Unit and Load Testing With Team Foundation Server 2010</T><A>https://www.codeguru.com/csharp/.net/article.php/c18555</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jani</FIRSTNAME><LASTNAME>Jarvinen</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>2</MONTH><DAY>28</DAY></DATE><COMMENT>Running unit tests, Web tests, and load tests in TFS.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>TFS 2010 Scrum - Relation between PBIs, Tasks, Bugs and Impediments</T><A>https://www.c-sharpcorner.com/uploadfile/sanks/tfs-2010-scrum-relation-between-pbis-tasks-bugs-and-impediments/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Sanket</FIRSTNAME><LASTNAME>Terdal</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>5</MONTH><DAY>4</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Microsoft announces cloud building with TFS, Feature Packs for Visual Studio</T><ST>Microsoft has announced a new cloud-building service for its Team Foundation …</ST><A>https://arstechnica.com/information-technology/2012/03/microsoft-announces-cloud-building-with-tfs-feature-packs-for-visual-studio/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Bright</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>3</MONTH><DAY>28</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Branching and Merging Visualization with VS2012 &amp; TFS2012</T><A>https://www.youtube.com/watch?v=_2PljrAQpao</A><L>en</L><F>MP4</F><DURATION><MINUTE>13</MINUTE><SECOND>30</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mohammed</FIRSTNAME><LASTNAME>Omar</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>9</MONTH><DAY>11</DAY></DATE><COMMENT>How to merge a changeset from one branch to another one.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Exploratory Testing in TFS 2012</T><ST>Learn how Visual Studio 2012 makes exploratory testing quick and easy.</ST><A>https://visualstudiomagazine.com/articles/2012/11/27/exploratory-testing-in-tfs-2012.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mickey</FIRSTNAME><LASTNAME>Gousset</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>11</MONTH><DAY>27</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Teams without areas using a team field in TFS</T><A>https://nkdagility.com/team-foundation-server-2012-teams-without-areas/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Hinshelwood</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>12</MONTH><DAY>18</DAY></DATE><COMMENT>The title says all.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Work Item Tagging In TFS</T><ST>Work item tagging allows you to add searchable "keywords" to individual work items in TFS.</ST><A>https://visualstudiomagazine.com/articles/2013/03/01/work-item-tagging.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mickey</FIRSTNAME><LASTNAME>Gousset</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>1</DAY></DATE><COMMENT>Visual Studio 2012 Update 2's CTP allows to add tags to Work Items and to filter on them.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Kanban and Team Foundation Server 2012</T><A>https://visualstudiomagazine.com/articles/2013/06/01/kanban-and-team-foundation-server-2012.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mickey</FIRSTNAME><LASTNAME>Gousset</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>A very short presentation on using TFS for Kanban.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Build</TITLE>
      <ITEM><ARTICLE><X><T>15 Best Jenkins Alternatives &amp; Competitors (Open Source/Paid)</T><A>https://www.guru99.com/jenkins-alternative.html</A><L>en</L><F>HTML</F></X><COMMENT>A long list of CI/CD platforms, but the descriptions are poorly written.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Building the PostgreSQL BuildFarm</T><A>http://www.onlamp.com/pub/a/onlamp/2005/02/24/pg_buildfarm.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Dunstan</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>2</MONTH><DAY>24</DAY></DATE><COMMENT>A description of the Internet-distributed PostgreSQL build farm. The article probably dives too much in some details, but it nevertheless gives a good idea of the whole mechanism.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality="-1"><T>A (Long Overdue) BuildMaster Introduction</T><A>https://thedailywtf.com/Articles/A-%28Long-Overdue%29-BuildMaster-Introduction.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Alex</FIRSTNAME><LASTNAME>Papadimoulis</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>4</MONTH><DAY>2</DAY></DATE><COMMENT>A presentation of BuildMaster, the author describes the Software Delivery Process model, but there is no real description of the software features.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Mask of the Red Build</T><A>https://www.typemock.com/mask-of-the-red-build</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gil</FIRSTNAME><LASTNAME>Zilberfeld</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>12</MONTH><DAY>26</DAY></DATE><COMMENT>The reasons why builds must always be green.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Gulp, Grunt, Whatever</T><A>https://ponyfoo.com/articles/gulp-grunt-whatever</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Nicolás</FIRSTNAME><LASTNAME>Bevacqua</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>An introduction to Gulp and a comparison with Grunt.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Comparison of Most Popular Continuous Integration Tools: Jenkins, TeamCity, Bamboo, Travis CI and more</T><A>https://www.altexsoft.com/blog/engineering/comparison-of-most-popular-continuous-integration-tools-jenkins-teamcity-bamboo-travis-ci-and-more/</A><L>en</L><F>HTML</F></X><DATE><YEAR>2019</YEAR><MONTH>2</MONTH><DAY>19</DAY></DATE><COMMENT>A short comparison of Jenkins, TeamCity, Bamboo, Travis CI, CircleCI, and CodeShip.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Ant</TITLE>
        <ITEM><ARTICLE><X quality="-1" status="dead"><T>Improve Your Build Process with Ant</T><A>http://www.onlamp.com/pub/a/php/2005/12/20/php_ant.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Kimsal</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>12</MONTH><DAY>21</DAY></DATE><COMMENT>An introduction to Ant, but I think that this article is not very clear.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>gulp</TITLE>
        <ITEM><ARTICLE><X><T>Gulp js Tutorial For Beginners</T><A>https://appdividend.com/2018/03/09/gulp-js-tutorial-beginners/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Krunal</FIRSTNAME><LASTNAME>Lathiya</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>3</MONTH><DAY>9</DAY></DATE><COMMENT>An introduction to gulp with simple examples: less, sass, minification and watching file updates.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Google</TITLE>
        <ITEM><ARTICLE><X><T>Tools for Continuous Integration at Google Scale</T><A>https://www.youtube.com/watch?v=b52aXZ2yi08</A><L>en</L><F>MP4</F><DURATION><MINUTE>29</MINUTE><SECOND>55</SECOND></DURATION><DATE><YEAR>2011</YEAR><MONTH>1</MONTH><DAY>26</DAY></DATE></X><AUTHOR><FIRSTNAME>Nathan</FIRSTNAME><LASTNAME>York</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>27</DAY></DATE><COMMENT>A presentation of Google's CI infrastructure.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Building Software at Google Scale Tech Talk</T><A>https://www.youtube.com/watch?v=2qv3fcXW1mg</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>10</MINUTE><SECOND>2</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>3</MONTH><DAY>30</DAY></DATE></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Barnathan</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Greg</FIRSTNAME><LASTNAME>Estren</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Pepper</FIRSTNAME><LASTNAME>Lebeck-Jobe</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>3</MONTH><DAY>21</DAY></DATE><COMMENT>A more detailed and updated description of Google build environment.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Tools for Continuous Integration at Google Scale</T><A>https://www.youtube.com/watch?v=KH2_sB1A6lA</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>4</MINUTE><SECOND>1</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>8</MONTH><DAY>27</DAY></DATE></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Micco</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>A description of Google's infrastructure which uses dependency analysis to run only the impacted tests. But the whole required computation increases in a non-sustainable way…</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Building Software at Google Scale: Bazel</T><A>https://www.youtube.com/watch?v=6GCDfoAOKIY</A><L>en</L><F>MP4</F><DURATION><MINUTE>34</MINUTE><SECOND>29</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ulf</FIRSTNAME><LASTNAME>Adams</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Helen</FIRSTNAME><LASTNAME>Altsuhler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Stanke</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>12</MONTH><DAY>13</DAY></DATE><COMMENT>A marketing presentation of Bazel, Google's build system.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Performance</TITLE>
      <ITEM><ARTICLE><X><T>Optimizing Applications with gcc &amp; glibc</T><A>https://www.akkadia.org/drepper/optimtut1.ps.gz</A><L>en</L><F>PostScript</F></X><X><T>Optimizing Applications with gcc &amp; glibc</T><A>../attic/optimtut1.ps.gz</A><L>en</L><F>PostScript</F></X><AUTHOR><FIRSTNAME>Ulrich</FIRSTNAME><LASTNAME>Drepper</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>8</MONTH><DAY>9</DAY></DATE><COMMENT>This article gives some general advice (use <CODEROUTINE>uint_least16_t</CODEROUTINE>/<CODEROUTINE>int_fast16_t</CODEROUTINE>/…, avoid <CODEROUTINE>strcat</CODEROUTINE>, use <CODEROUTINE>alloca</CODEROUTINE>…) and explains some useful gcc (computed <CODEROUTINE>goto</CODEROUTINE>s, <CODEROUTINE>__stdcall__</CODEROUTINE>, <CODEROUTINE>_builtin_constant_p</CODEROUTINE>…) and glibc (<CODEROUTINE>mempcpy</CODEROUTINE>, <CODEROUTINE>rawmemchr</CODEROUTINE>…) features.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://www.akkadia.org/drepper/optimtut1.ps.gz"><X><T>Application Optimization on Linux Tutorial Material</T><A>https://www.akkadia.org/drepper/optimtut2.ps.gz</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ulrich</FIRSTNAME><LASTNAME>Drepper</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>12</MONTH><DAY>14</DAY></DATE><COMMENT>After a presentation of gprof, sprof, gcov and memprof, the author proposes an exercise to optimize a sample program. A paragraph contains some material of the previous article.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality="2"><T>We have it easy, but do we have it right?</T><A>https://www.youtube.com/watch?v=DKVRkfXrBpg</A><L>en</L><F>MP4</F><DURATION><MINUTE>57</MINUTE><SECOND>19</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Amer</FIRSTNAME><LASTNAME>Diwan</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>7</DAY></DATE><COMMENT>A very good proof that performance evaluation is very difficult: very minor changes in the environment or in the executable have a large impact on the measured performance.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Parallel Revolution Has Started: Are You Part of the Solution or Part of the Problem?</T><A>https://www.youtube.com/watch?v=A2H_SrpAPZU</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>5</MINUTE><SECOND>41</SECOND></DURATION><DATE><YEAR>2009</YEAR><MONTH>1</MONTH><DAY>13</DAY></DATE></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Patterson</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>12</MONTH><DAY>18</DAY></DATE><COMMENT>Random thoughts on parallelism: why CPUs are now multi-core? why software will have to effectively exploit paralelism? possible killer apps requiring yet further CPU performance improvements, autotunners, a simple performance model…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Using inline assembly with IBM XL C/C++ compiler for Linux on z Systems, Part 2</T><ST>An analysis based on the computation of Fibonacci sequence</ST><A>https://www.ibm.com/developerworks/library/l-performance-of-inline-assembly-trs/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Anh</FIRSTNAME><MIDDLENAME>Tuyen</MIDDLENAME><LASTNAME>Tran</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A performance analysis of several Fibonacci implementations.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Assertions</TITLE>
      <ITEM><ARTICLE><X><T>Diagnosing Java code: Assertions and temporal logic in Java programming</T><ST>Introduce temporal logic to assertions to supplement testing</ST><A>http://www.50001.com/language/javaside/lec/java_ibm/%C0%DA%B9%D9%20%C7%C1%B7%CE%B1%D7%B7%A1%B9%D6%BF%A1%BC%AD%C0%C7%20Assertion%B0%FA%20temporal%20logic%20%28%BF%B5%B9%AE%29.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>7</MONTH></DATE><COMMENT>The author introduces the idea of temporal logic: assertions taking into account the execution sequence into account ("always", "sometime", "until" and "next").</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Diagnosing Java code: Using temporal logic with bug patterns</T><ST>Preventing common bugs with temporal logic assertions</ST><A>http://www.50001.com/language/javaside/lec/java_ibm/%B9%F6%B1%D7%20%C6%D0%C5%CF%BF%A1%20Temporal%20logic%20%BB%E7%BF%EB%C7%CF%B1%E2%20%28%BF%B5%B9%AE%29.htm</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><MIDDLENAME>E.</MIDDLENAME><LASTNAME>Allen</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>8</MONTH></DATE><COMMENT>Some samples of how to use temporal logic, but most of them could be verified with standard assertions (i.e. "always" is the same as defining an invariant). It would be more convincing to choose more tricky bugs, but maybe the article would have been too complex…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Improve Test Asserts with Shouldly</T><ST>Augment your testing framework with Shouldly for improved test code readability and better test failure messages.</ST><A>https://visualstudiomagazine.com/articles/2015/08/01/improve-test-asserts-with-shouldly.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Roberts</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>8</MONTH><DAY>19</DAY></DATE><COMMENT>Yet another C# assertion library.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Design by contract</TITLE>
      <ITEM><ARTICLE><X><T>Building bug-free O-O software: An introduction to Design by Contract</T><A>https://www.eiffel.com/values/design-by-contract/introduction/</A><L>en</L><F>HTML</F></X><COMMENT>A presentation of design by contract.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Contracts: From Analysis to C++ Implementation</T><A>https://www.researchgate.net/publication/3814829_Contracts_from_analysis_to_C_implementation/</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>R.</FIRSTNAME><LASTNAME>Plösch</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>J.</FIRSTNAME><LASTNAME>Pichler</LASTNAME></AUTHOR><DATE><YEAR>1999</YEAR><MONTH>8</MONTH></DATE><COMMENT>The authors describe how they automatically transfer the assertions from a Python prototype to the C++ implementation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Using Design by Contract in C</T><A>http://www.onlamp.com/pub/a/onlamp/2004/10/28/design_by_contract_in_c.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Charlie</FIRSTNAME><LASTNAME>Mills</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>An introduction to DBC for C.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Code review</TITLE>
      <ITEM><ARTICLE><X><T>Is Software Inspection Value Added?</T><A>https://www.isixsigma.com/methodology/voc-customer-focus/software-inspection-value-added/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Gary</FIRSTNAME><MIDDLENAME>A.</MIDDLENAME><LASTNAME>Gack</LASTNAME></AUTHOR><COMMENT>A numerical analysis of the ROI of code reviews.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Single Committer Software Development - Introducing single committer and peer code review into your development process</T><A>http://www.macadamian.com/column/singleCommitter.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Francis</FIRSTNAME><LASTNAME>Beaudet</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>7</MONTH><DAY>25</DAY></DATE><COMMENT>This article is more about the code review process in some Open Source projects (they give the example of the participation to Wine) than about the fact that the code integration is centralized by a single person.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Part of Your Complete Breakfast - Code Review is a Source of Essential Vitamins and Minerals</T><A>http://www.macadamian.com/column/completeBreakfast.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Stephane</FIRSTNAME><LASTNAME>Lussier</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR><MONTH>11</MONTH><DAY>20</DAY></DATE><COMMENT>Nothing new here, but this is still a good argumentation for performing code reviews. A checklist is also provided.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Are you using a toolset in your code review?</T><A>https://www.ibm.com/developerworks/opensource/library/os-toolset/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Shuji</FIRSTNAME><LASTNAME>Morisaki</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>Some good advice, but it would be better if it would detail further how to actually perform the code review.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Agile Techniques: When and How to Conduct a Code Review</T><ST>Code review is a tool to help teams increase their software engineering maturity, and in the end this means delivering higher value to customers</ST><A>http://www.devx.com/architect/Article/45741</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Landes</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>20</DAY></DATE><COMMENT>A description of a code review process, but I do not understand how the code review can last only 55 minutes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>11 Best Practices for Peer Code Review - IBM Innovate Conference 2011</T><A>https://www.youtube.com/watch?v=hgNAwAdhwoQ</A><L>en</L><F>MP4</F><DURATION><MINUTE>55</MINUTE><SECOND>42</SECOND></DURATION><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>16</DAY></DATE></X><AUTHOR><FIRSTNAME>Jason</FIRSTNAME><LASTNAME>Cohen</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH></DATE><COMMENT>Some generalities about Code Reviews (with no link with the presentation title…) and a demo of Smart Bear's CodeCollaborator.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Your code sucks, and I hate you</T><ST>The Social Dynamics of Code Reviews</ST><A>https://jml.io/pages/your-code-sucks-and-i-hate-you.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jonatha</FIRSTNAME><LASTNAME>Lange</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>9</MONTH><DAY>15</DAY></DATE><COMMENT>Some evangelism for doing code reviews and some advice on how to perform them.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality="-1"><T>Six Ways to Make Your Peer Code Reviews More Effective</T><A>http://radar.oreilly.com/2013/07/six-ways-to-make-your-peer-code-reviews-more-effective.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Emma</FIRSTNAME><MIDDLENAME>Jane</MIDDLENAME><LASTNAME>Westby</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>11</DAY></DATE><COMMENT>Some short tips for code reviews.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: Too Many Comments on Your Code Reviews?</T><A>https://testing.googleblog.com/2017/06/code-health-too-many-comments-on-your.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tom</FIRSTNAME><LASTNAME>O'Neill</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>19</DAY></DATE><COMMENT>A short list of good pieces of advice.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: Understanding Code In Review</T><A>https://testing.googleblog.com/2018/05/code-health-understanding-code-in-review.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Max</FIRSTNAME><LASTNAME>Kanat-Alexander</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>5</MONTH><DAY>1</DAY></DATE><COMMENT>Don't waste time reviewing code that is hard to understand, just ask for it to be clarified.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: Respectful Reviews == Useful Reviews</T><A>https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Liz</FIRSTNAME><LASTNAME>Kammer</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Maggie</FIRSTNAME><LASTNAME>Hodges</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Ambar</FIRSTNAME><LASTNAME>Murillo</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>6</DAY></DATE><COMMENT>A short list of tips for code reviews.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Five Code Review Antipatterns</T><ST>Everyone cares about best practices, but worst practices can sometimes be more illuminating.</ST><A>https://blogs.oracle.com/javamagazine/five-code-review-antipatterns</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>5</MONTH><DAY>4</DAY></DATE><COMMENT>Some sound advice for the code review process.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Pair programming</TITLE>
      <ITEM><ARTICLE><X><T>On Pair Programming</T><A>https://martinfowler.com/articles/on-pair-programming.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Birgitta</FIRSTNAME><LASTNAME>Böckeler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Nina</FIRSTNAME><LASTNAME>Siessegger</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>1</MONTH><DAY>15</DAY></DATE><COMMENT>A long list of thoughts and pieces of advice about pair programming.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Mob programming</TITLE>
      <ITEM><ARTICLE><X><T>Mob Programming – A Whole Team Approach by Woody Zuill</T><A>https://www.agilealliance.org/resources/experience-reports/mob-programming-agile2014/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Woody</FIRSTNAME><LASTNAME>Zuill</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>7</MONTH></DATE><COMMENT>A positive testimony on mob programming.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Mob Programming : je ne développerai plus jamais seul (A. Victoor &amp; J. Rouve)</T><A>https://www.youtube.com/watch?v=yhBne591Zbk</A><L>fr</L><F>MP4</F><DURATION><MINUTE>39</MINUTE><SECOND>59</SECOND></DURATION><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>7</DAY></DATE></X><AUTHOR><FIRSTNAME>Johan</FIRSTNAME><LASTNAME>Rouve</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Alexandre</FIRSTNAME><LASTNAME>Victoor</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>18</DAY></DATE><COMMENT>Some positive feedback on mob programming.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Mob programming : un confort de l'ancien monde ?</T><A>https://fr.bonitasoft.com/mob-programming-un-confort-de-lancien-monde/</A><L>fr</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Julien</FIRSTNAME><LASTNAME>Mege</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>4</MONTH><DAY>30</DAY></DATE><COMMENT>The same. Given the spelling mistakes, I presume this blog was not written by a mob.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Compilers</TITLE>
      <ITEM><ARTICLE><X status="dead"><T>Get to know GCC 4</T><ST>What's new in the GNU Compiler Collection release series</ST><A>https://www.ibm.com/developerworks/linux/library/l-gcc4</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>M.</FIRSTNAME><MIDDLENAME>Tim</MIDDLENAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>28</DAY></DATE><COMMENT>A short description of the GCC4 releases.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>GCC hacks in the Linux kernel</T><ST>Discover GCC extensions for the C language</ST><A>https://developer.ibm.com/technologies/linux/tutorials/l-gcc-hacks/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>M.</FIRSTNAME><MIDDLENAME>Tim</MIDDLENAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>18</DAY></DATE><COMMENT>The presentation of some gcc extensions used by the Linux kernel.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Stochastic Optimization for x86 Binaries</T><A>https://www.youtube.com/watch?v=aD9mZDJzb58</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>3</MINUTE><SECOND>54</SECOND></DURATION><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>13</DAY></DATE></X><AUTHOR><FIRSTNAME>Eric</FIRSTNAME><LASTNAME>Schkufza</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>1</MONTH><DAY>12</DAY></DATE><COMMENT>Using stochastic search to optimize object code.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Debuggers</TITLE>
      <ITEM><ARTICLE><X status="dead"><T>Debugging tools and techniques for Linux on Power</T><A>https://www.ibm.com/developerworks/systems/library/es-debug/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Calvin</FIRSTNAME><LASTNAME>Sze</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>8</MONTH><DAY>4</DAY></DATE><COMMENT>Some very basic introduction of Valgrind, gdb, jdb and strace. This can interest only persons who are discovering debugging tools on Linux.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality="1"><T>Virtual Machine-Based Replay Debugging</T><A>https://www.youtube.com/watch?v=RvMlihjqlhY</A><L>en</L><F>MP4</F><DURATION><MINUTE>57</MINUTE><SECOND>6</SECOND></DURATION><DATE><YEAR>2008</YEAR><MONTH>11</MONTH><DAY>1</DAY></DATE></X><AUTHOR><FIRSTNAME>E</FIRSTNAME><MIDDLENAME>Christopher</MIDDLENAME><LASTNAME>Lewis</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>30</DAY></DATE><COMMENT>VMware allows to record a run demonstrating a bug and to replay it exactly the same way in Visual Studio. This is a neat use of virtualisation.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Silver Bullet -- Time Travelling Debugger</T><A>https://www.youtube.com/watch?v=LpfmKIxusZY</A><L>en</L><F>MP4</F><DURATION><MINUTE>42</MINUTE><SECOND>17</SECOND></DURATION><DATE><YEAR>2009</YEAR><MONTH>7</MONTH><DAY>27</DAY></DATE></X><AUTHOR><FIRSTNAME>Prashant</FIRSTNAME><LASTNAME>Deva</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>7</MONTH><DAY>24</DAY></DATE><COMMENT>Another debugger implementation enabling the record and analysis of a bug scenario. But this tool is limited to Java.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Dynamic analyzers</TITLE>
      <ITEM><ARTICLE><X><T>Developing Software in a Hostile Environment</T><A>http://www.openbsd.org/papers/dev-sw-hostile-env.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Ted</FIRSTNAME><LASTNAME>Unangst</LASTNAME></AUTHOR><COMMENT>Some tricks with the memory allocator to force some dormant <CODEROUTINE>malloc</CODEROUTINE>/<CODEROUTINE>free</CODEROUTINE> bugs to become apparent.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Postmortem memory profiling with PERL</T><ST>Find and fix memory leaks in wireless applications</ST><A>https://www.ibm.com/developerworks/library/wi-perl.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martyn</FIRSTNAME><LASTNAME>Honeyford</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>12</MONTH><DAY>4</DAY></DATE><COMMENT>A simplistic solution for finding memory leaks, it is unwieldy and supposes that you liberate all your memory blocks when exiting. But this article can be a starting point if you want to think how a real memory checker could be implemented (yes, you will have to do some highly OS dependent stuff…).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Visualize function calls with Graphviz</T><ST>Open source software clarifies complex call structure</ST><A>https://www.ibm.com/developerworks/linux/library/l-graphvis</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>M.</FIRSTNAME><MIDDLENAME>Tim</MIDDLENAME><LASTNAME>Jones</LASTNAME></AUTHOR><DATE><YEAR>2005</YEAR><MONTH>6</MONTH><DAY>21</DAY></DATE><COMMENT>Some low level gcc hacking to create a graph call.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Generating Low-Overhead Dynamic Binary Translators</T><A>https://www.youtube.com/watch?v=VIxaQeAHIxs</A><L>en</L><F>MP4</F><DURATION><MINUTE>38</MINUTE><SECOND>31</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Mathias</FIRSTNAME><LASTNAME>Payer</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>6</MONTH><DAY>9</DAY></DATE><COMMENT>A description of fastBT, a table-based binary translator that can be used to instrument dynamically the code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Testing Chromium: AddressSanitizer, a fast memory error detector.</T><A>https://blog.chromium.org/2011/06/testing-chromium-addresssanitizer-fast.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kostya</FIRSTNAME><LASTNAME>Serebryany</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>6</MONTH><DAY>15</DAY></DATE><COMMENT>Yet another memory access checker.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Purify</TITLE>
        <ITEM><ARTICLE><X status="dead"><T>How to improve Purify's run-time performance</T><A>http://www.rational.com/technotes/devtools_html/Purify_html/technote_5828.html</A><L>en</L><F>HTML</F></X><COMMENT>Some tips and tricks to make faster Purify runs.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="dead"><T>How does Purify find errors on the stack?</T><A>http://www.rational.com/technotes/devtools_html/Purify_html/technote_5806.html</A><L>en</L><F>HTML</F></X><COMMENT>A short description of the Purify stack check limitations.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="dead"><T>Instrumenting X libraries under Solaris 2.6 and later</T><A>http://www.rational.com/technotes/devtools_html/Purify_html/technote_14961.html</A><L>en</L><F>HTML</F></X><DATE><YEAR>2001</YEAR><MONTH>3</MONTH><DAY>8</DAY></DATE><COMMENT>For those who are unable to link (under Purify) with the X libraries because they have forgotten <CODEROUTINE>/usr/openwin/lib</CODEROUTINE> in their <CODEROUTINE>LD_LIBRARY_PATH</CODEROUTINE>.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Static analyzers</TITLE>
      <ITEM><ARTICLE><X><T>C++ Code Analysis: an Open Architecture for the Verification of Coding Rules</T><A>https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.517.4317&amp;rep=rep1&amp;type=pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Alessandra</FIRSTNAME><LASTNAME>Potrich</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Paolo</FIRSTNAME><LASTNAME>Tonella</LASTNAME></AUTHOR><COMMENT>An overview of a coding rules checker implemented with javacc.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X quality="-1"><T>C# Coding Standards and Practices</T><A>https://www.codeguru.com/csharp/article.php/c18677</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Strawmyer</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>4</MONTH><DAY>1</DAY></DATE><COMMENT>The author states the obvious: define coding rules applicable to your domain and verify them with a static analyzer.</COMMENT></ARTICLE></ITEM>
      <ITEM><BLIST><TITLE>Microsoft</TITLE>
        <ITEM><ARTICLE><X status="dead"><T>User Interface Challenges in Static Defect Detection</T><A>http://research.microsoft.com/users/jpincus/uwmsrsi01.ppt</A><L>en</L><F>PowerPoint</F></X><AUTHOR><FIRSTNAME>Jonathan</FIRSTNAME><LASTNAME>Pincus</LASTNAME></AUTHOR><DATE><YEAR>2001</YEAR></DATE><COMMENT>Some interesting comments on the way developers interact with static analysis tools.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X status="dead"><T>Steering the Pyramids - Tools, Technology, and Process in Engineering at Microsoft</T><A>http://research.microsoft.com/users/jpincus/icsm.ppt</A><L>en</L><F>PowerPoint</F></X><AUTHOR><FIRSTNAME>Jonathan</FIRSTNAME><LASTNAME>Pincus</LASTNAME></AUTHOR><DATE><YEAR>2002</YEAR></DATE><COMMENT>An overview of the tools used by Microsoft to improve the quality of their products, this is interesting to see what are their evolution and challenges.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>PMD</TITLE>
        <ITEM><ARTICLE><X status="dead"><T>Static Analysis with PMD</T><A>http://www.onjava.com/pub/a/onjava/2003/02/12/static_analysis.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Tom</FIRSTNAME><LASTNAME>Copeland</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>2</MONTH><DAY>12</DAY></DATE><COMMENT>A presentation of PMD and how to define rules in it.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>FindBugs</TITLE>
        <ITEM><ARTICLE><X status="dead"><T>FindBugs, Part 1: Improve the quality of your code</T><A>https://www.ibm.com/developerworks/java/library/j-findbug1</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Grindstaff</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>5</MONTH><DAY>25</DAY></DATE><COMMENT>Some examples of bugs reported by FindBugs and how to integrate it in the Ant build.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-findbug1"><X status="dead"><T>FindBugs, Part 2: Writing custom detectors</T><ST>How to write custom detectors to find application-specific problems</ST><A>https://www.ibm.com/developerworks/java/library/j-findbug2</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Grindstaff</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>5</MONTH><DAY>25</DAY></DATE><COMMENT>An example showing how to define his/her own rules.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://www.ibm.com/developerworks/java/library/j-findbug2"><X status="dead"><T>Java theory and practice: Kill bugs dead</T><ST>Inspection tools like FindBugs provide a second layer of defense against common coding errors</ST><A>https://www.ibm.com/developerworks/library/j-jtp06294/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Goetz</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>6</MONTH><DAY>29</DAY></DATE><COMMENT>The author describes how FindBugs can flag some bugs he described in previous articles.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X quality="1"><T>Using Static Analysis For Software Defect Detection</T><A>https://www.youtube.com/watch?v=UmtAGENejEo</A><L>en</L><F>MP4</F><DURATION><HOUR>1</HOUR><MINUTE>2</MINUTE><SECOND>30</SECOND></DURATION><DATE><YEAR>2007</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE></X><AUTHOR><FIRSTNAME>William</FIRSTNAME><LASTNAME>Pugh</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>7</MONTH><DAY>6</DAY></DATE><COMMENT>A good overview of FindBugs: some examples of detected bug patterns, the results of running FindBugs on some well-known products, new features (using annotations, bug history), possible future improvements… Williams also speaks about its new project: Marmoset.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Coverity</TITLE>
        <ITEM><ARTICLE><X><T>Checking System Rules Using System-Specific, Programmer-Written Compiler Extensions</T><A>https://web.stanford.edu/~engler/mc-osdi.pdf</A><L>en</L><F>PDF</F></X><X><T>Checking System Rules Using System-Specific, Programmer-Written Compiler Extensions</T><A>https://web.stanford.edu/~engler/mc-osdi.ps</A><L>en</L><F>PostScript</F></X><AUTHOR><FIRSTNAME>Dawson</FIRSTNAME><LASTNAME>Engler</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Benjamin</FIRSTNAME><LASTNAME>Chelf</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Andy</FIRSTNAME><LASTNAME>Chou</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Seth</FIRSTNAME><LASTNAME>Hallem</LASTNAME></AUTHOR><DATE><YEAR>2000</YEAR></DATE><COMMENT>The authors describe how they created a tool with a simple language to catch some types of error in Linux, OpenBSD…</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE><X><T>Homeland Security helps secure open-source code</T><A>https://www.cnet.com/news/homeland-security-helps-secure-open-source-code/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Joris</FIRSTNAME><LASTNAME>Evers</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>1</MONTH><DAY>10</DAY></DATE><COMMENT>Coverity gets some money from DHS.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>PC-lint/FlexeLint/ProLint</TITLE>
        <ITEM><ARTICLE><X><T>A Bug a Month? It's Harder Than You Think</T><ST>Writing a bug a month is child's play when you don't intend to. But when you try to do it....</ST><A>https://www.drdobbs.com/a-bug-a-month-its-harder-than-you-think/199900339</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Jonathan</FIRSTNAME><LASTNAME>Erickson</LASTNAME></AUTHOR><DATE><YEAR>2007</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>An interview of <AUTHOR><FIRSTNAME>Jim</FIRSTNAME><LASTNAME>Gimpel</LASTNAME></AUTHOR> about his "Bug of the Month" ads.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Julia</TITLE>
        <ITEM><ARTICLE><X><T>Nullness Analysis for Java</T><A>https://www.youtube.com/watch?v=3d0YlZbY92U</A><L>en</L><F>MP4</F><DURATION><MINUTE>53</MINUTE><SECOND>29</SECOND></DURATION><DATE><YEAR>2008</YEAR><MONTH>10</MONTH><DAY>6</DAY></DATE></X><AUTHOR><FIRSTNAME>Fausto</FIRSTNAME><LASTNAME>Spoto</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>9</MONTH><DAY>17</DAY></DATE><COMMENT>A presentation of Julia and a comparison with Eclipse and NIT for nullness analysis.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>SonarQube</TITLE>
        <ITEM><ARTICLE><X><T>Kill the Noise! to Change Gear in our Code Analyzers</T><A>https://blog.sonarsource.com/kill-the-noise-to-change-gear-in-our-code-analyzers/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Freddy</FIRSTNAME><LASTNAME>Mallet</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>1</DAY></DATE><COMMENT>The Sonar team is reclassifying the rules as bugs vs. warnings.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
      <ITEM><BLIST><TITLE>Infer</TITLE>
        <ITEM><ARTICLE><X><T>Facebook's Code Checker - Computerphile</T><A>https://www.youtube.com/watch?v=tKR2UZdRpV0</A><L>en</L><F>MP4</F><DURATION><MINUTE>14</MINUTE><SECOND>14</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>O'Hearn</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>13</DAY></DATE><COMMENT>Some basic non-technical information about static code analysers and Infer.</COMMENT></ARTICLE></ITEM>
        <ITEM><ARTICLE predecessor="https://www.youtube.com/watch?v=tKR2UZdRpV0"><X><T>EXTRA BITS: Demonstrating How Code Checking Works - Computerphile</T><A>https://www.youtube.com/watch?v=7rYr6EQS7Co</A><L>en</L><F>MP4</F><DURATION><MINUTE>13</MINUTE><SECOND>20</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>O'Hearn</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>13</DAY></DATE><COMMENT>The continuation of the previous video.</COMMENT></ARTICLE></ITEM>
      </BLIST></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Metrics</TITLE>
      <ITEM><ARTICLE><X><T>Software Remodeling: Improving Design and Implementation Quality - Using audits, metrics and refactoring in Borland® Together® ControlCenter™</T><A>../attic/tgr_softwareremodeling.pdf</A><L>en</L><F>PDF</F></X><AUTHOR><FIRSTNAME>Richard</FIRSTNAME><MIDDLENAME>C.</MIDDLENAME><LASTNAME>Gronback</LASTNAME></AUTHOR><DATE><YEAR>2003</YEAR><MONTH>1</MONTH></DATE><COMMENT>Why static code analysis and software metrics are a good complement of human code reviews and can help to drive refactoring.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>In pursuit of code quality: Monitoring cyclomatic complexity</T><ST>What to do when code complexity is off the charts</ST><A>https://www.ibm.com/developerworks/java/library/j-cq03316/index.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Andrew</FIRSTNAME><LASTNAME>Glover</LASTNAME></AUTHOR><DATE><YEAR>2006</YEAR><MONTH>3</MONTH><DAY>28</DAY></DATE><COMMENT>A very basic introduction to cyclomatic complexity and some tools computing it. The CC computation formula is not even given.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Introducing the Polyglot Code Explorer</T><A>https://blog.korny.info/2020/09/06/introducing-the-polyglot-code-explorer.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kornelis</FIRSTNAME><LASTNAME>Sietsma</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>9</MONTH><DAY>6</DAY></DATE><COMMENT>Using some simple and language neutral metrics to analyse a code base.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Formal verification</TITLE>
      <ITEM><ARTICLE><X><T>Interface Grammars for Modular Software Verification</T><A>https://www.youtube.com/watch?v=ozUmWZdWBsk</A><L>en</L><F>MP4</F><DURATION><MINUTE>42</MINUTE><SECOND>18</SECOND></DURATION><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>7</DAY></DATE></X><AUTHOR><FIRSTNAME>Tevfik</FIRSTNAME><LASTNAME>Bultan</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>In order to simplify a system or to replace the components unavailable for analysis, stubs are used. These ones are generated by parsing a grammar modelling these components.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Digital Design: Beyond Trial and Error</T><A>https://www.youtube.com/watch?v=QOcyGZvKkgU</A><L>en</L><F>MP4</F><DURATION><MINUTE>52</MINUTE><SECOND>44</SECOND></DURATION><DATE><YEAR>2008</YEAR><MONTH>8</MONTH><DAY>22</DAY></DATE></X><AUTHOR><FIRSTNAME>Fred</FIRSTNAME><LASTNAME>Furtek</LASTNAME></AUTHOR><DATE><YEAR>2008</YEAR><MONTH>8</MONTH><DAY>19</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Fred</FIRSTNAME><LASTNAME>Furtek</LASTNAME></AUTHOR> proposes a new methodology for performing formal verification in the case of concurrency. This one combines boolean expressions and regular expressions. The idea seems interesting, but it is realistic for real, i.e. non trivial, systems?</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Naming</TITLE>
      <ITEM><ARTICLE><X><T>Creating Useful Naming Conventions: Business Considerations</T><A>https://visualstudiomagazine.com/articles/2013/12/01/creating-useful-naming-conventions.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>12</MONTH><DAY>20</DAY></DATE><COMMENT>Some thoughts about naming conventions.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Hunting for great names in programming</T><A>https://m.signalvnoise.com/hunting-for-great-names-in-programming-16f624c8fc03</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><MIDDLENAME>Heinemeier</MIDDLENAME><LASTNAME>Hansson</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>8</MONTH><DAY>22</DAY></DATE><COMMENT>About the pleasure to choose good names for variables, methods and classes.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: IdentifierNamingPostForWorldWideWebBlog</T><A>https://testing.googleblog.com/2017/10/code-health-identifiernamingpostforworl.html?utm_source=feedburner</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chris</FIRSTNAME><LASTNAME>Lewis</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Bob</FIRSTNAME><LASTNAME>Nystrom</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>23</DAY></DATE><COMMENT>Some simple but good advice for chosing identifiers.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Partitioning complexity</TITLE>
      <ITEM><ARTICLE><X><T>Making a mess less</T><A>https://f3yourmind.net/2017/10/17/making-a-mess-less/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Aslam</FIRSTNAME><LASTNAME>Khan</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>10</MONTH><DAY>17</DAY></DATE><COMMENT>How to handle a complex model.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Constant/Migrate/Compute: A Workflow for Partitioning Complexity</T><A>https://www.facebook.com/notes/kent-beck/constantmigratecompute-a-workflow-for-partitioning-complexity/1703064246393099/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>14</DAY></DATE><COMMENT>A strategy for implementing a feature by splitting it in baby steps.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>One Bite At A Time: Partitioning Complexity</T><A>https://www.facebook.com/notes/kent-beck/one-bite-at-a-time-partitioning-complexity/1716882961677894/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>28</DAY></DATE><COMMENT>A list of strategies for splitting a code change into simple steps.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Complexity Partitioning and Inheritance: Two Wins and a Big Loss</T><A>https://www.facebook.com/notes/kent-beck/complexity-partitioning-and-inheritance-two-wins-and-a-big-loss/1718193168213540/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>11</MONTH><DAY>29</DAY></DATE><COMMENT>An example (using an inheritance hierarchy) where the partitioning may end up being more complex.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Refactoring</TITLE>
      <ITEM><ARTICLE><X><T>RefactoringMalapropism</T><A>https://martinfowler.com/bliki/RefactoringMalapropism.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2004</YEAR><MONTH>1</MONTH><DAY>3</DAY></DATE><COMMENT>The word "Refactoring" should not be used for any kind of code restructuring.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Debt Metaphor</T><A>https://www.youtube.com/watch?v=pqeJFYwnkjE</A><L>en</L><F>MP4</F><DURATION><MINUTE>4</MINUTE><SECOND>43</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Ward</FIRSTNAME><LASTNAME>Cunningham</LASTNAME></AUTHOR><DATE><YEAR>2009</YEAR><MONTH>2</MONTH><DAY>14</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Ward</FIRSTNAME><LASTNAME>Cunningham</LASTNAME></AUTHOR> explains how he coined the "technical debt" metaphor.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X status="dead"><T>Comment lines by Kyle Brown: Paying back technical debt</T><A>https://www.ibm.com/developerworks/websphere/techjournal/1001_col_brown/1001_col_brown.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kyle</FIRSTNAME><LASTNAME>Brown</LASTNAME></AUTHOR><DATE><YEAR>2010</YEAR><MONTH>1</MONTH><DAY>27</DAY></DATE><COMMENT>The author suggests a five steps process to manage the technical debt:<BR/>1) Assess what you owe<BR/>2) Stop incurring new debt<BR/>3) Choose your debt reduction strategy<BR/>4) Stick with the plan!<BR/>5) Track and reassess your progress</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>OpportunisticRefactoring</T><A>https://martinfowler.com/bliki/OpportunisticRefactoring.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>11</MONTH><DAY>1</DAY></DATE><COMMENT>Take the opportunity to clean up the code while adding a feature or fixing a bug.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Use, Disuse, and Misuse of Automated Refactorings</T><A>https://www.youtube.com/watch?v=ZJADAbsx1IE</A><L>en</L><F>MP4</F><DURATION><MINUTE>37</MINUTE><SECOND>20</SECOND></DURATION><DATE><YEAR>2012</YEAR><MONTH>10</MONTH><DAY>29</DAY></DATE></X><AUTHOR><FIRSTNAME>Mohsen</FIRSTNAME><LASTNAME>Vakilian</LASTNAME></AUTHOR><DATE><YEAR>2012</YEAR><MONTH>10</MONTH><DAY>1</DAY></DATE><COMMENT>A study of Eclipse refactoring tools: Which ones are used? Which ones are not used? Why? How can they be more accessible?</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Martin Fowler @ OOP2014 "Workflows of Refactoring"</T><A>https://www.youtube.com/watch?v=vqEg37e4Mkw</A><L>en</L><F>MP4</F><DURATION><MINUTE>27</MINUTE><SECOND>4</SECOND></DURATION><DATE><YEAR>2014</YEAR><MONTH>7</MONTH><DAY>14</DAY></DATE></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>2</MONTH><DAY>10</DAY></DATE><COMMENT>Some thoughts about refactoring: how to sell it to managers, the different types of refactoring…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>RailsConf 2014 - All the Little Things by Sandi Metz</T><A>https://www.youtube.com/watch?v=8bZh5LMaSmE</A><L>en</L><F>MP4</F><DURATION><MINUTE>38</MINUTE><SECOND>46</SECOND></DURATION><DATE><YEAR>2014</YEAR><MONTH>5</MONTH><DAY>21</DAY></DATE></X><AUTHOR><FIRSTNAME>Sandi</FIRSTNAME><LASTNAME>Metz</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE><COMMENT>The gilted rose kata which is a refactoring kata: the open/close principle, many small objects, refactoring requires temporary complexity increase.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Refactoring code that accesses external services</T><ST>When I write code that deals with external services, I find it valuable to separate that access code into separate objects. Here I show how I would refactor some congealed code into a common pattern of this separation.</ST><A>https://martinfowler.com/articles/refactoring-external-service.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Martin</FIRSTNAME><LASTNAME>Fowler</LASTNAME></AUTHOR><DATE><YEAR>2015</YEAR><MONTH>2</MONTH><DAY>17</DAY></DATE><COMMENT>The title says all: a detailed example of refactoring some code calling the YouTube API.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Core 6 Refactorings</T><A>http://arlobelshee.com/the-core-6-refactorings/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Arlo</FIRSTNAME><LASTNAME>Belshee</LASTNAME></AUTHOR><DATE><YEAR>2016</YEAR><MONTH>5</MONTH><DAY>2</DAY></DATE><COMMENT>The author explains the basic refactorings and that it is better to rely on the IDE. But my experience is that some developers blindly following IDE refactoring proposals end up writing crappy code…</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The Life-Changing Magic of Tidying Up Code</T><A>https://www.facebook.com/notes/kent-beck/the-life-changing-magic-of-tidying-up-code/1544047022294823/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>6</MONTH><DAY>8</DAY></DATE><COMMENT>Some non-technical rules for tidying up code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What Refactoring Is and Is Not</T><A>https://www.typemock.com/what-refactoring-is-and-is-not</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Erik</FIRSTNAME><LASTNAME>Dietrich</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>4</MONTH><DAY>4</DAY></DATE><COMMENT>Big rewrites must not be called refactoring and they should be avoided by doing real refactoring i.e. doing continuous code cleanup under the control of a correct suite of automated tests.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>What To Tidy</T><A>https://medium.com/@kentbeck_7670/what-to-tidy-28cb46e55009</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>7</DAY></DATE><COMMENT>Some examples of small code cleanups.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Sipping the Big Gulp: 2 Ways to Narrow an Interface</T><A>https://medium.com/@kentbeck_7670/sipping-the-big-gulp-a7c50549c393</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>11</DAY></DATE><COMMENT>A very simplistic example of tidying up: changing a routine so it accepts an object attribute instead of the whole object can be done by creating a new routine to replace the old one or by changing the parameter of the routine.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Refactoring Java, Part 1: Driving agile development with test-driven development</T><ST>Refactoring makes your organization’s code simpler, which means fewer bugs and easier maintenance.</ST><A>https://blogs.oracle.com/javamagazine/refactoring-java-part-1-driving-agile-development-with-test-driven-development</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mohamed</FIRSTNAME><LASTNAME>Taman</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>9</DAY></DATE><COMMENT>The author tries to slowly detail the TDD process (and in particular the refactoring) but he goes too far and he starts by mixing production and test code. This will not help new comers to understand the whole process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blogs.oracle.com/javamagazine/refactoring-java-part-1-driving-agile-development-with-test-driven-development"><X><T>Refactoring Java, Part 2: Stabilizing your legacy code and technical debt</T><ST>Pin-down tests are the key to stabilizing your legacy Java code.</ST><A>https://blogs.oracle.com/javamagazine/refactoring-java-part-2-stabilizing-your-legacy-code-and-technical-debt</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mohamed</FIRSTNAME><LASTNAME>Taman</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>10</MONTH><DAY>23</DAY></DATE><COMMENT>Using the Gilded Rose kata to demonstrate writing unit tests (before refactoring) from the specification and by analyzing code coverage.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blogs.oracle.com/javamagazine/refactoring-java-part-2-stabilizing-your-legacy-code-and-technical-debt"><X><T>Refactoring Java, Part 3: Regaining business agility by simplifying legacy code</T><ST>By making the code easier to understand, you also make it easier—and safer—to maintain.</ST><A>https://blogs.oracle.com/javamagazine/refactoring-java-part-3-regaining-business-agility-by-simplifying-legacy-code</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mohamed</FIRSTNAME><LASTNAME>Taman</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>12</MONTH><DAY>4</DAY></DATE><COMMENT>The author describes in details some refactorings (constant extraction, method extraction…). But I consider that he is wrong when using the extracted constants in his unit tests.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>On Exactitude in Technical Debt</T><ST>What does a metaphor like “technical debt” mean? And what doesn’t it mean?</ST><A>https://www.oreilly.com/radar/on-exactitude-in-technical-debt/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kevlin</FIRSTNAME><LASTNAME>Henney</LASTNAME></AUTHOR><DATE><YEAR>2020</YEAR><MONTH>11</MONTH><DAY>17</DAY></DATE><COMMENT>The usual description about the danger of improperly using the metaphor, the cost of the technical debt is the additional time and effort spent working on the code.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>IntelliJ IDEA - Code Smells</TITLE>
      <ITEM><ARTICLE><X><T>Code Smells: Null</T><A>https://blog.jetbrains.com/idea/2017/08/code-smells-null/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>8</DAY></DATE><COMMENT>Some examples of improper use of <CODEROUTINE>null</CODEROUTINE> and cleaning them with IntelliJ IDEA.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blog.jetbrains.com/idea/2017/08/code-smells-null/"><X><T>Code Smells: Deeply Nested Code</T><A>https://blog.jetbrains.com/idea/2017/08/code-smells-deeply-nested-code/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>16</DAY></DATE><COMMENT>A violation of the law of Demether and how to fix it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blog.jetbrains.com/idea/2017/08/code-smells-deeply-nested-code/"><X><T>Code Smells: Iteration</T><A>https://blog.jetbrains.com/idea/2017/08/code-smells-iteration/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>23</DAY></DATE><COMMENT>Some examples of using a <CODEROUTINE>List</CODEROUTINE> where a <CODEROUTINE>Map</CODEROUTINE> or a <CODEROUTINE>Set</CODEROUTINE> should be used.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blog.jetbrains.com/idea/2017/08/code-smells-iteration/"><X><T>Code Smells: Mutation</T><A>https://blog.jetbrains.com/idea/2017/08/code-smells-mutation/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>8</MONTH><DAY>29</DAY></DATE><COMMENT>Simplifying some complex code by removing mutable variables.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blog.jetbrains.com/idea/2017/08/code-smells-mutation/"><X><T>Code Smells: Multi-Responsibility Methods</T><A>https://blog.jetbrains.com/idea/2017/09/code-smells-multi-responsibility-methods/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>5</DAY></DATE><COMMENT>Fixing a method that violates the Single Responsibility Principle.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blog.jetbrains.com/idea/2017/09/code-smells-multi-responsibility-methods/"><X><T>Code Smells: If Statements</T><A>https://blog.jetbrains.com/idea/2017/09/code-smells-if-statements/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>13</DAY></DATE><COMMENT>Some miscellaneous ideas on how to simply code using to many <CODEROUTINE>if</CODEROUTINE>s.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blog.jetbrains.com/idea/2017/09/code-smells-if-statements/"><X><T>Code Smells: Too Many Problems</T><A>https://blog.jetbrains.com/idea/2017/09/code-smells-too-many-problems/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Trisha</FIRSTNAME><LASTNAME>Gee</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>9</MONTH><DAY>18</DAY></DATE><COMMENT>The author proposes three strategies to clean up messy code: break into smaller methods, manage one problem at a time, model the data/algorithm.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Katas</TITLE>
      <ITEM><ARTICLE><X><T>Prime Factors Code Kata Screencast</T><A>https://www.youtube.com/watch?v=WowJKhsiITM</A><L>en</L><F>MP4</F><DURATION><MINUTE>10</MINUTE><SECOND>50</SECOND></DURATION></X><AUTHOR><FIRSTNAME>John</FIRSTNAME><LASTNAME>Davis</LASTNAME></AUTHOR><DATE><YEAR>2011</YEAR><MONTH>10</MONTH><DAY>4</DAY></DATE><COMMENT>A code Kata: computing prime factors in Java using TDD.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Performing Code Katas</T><A>https://8thlight.com/blog/micah-martin/2013/05/28/performing-code-katas.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Micah</FIRSTNAME><LASTNAME>Martin</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kelly</FIRSTNAME><LASTNAME>Steensma</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>5</MONTH><DAY>28</DAY></DATE><COMMENT>Some advice for performing code katas.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Using Katas To Improve</T><A>https://8thlight.com/blog/chong-kim/2013/09/26/using-katas-to-improve.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Chong</FIRSTNAME><LASTNAME>Kim</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>26</DAY></DATE><COMMENT><AUTHOR><FIRSTNAME>Chong</FIRSTNAME><LASTNAME>Kim</LASTNAME></AUTHOR> explains the benefits he got from practicing code katas.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Kent Beck's limbo / test &amp;&amp; commit || revert</TITLE>
      <ITEM><ARTICLE><X><T>Limbo: Scaling Software Collaboration</T><A>https://medium.com/@kentbeck_7670/limbo-scaling-software-collaboration-afd4f00db4b</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>7</MONTH><DAY>11</DAY></DATE><COMMENT>Some thoughts about how to have a massive team of developers working on a code base.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://medium.com/@kentbeck_7670/limbo-scaling-software-collaboration-afd4f00db4b"><X><T>Limbo on the Cheap</T><A>https://medium.com/@kentbeck_7670/limbo-on-the-cheap-e4cfae840330</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>27</DAY></DATE><COMMENT>Experimenting ideas of the previous article wit textual diffs and Git.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>test &amp;&amp; commit || revert</T><A>https://medium.com/@kentbeck_7670/test-commit-revert-870bbd756864</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>9</MONTH><DAY>28</DAY></DATE><COMMENT>Pushing the experiment in a new direction: if the tests fail, the code change is reverted.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>TCR (test &amp;&amp; commit || revert). How to use? Alternative to TDD?</T><A>https://medium.com/@tdeniffel/tcr-test-commit-revert-a-test-alternative-to-tdd-6e6b03c22bec</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Deniffel</LASTNAME></AUTHOR><DATE><YEAR>2018</YEAR><MONTH>11</MONTH><DAY>14</DAY></DATE><COMMENT>A description of TCR and a simple experiment with it.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>substring, TCR style</T><A>https://www.youtube.com/watch?v=ZrHBVTCbcE0</A><L>en</L><F>MP4</F><DURATION><MINUTE>15</MINUTE><SECOND>31</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>9</DAY></DATE><COMMENT>A demonstration of the TCR process.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Trying out test commit or revert</T><A>http://www.marcusoft.net/2019/01/trying-out-test-commit-or-revert.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Marcus</FIRSTNAME><LASTNAME>Hammarberg</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>11</DAY></DATE><COMMENT>A detailed try of using TCR on the Fizz Buzz kata on Node.js.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>TCR in VS Code</T><A>https://www.youtube.com/watch?v=IIKndRX5qHw</A><L>en</L><F>MP4</F><DURATION><MINUTE>6</MINUTE><SECOND>4</SECOND></DURATION></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>1</MONTH><DAY>11</DAY></DATE><COMMENT>A minimalist setup for doing TCR is VS Code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Test &amp;&amp; Commit || Revert (TCR)</T><A>https://www.davidtanzer.net/david's%20blog/2019/03/06/test-commit-revert.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>David</FIRSTNAME><LASTNAME>Tanzer</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>3</MONTH><DAY>6</DAY></DATE><COMMENT>Some small feedback on TCR: it does not enforce small steps, but it works when doing these.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>TCR to Tutorial</T><A>https://medium.com/@tdeniffel/tcr-to-tutorial-d327cb8bd139</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Thomas</FIRSTNAME><LASTNAME>Deniffel</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>4</MONTH><DAY>18</DAY></DATE><COMMENT>The author speaks about a tool to generate a tutorial from a TCR log, but there is little information here.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>SB Changes</T><A>https://medium.com/@kentbeck_7670/bs-changes-e574bc396aaa</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>21</DAY></DATE><COMMENT>Learning to separate and sequence structural and behavourial changes.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Software Design is Human Relationships</TITLE>
      <ITEM><ARTICLE><X><T>Software Design is Human Relationships: Part 1 of 3, Perspective</T><A>https://medium.com/@kentbeck_7670/software-design-is-human-relationships-part-1-of-3-perspective-1bcd53855557</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>23</DAY></DATE><COMMENT>Introducing waiters (people waiting for system behaviour change) and changers (people who can change the behaviour).</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://medium.com/@kentbeck_7670/software-design-is-human-relationships-part-1-of-3-perspective-1bcd53855557"><X><T>Software Design is Human Relationships: Part 2 of 3, Waiters, Changers, and Sufficiency</T><A>https://medium.com/@kentbeck_7670/software-design-is-human-relationships-part-2-of-3-waiters-changers-and-sufficiency-4c0bb9a08d23</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>29</DAY></DATE><COMMENT>Interleave behaviour and structure changes so waiters do not get frustrated.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://medium.com/@kentbeck_7670/software-design-is-human-relationships-part-2-of-3-waiters-changers-and-sufficiency-4c0bb9a08d23"><X><T>Software Design is Human Relationships: Part 3 of 3, Changers &amp; Changers</T><A>https://medium.com/@kentbeck_7670/software-design-is-human-relationships-part-3-of-3-changers-changers-20eeac7846e0</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Kent</FIRSTNAME><LASTNAME>Beck</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>7</MONTH><DAY>18</DAY></DATE><COMMENT>Changers may disagree on how the structure should be changed or on how to order behaviour and structure changes.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Commenting the code</TITLE>
      <ITEM><ARTICLE><X><T>Why You Shouldn't Comment (or Document) Code</T><A>https://visualstudiomagazine.com/articles/2013/06/01/roc-rocks.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>6</MONTH><DAY>27</DAY></DATE><COMMENT>Do not comment how the code works, but comment only its intends and write Really Obvious Code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://visualstudiomagazine.com/articles/2013/06/01/roc-rocks.aspx"><X><T>No Comment: Why Commenting Code Is Still a Bad Idea</T><A>https://visualstudiomagazine.com/articles/2013/07/26/why-commenting-code-is-still-bad.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>7</MONTH><DAY>31</DAY></DATE><COMMENT>Answers to the comments on the previous article, but there is almost nothing new here.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://visualstudiomagazine.com/articles/2013/07/26/why-commenting-code-is-still-bad.aspx"><X><T>No Comment, Part 3: Writing 'Really Obvious Code'</T><A>https://visualstudiomagazine.com/articles/2013/09/01/no-comment-part-3.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Peter</FIRSTNAME><LASTNAME>Vogel</LASTNAME></AUTHOR><DATE><YEAR>2013</YEAR><MONTH>9</MONTH><DAY>12</DAY></DATE><COMMENT>An example of modifying the code to make it more readable.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Necessary Comments</T><A>https://blog.cleancoder.com/uncle-bob/2017/02/23/NecessaryComments.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Robert</FIRSTNAME><MIDDLENAME>Cecil</MIDDLENAME><LASTNAME>Martin</LASTNAME><GIVENNAME>Uncle Bob</GIVENNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>2</MONTH><DAY>23</DAY></DATE><COMMENT>It is sometimes really necessary to comment code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Code Health: To Comment or Not to Comment?</T><A>https://testing.googleblog.com/2017/07/code-health-to-comment-or-not-to-comment.html</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Dori</FIRSTNAME><LASTNAME>Reuveni</LASTNAME></AUTHOR><AUTHOR><FIRSTNAME>Kevin</FIRSTNAME><LASTNAME>Bourrillion</LASTNAME></AUTHOR><DATE><YEAR>2017</YEAR><MONTH>7</MONTH><DAY>17</DAY></DATE><COMMENT>Some good basic advice about commenting the code.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Stop Writing Code Comments</T><A>https://blog.usejournal.com/stop-writing-code-comments-28fef5272752</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Brian</FIRSTNAME><LASTNAME>Norlander</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>5</MONTH><DAY>16</DAY></DATE><COMMENT>A good overview of the usual problems with comments.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE predecessor="https://blog.usejournal.com/stop-writing-code-comments-28fef5272752"><X><T>Don’t stop writing code comments</T><ST>Or: Please stop giving absolute advices.</ST><A>https://info.michael-simons.eu/2019/06/04/dont-stop-writing-code-comments/</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Michael</FIRSTNAME><LASTNAME>Simons</LASTNAME></AUTHOR><DATE><YEAR>2019</YEAR><MONTH>6</MONTH><DAY>4</DAY></DATE><COMMENT>An answer to the previous article.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
    <ITEM><BLIST><TITLE>Horror stories</TITLE>
      <ITEM><ARTICLE><X><T>Out To Lunch</T><ST>Why user requests shouldn't always be granted.</ST><A>https://visualstudiomagazine.com/articles/2014/02/01/out-to-lunch.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Bowytz</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>2</MONTH><DAY>19</DAY></DATE><COMMENT>Random error messages.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Unlucky 13?</T><ST>Would going above and beyond when fixing terrible code have serious consequences?</ST><A>https://visualstudiomagazine.com/articles/2014/03/01/unlucky-13.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Bowytz</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>3</MONTH><DAY>12</DAY></DATE><COMMENT>Being afraid of having done the right thing.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>The End of Days</T><ST>It's a situation a coder should never have to face: perpetuating bad coding practices from years ago, or just fixing the darn thing!</ST><A>https://visualstudiomagazine.com/articles/2014/04/01/the-end-of-days.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Bowytz</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>4</MONTH><DAY>16</DAY></DATE><COMMENT>A silly use of a relational database.</COMMENT></ARTICLE></ITEM>
      <ITEM><ARTICLE><X><T>Lost in Translation</T><ST>After Wayne's employer decided to bring some outsourced code back in house, he discovered that developers in Kerbleckistan were doing some serious innovating in the science of passing parameters.</ST><A>https://visualstudiomagazine.com/articles/2014/07/01/lost-in-translation.aspx</A><L>en</L><F>HTML</F></X><AUTHOR><FIRSTNAME>Mark</FIRSTNAME><LASTNAME>Bowytz</LASTNAME></AUTHOR><DATE><YEAR>2014</YEAR><MONTH>7</MONTH><DAY>23</DAY></DATE><COMMENT>Some offshore bashing, but, as pointed out by some cynical readers, Wayne also botched the work.</COMMENT></ARTICLE></ITEM>
    </BLIST></ITEM>
  </BLIST></ITEM>
</LLIST>
</CONTENT>
</PAGE>