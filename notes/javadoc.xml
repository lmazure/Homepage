<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Javadoc</TITLE>
<PATH>notes/javadoc.xml</PATH>
<DATE><YEAR>2016</YEAR><MONTH>2</MONTH><DAY>28</DAY></DATE>
<CONTENT>

<DEFINITIONTABLE>
<ROW><TERM>@author</TERM><DESC>defines the overview, package or class author</DESC></ROW>
<ROW><TERM>@deprecated</TERM><DESC>adds a comment indicating that this API should no longer be used</DESC></ROW>
<ROW><TERM>{@docRoot}</TERM><DESC>inserts the relative path to the generated document's root directory from any generated page</DESC></ROW>
<ROW><TERM>@exception</TERM><DESC>synonym for @throws</DESC></ROW>
<ROW><TERM>{@inheritDoc}</TERM><DESC>copies documentation from the "nearest" inheritable class or implementable interface<BR/>
this can be used for the main description, @return, @param and @throws</DESC></ROW>
<ROW><TERM>{@link <I>package.class#member</I> <I>label</I>}</TERM><DESC>inserts a link with a text label that points to the documentation for the specified package, class or member name of a class</DESC></ROW>
<ROW><TERM>{@linkplain <I>package.class#member</I> <I>label</I>}</TERM><DESC>same as @link except that the link is displayed using the plain text fond instead of the code font</DESC></ROW>
<ROW><TERM>@param</TERM><DESC>description of a parameter</DESC></ROW>
<ROW><TERM>@return</TERM><DESC>return type and permissible range of values</DESC></ROW>
<ROW><TERM>@see "<I>string</I>"</TERM><DESC>add a "See Also" text</DESC></ROW>
<ROW><TERM>@see <I>&lt;a href="URL#value"&gt;label&lt;/a&gt;</I></TERM><DESC>add a "See Also" link</DESC></ROW>
<ROW><TERM>@see <I>package.class#member</I> <I>label</I></TERM><DESC>adds a "See Also" link to a package, class or member name of a class<BR/>
<I>label</I> is optional</DESC></ROW>
<ROW><TERM>@serial</TERM><DESC>used in the doc comment for a default serializable field</DESC></ROW>
<ROW><TERM>@serialData <I>data-description</I></TERM><DESC>documents the types and order of data in the serialized form</DESC></ROW>
<ROW><TERM>@serialField <I>field-name</I> <I>field-type</I> <I>field-description</I></TERM><DESC>documents an ObjectStreamField component of a Serializable class's serialPersistentFields member</DESC></ROW>
<ROW><TERM>@since <I>since-text</I></TERM><DESC>adds a "Since" heading with the specified <I>since-text</I> to the generated documentation</DESC></ROW>
<ROW><TERM>@throws <I>class-name</I> <I>description</I></TERM><DESC>adds a "Throws" subheading to the generated documentation, with the <I>class-name</I> and <I>description</I> text</DESC></ROW>
<ROW><TERM>{@value <I>package.class#field</I>}</TERM><DESC>replaced by the value of a static field</DESC></ROW>
<ROW><TERM>@version <I>version-text</I></TERM><DESC>replaced by the value of the -version option when this one is used</DESC></ROW>
</DEFINITIONTABLE><BR/>

<BLIST><TITLE>Javadoc comments can be attached to:</TITLE>
<ITEM>class</ITEM>
<ITEM>interface</ITEM>
<ITEM>method</ITEM>
<ITEM>constructor</ITEM>
<ITEM>field</ITEM>
<ITEM>package</ITEM>
<ITEM>overview</ITEM>
</BLIST>
(the two last ones have a special syntax)<BR/>
A Javadoc comment is composed of a main description followed by a tag section, both written in HTML. To start a line with <CODEROUTINE>@</CODEROUTINE> and not have it be interpreted, use <CODEROUTINE>&amp;#064;</CODEROUTINE>.<BR/>
Tags can also be used inline by putting them between curly braces (they are called "in-line tags" in opposition of the usual tags called "block tags"):
<CODESAMPLE>
/**<BR/>
 * @deprecated As of JDK 1.1, replaced by {@link #setBounds(int,int,int,int)} <BR/>
 */<BR/>
</CODESAMPLE>
</CONTENT>
<X><T>links</T><A>../links/java.html#javadoc</A><L>en</L><F>HTML</F></X>
</PAGE>

