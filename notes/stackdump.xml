<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Dump of the stack</TITLE>
<PATH>notes/stackdump.xml</PATH>
<DATE><YEAR>2010</YEAR><MONTH>10</MONTH><DAY>26</DAY></DATE>
<CONTENT>
<CODESAMPLE>
#if&#xA0;defined(sun)&#xA0;&amp;&amp;&#xA0;defined(_XOPEN_XPG3)<BR/>
<BR/>
//&#xA0;---------------------<BR/>
//&#xA0;-&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;SUN&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;-<BR/>
//&#xA0;---------------------<BR/>
<BR/>
//&#xA0;Written&#xA0;with&#xA0;the&#xA0;help&#xA0;of&#xA0;barts@Eng.Sun.COM&#xA0;(Bart&#xA0;Smaalders)<BR/>
//&#xA0;This&#xA0;works&#xA0;on&#xA0;Solaris&#xA0;2.4&#xA0;and&#xA0;higher&#xA0;(sparc,&#xA0;x86&#xA0;and&#xA0;PPC)<BR/>
<BR/>
#include&#xA0;&lt;ctype.h&gt;<BR/>
#define&#xA0;__EXTENSIONS__<BR/>
#include&#xA0;&lt;dlfcn.h&gt;<BR/>
#undef&#xA0;__EXTENSIONS__<BR/>
#include&#xA0;&lt;setjmp.h&gt;<BR/>
#include&#xA0;&lt;sys/frame.h&gt;<BR/>
#include&#xA0;&lt;demangle.h&gt;<BR/>
#include&#xA0;&lt;string.h&gt;<BR/>
<BR/>
#if&#xA0;defined(sparc)&#xA0;||&#xA0;defined(__sparc)<BR/>
#define&#xA0;FLUSHWIN()&#xA0;asm("ta&#xA0;3");<BR/>
#define&#xA0;FRAME_PTR_INDEX&#xA0;1<BR/>
#define&#xA0;SKIP_FRAMES&#xA0;0<BR/>
#endif<BR/>
<BR/>
#if&#xA0;defined(i386)&#xA0;||&#xA0;defined(__i386)&#xA0;||&#xA0;defined(__x86_64)&#xA0;||&#xA0;defined(__x86_64__)&#xA0;||&#xA0;defined(__amd64)&#xA0;||&#xA0;defined(__amd64__)<BR/>
#define&#xA0;FLUSHWIN()<BR/>
#define&#xA0;FRAME_PTR_INDEX&#xA0;3<BR/>
#define&#xA0;SKIP_FRAMES&#xA0;1<BR/>
#endif<BR/>
<BR/>
#if&#xA0;defined(ppc)&#xA0;||&#xA0;defined(__ppc)<BR/>
#define&#xA0;FLUSHWIN()<BR/>
#define&#xA0;FRAME_PTR_INDEX&#xA0;0<BR/>
#define&#xA0;SKIP_FRAMES&#xA0;2<BR/>
#endif<BR/>
<BR/>
static&#xA0;void&#xA0;erDumpCurrentLevel(std::ostream&#xA0;&amp;strm,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*library,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*function,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;long&#xA0;offset)<BR/>
{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;dem[1024];<BR/>
<BR/>
#if&#xA0;defined(_DEMANGLE_H)<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;this&#xA0;is&#xA0;CC4.1<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;s&#xA0;=&#xA0;cplus_demangle((char*)function,dem,1024);<BR/>
#else&#xA0;//&#xA0;_DEMANGLE_H<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;this&#xA0;is&#xA0;CC4.0.1<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;s&#xA0;=&#xA0;demangle((char*)function,dem);<BR/>
#endif&#xA0;//&#xA0;_DEMANGLE_H<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(s!=0)&#xA0;strcpy(dem,function);<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;dem<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"&#xA0;+&#xA0;0x"&#xA0;&lt;&lt;&#xA0;std::hex&#xA0;&lt;&lt;&#xA0;offset&#xA0;&lt;&lt;&#xA0;std::dec<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"&#xA0;[";<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*c&#xA0;=&#xA0;library;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;while&#xA0;(isprint(*c))&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;*c;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;c++;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;"]\n"&#xA0;&lt;&lt;&#xA0;std::flush;<BR/>
}<BR/>
<BR/>
void&#xA0;erDumpStack(std::ostream&#xA0;&amp;strm,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;int&#xA0;numberOfIgnoredLevels)<BR/>
{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;FLUSHWIN();<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;jmp_buf&#xA0;buf;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;(void)setjmp(buf);<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;*cast=(int*)buf;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;struct&#xA0;frame&#xA0;*sp=(struct&#xA0;frame&#xA0;*)cast[FRAME_PTR_INDEX];<BR/>
<BR/>
#if&#xA0;SKIP_FRAMES&gt;0<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;for&#xA0;(&#xA0;int&#xA0;i=0&#xA0;;&#xA0;i&lt;SKIP_FRAMES&#xA0;&amp;&amp;&#xA0;sp&#xA0;;&#xA0;i++&#xA0;)&#xA0;sp=sp-&gt;fr_savfp;<BR/>
#endif<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;incr=0;<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;while&#xA0;(&#xA0;sp&#xA0;&amp;&amp;&#xA0;sp-&gt;fr_savpc&#xA0;)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;incr++;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Dl_info&#xA0;info;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*function,*library;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(dladdr((void*)sp-&gt;fr_savpc,&amp;info))&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;function=info.dli_sname;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;library=info.dli_fname;}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;function=library="?";}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;long&#xA0;offset=sp-&gt;fr_savpc-(unsigned&#xA0;long)info.dli_saddr;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(incr&gt;numberOfIgnoredLevels)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;erDumpCurrentLevel(strm,library,function,offset);}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sp=sp-&gt;fr_savfp;}<BR/>
}<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
#elif&#xA0;defined(sgi)<BR/>
<BR/>
//&#xA0;---------------------<BR/>
//&#xA0;-&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;SGI&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;-<BR/>
//&#xA0;---------------------<BR/>
<BR/>
<BR/>
#include&#xA0;&lt;stdlib.h&gt;<BR/>
#include&#xA0;&lt;stdio.h&gt;<BR/>
#include&#xA0;&lt;sym.h&gt;<BR/>
#include&#xA0;&lt;dem.h&gt;<BR/>
#include&#xA0;&lt;setjmp.h&gt;<BR/>
<BR/>
//&#xA0;beginning&#xA0;of&#xA0;hack&#xA0;-&#xA0;see&#xA0;end(3C)&#xA0;man&#xA0;page<BR/>
extern&#xA0;int&#xA0;_procedure_table[];<BR/>
extern&#xA0;int&#xA0;_procedure_table_size[];<BR/>
extern&#xA0;int&#xA0;_procedure_string_table[];<BR/>
extern&#xA0;int&#xA0;_ftext[];<BR/>
extern&#xA0;int&#xA0;_etext[];<BR/>
//&#xA0;end&#xA0;of&#xA0;hack&#xA0;-&#xA0;see&#xA0;end(3C)&#xA0;man&#xA0;page<BR/>
<BR/>
static&#xA0;struct&#xA0;runtime_pdr*&#xA0;find_runtime_pdr(unsigned&#xA0;long&#xA0;pc)<BR/>
{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;struct&#xA0;runtime_pdr&#xA0;*p;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;int&#xA0;base,limit,mid;<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;base=0;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;limit=(int)_procedure_table_size-1;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;while&#xA0;(base&lt;=limit)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mid=(base+limit)/2;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;p=((struct&#xA0;runtime_pdr*)_procedure_table)+mid;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(pc&lt;p-&gt;adr)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;limit=mid-1;}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;if&#xA0;(pc&gt;=(p+1)-&gt;adr)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;base=mid+1;}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return(p);};}<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;/*NOTREACHED*/<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;return(NULL);<BR/>
}<BR/>
<BR/>
static&#xA0;void&#xA0;erDumpCurrentLevel(std::ostream&#xA0;&amp;strm,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*function,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;long&#xA0;pc)<BR/>
{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;dem[MAXDBUF];<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(void)demangle(function,dem);<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;dem&#xA0;&lt;&lt;&#xA0;"&#xA0;pc=0x"&#xA0;&lt;&lt;&#xA0;hex&#xA0;&lt;&lt;&#xA0;pc&#xA0;&lt;&lt;&#xA0;dec&#xA0;&lt;&lt;&#xA0;'\n';<BR/>
}<BR/>
<BR/>
void&#xA0;erDumpStack(std::ostream&#xA0;&amp;strm,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;int&#xA0;numberOfIgnoredLevels)<BR/>
{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;jmp_buf&#xA0;jb;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;struct&#xA0;runtime_pdr&#xA0;*p;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;long&#xA0;pc;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/*&#xA0;program&#xA0;counter&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;*sp;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;/*&#xA0;pointer&#xA0;stack&#xA0;*/<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;setjmp(jb);<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;pc=jb[JB_PC];<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;sp=(char*)jb[JB_SP];<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;int&#xA0;incr=0;<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;while&#xA0;((p=find_runtime_pdr(pc))!=NULL)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;incr++;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(incr&gt;numberOfIgnoredLevels)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;erDumpCurrentLevel(strm,(char*)_procedure_string_table+p-&gt;irpss,pc);}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;sp+=p-&gt;frameoffset;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;pc=((unsigned&#xA0;long&#xA0;*)sp)[p-&gt;regoffset&gt;&gt;2];<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(&#xA0;pc&lt;(unsigned&#xA0;long)_ftext&#xA0;||&#xA0;pc&gt;=(unsigned&#xA0;long)_etext&#xA0;)&#xA0;break;}<BR/>
}<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
#elif&#xA0;defined(hpux)<BR/>
<BR/>
//&#xA0;---------------------<BR/>
//&#xA0;-&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;HP&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;-<BR/>
//&#xA0;---------------------<BR/>
<BR/>
#include&#xA0;&lt;stdio.h&gt;<BR/>
#include&#xA0;&lt;stdlib.h&gt;<BR/>
#include&#xA0;&lt;unistd.h&gt;<BR/>
#include&#xA0;&lt;dem.h&gt;<BR/>
#include&#xA0;&lt;iomanip&gt;<BR/>
<BR/>
extern&#xA0;"C"&#xA0;void&#xA0;U_STACK_TRACE();<BR/>
<BR/>
void&#xA0;erDumpStack(std::ostream&#xA0;&amp;strm,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;int&#xA0;numberOfIgnoredLevels)<BR/>
{<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;the&#xA0;undocumented&#xA0;routine&#xA0;U_STACK_TRACE&#xA0;dump&#xA0;the&#xA0;stack&#xA0;on&#xA0;stderr<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;we&#xA0;patch&#xA0;it&#xA0;to&#xA0;dump&#xA0;in&#xA0;ostream<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;SOME&#xA0;EXPLANATIONS:<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;------------------<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;I&#xA0;use&#xA0;the&#xA0;fact&#xA0;that&#xA0;with&#xA0;POSIX,&#xA0;the&#xA0;file&#xA0;descriptor&#xA0;for&#xA0;a&#xA0;new&#xA0;open,&#xA0;dup,…<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;will&#xA0;be&#xA0;the&#xA0;smallest&#xA0;available&#xA0;file&#xA0;descriptor.&#xA0;So,&#xA0;if&#xA0;we&#xA0;close&#xA0;the&#xA0;file<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;descriptor&#xA0;2&#xA0;and&#xA0;open&#xA0;a&#xA0;FILE*,&#xA0;its&#xA0;file&#xA0;descriptor&#xA0;will&#xA0;be&#xA0;2!<BR/>
&#xA0;&#xA0;&#xA0;//<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;We&#xA0;must&#xA0;keep&#xA0;a&#xA0;copy&#xA0;of&#xA0;errno&#xA0;in&#xA0;order&#xA0;to&#xA0;be&#xA0;able&#xA0;to&#xA0;restore&#xA0;it.&#xA0;Indeed,&#xA0;tmpfile<BR/>
&#xA0;&#xA0;&#xA0;//&#xA0;and&#xA0;U_STACK_TRACE&#xA0;are&#xA0;modifying&#xA0;errno&#xA0;even&#xA0;if&#xA0;no&#xA0;failure&#xA0;happened.<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;const&#xA0;char&#xA0;*errorString="Cannot&#xA0;dump&#xA0;the&#xA0;stack\n";<BR/>
&#xA0;&#xA0;&#xA0;const&#xA0;size_t&#xA0;buffer_size=1024;<BR/>
&#xA0;&#xA0;&#xA0;int&#xA0;errno_copy=errno;<BR/>
&#xA0;&#xA0;&#xA0;ostrstream&#xA0;oss;<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;flush&#xA0;stderr&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;(void)fflush(stderr);<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;keep&#xA0;a&#xA0;copy&#xA0;of&#xA0;stderr&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;int&#xA0;dup_stderr=dup(2);<BR/>
&#xA0;&#xA0;&#xA0;if&#xA0;(dup_stderr==-1)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;errno=errno_copy;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;errorString;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;}<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;close&#xA0;the&#xA0;initial&#xA0;stderr&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;if&#xA0;(close(2)==-1)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(void)close(dup_stderr);<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;errno=errno_copy;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;errorString;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;}<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;redirect&#xA0;file&#xA0;descriptor&#xA0;2&#xA0;toward&#xA0;a&#xA0;temporary&#xA0;file&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;FILE&#xA0;*tmp_file=tmpfile();<BR/>
&#xA0;&#xA0;&#xA0;if&#xA0;(tmp_file==NULL)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(void)dup(dup_stderr);&#xA0;&#xA0;//&#xA0;restore&#xA0;fd&#xA0;2&#xA0;toward&#xA0;stderr<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(void)close(dup_stderr);<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;errno=errno_copy;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;errorString;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;}<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;dump&#xA0;the&#xA0;stack&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;U_STACK_TRACE();<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;copy&#xA0;the&#xA0;temporary&#xA0;file&#xA0;in&#xA0;the&#xA0;iostream&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;rewind(tmp_file);<BR/>
&#xA0;&#xA0;&#xA0;char&#xA0;buffer[buffer_size];<BR/>
&#xA0;&#xA0;&#xA0;int&#xA0;incr=0;<BR/>
&#xA0;&#xA0;&#xA0;while&#xA0;(fgets(buffer,buffer_size,tmp_file))&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;incr++;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(incr&gt;numberOfIgnoredLevels)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;stack_depth;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;long&#xA0;address,offset;<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;function[buffer_size],library[buffer_size];<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(sscanf(buffer,"(%d)&#xA0;0x%lx&#xA0;%s&#xA0;+&#xA0;0x%lx&#xA0;[%s]",<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&amp;stack_depth,&amp;address,&amp;function,&amp;offset,&amp;library)!=5)&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;cannot&#xA0;parse&#xA0;the&#xA0;line&#xA0;-&gt;&#xA0;we&#xA0;copy&#xA0;it&#xA0;like&#xA0;it&#xA0;is<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;oss&#xA0;&lt;&lt;&#xA0;buffer;}<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;&#xA0;{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;unmangle&#xA0;the&#xA0;name<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;char&#xA0;dem[MAXDBUF];<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;(void)demangle(function,dem);<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;oss&#xA0;&lt;&lt;&#xA0;"("&#xA0;&lt;&lt;&#xA0;stack_depth&#xA0;&lt;&lt;&#xA0;")&#xA0;"<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"0x"&#xA0;&lt;&lt;&#xA0;hex&#xA0;&lt;&lt;&#xA0;address&#xA0;&lt;&lt;&#xA0;dec<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"&#xA0;"<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;dem<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"&#xA0;+&#xA0;"<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"0x"&#xA0;&lt;&lt;&#xA0;hex&#xA0;&lt;&lt;&#xA0;offset&#xA0;&lt;&lt;&#xA0;dec<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"&#xA0;"<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;"["&#xA0;&lt;&lt;&#xA0;library&#xA0;&lt;&lt;&#xA0;"]"<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;&lt;&#xA0;'\n';};};}<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;destroy&#xA0;the&#xA0;temporay&#xA0;file&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;(void)fclose(tmp_file);<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;redirect&#xA0;file&#xA0;descriptior&#xA0;2&#xA0;toward&#xA0;stderr&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;(void)dup(dup_stderr);<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;close&#xA0;the&#xA0;copy&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;(void)close(dup_stderr);<BR/>
<BR/>
//&#xA0;On&#xA0;HP,&#xA0;the&#xA0;end-of-string&#xA0;character&#xA0;is&#xA0;not&#xA0;put&#xA0;at&#xA0;the&#xA0;end&#xA0;of&#xA0;ostrstreams.<BR/>
&#xA0;&#xA0;&#xA0;oss&#xA0;&lt;&lt;&#xA0;'\0';<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;/*&#xA0;Do&#xA0;the&#xA0;stack&#xA0;dump&#xA0;on&#xA0;the&#xA0;stream&#xA0;*/<BR/>
&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;oss.str();<BR/>
<BR/>
&#xA0;&#xA0;&#xA0;delete&#xA0;[]&#xA0;oss.str();<BR/>
&#xA0;&#xA0;&#xA0;<BR/>
&#xA0;&#xA0;&#xA0;errno=errno_copy;<BR/>
}<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
<BR/>
#elif&#xA0;defined(linux)<BR/>
<BR/>
//&#xA0;---------------------<BR/>
//&#xA0;-&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Linux&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;-<BR/>
//&#xA0;---------------------<BR/>
<BR/>
#include&#xA0;&lt;execinfo.h&gt;<BR/>
#include&#xA0;&lt;stdlib.h&gt;<BR/>
<BR/>
void&#xA0;erDumpStack(std::ostream&#xA0;&amp;strm,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;int&#xA0;numberOfIgnoredLevels)<BR/>
{<BR/>
&#xA0;&#xA0;void&#xA0;*array[128];<BR/>
<BR/>
&#xA0;&#xA0;size_t&#xA0;size&#xA0;=&#xA0;backtrace(array,sizeof(array)/sizeof(array[0]));<BR/>
&#xA0;&#xA0;char&#xA0;**strings&#xA0;=&#xA0;backtrace_symbols(array,&#xA0;size);<BR/>
<BR/>
&#xA0;&#xA0;for&#xA0;(size_t&#xA0;i&#xA0;=&#xA0;numberOfIgnoredLevels;&#xA0;i&#xA0;&lt;&#xA0;size;&#xA0;i++)&#xA0;strm&#xA0;&lt;&lt;&#xA0;strings[i]&#xA0;&lt;&lt;&#xA0;"\n";<BR/>
<BR/>
&#xA0;&#xA0;free(strings);<BR/>
}<BR/>
<BR/>
#else&#xA0;<BR/>
<BR/>
//&#xA0;-----------------------------------<BR/>
//&#xA0;-&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;other&#xA0;architecture&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;-<BR/>
//&#xA0;-----------------------------------<BR/>
<BR/>
void&#xA0;erDumpStack(std::ostream&#xA0;&amp;strm,<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;unsigned&#xA0;int)<BR/>
{<BR/>
&#xA0;&#xA0;&#xA0;&#xA0;strm&#xA0;&lt;&lt;&#xA0;"Sorry!&#xA0;Do not&#xA0;know&#xA0;how&#xA0;to&#xA0;dump&#xA0;the&#xA0;stack&#xA0;on&#xA0;this&#xA0;architecture\n"&#xA0;&lt;&lt;&#xA0;flush;<BR/>
}<BR/>
<BR/>
#endif
</CODESAMPLE>
</CONTENT>
</PAGE>