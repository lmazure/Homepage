<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Bash</TITLE>
<PATH>notes/bash2.xml</PATH>
<DATE><YEAR>2022</YEAR><MONTH>1</MONTH><DAY>23</DAY></DATE>
<CONTENT>
<BLIST><TITLE><U><B>functions</B></U></TITLE>
<ITEM>
  The declaration of a function is
  <CODESAMPLE>function foobar() { command-list; }</CODESAMPLE>
  The <CODEROUTINE>function</CODEROUTINE> keyword is optional. The curly braces around the function body must be separated from the body by blanks or newlines. The command list must be terminated with a semicolon or a newline.
</ITEM>
<ITEM>
  The exit status of a function is the exit status of the last command executed in the body. If the <CODEROUTINE>return</CODEROUTINE> keyword is used: with a numeric argument, this one is the function's return status; with no argument, the function's return status is the exit status of the last command executed before the <CODEROUTINE>return</CODEROUTINE>.
</ITEM>
<ITEM>
  The function can return a value just by using <CODEROUTINE>echo</CODEROUTINE>.
  <CODESAMPLE>
    #!/bin/bash<BR/>
    <BR/>
    function encode() {<BR/>
    <TAB/>command=`echo $1 | sed 's/./&lt;Key&gt;&amp; /g'`<BR/>
    <TAB/>echo "$command"<BR/>
    }<BR/>
    <BR/>
    e=`encode $1`<BR/>
    xse -window $win -display :0.0 $e "&lt;Key&gt;Return"
  </CODESAMPLE>
</ITEM>
</BLIST>
<BLIST><TITLE><U><B>misc.</B></U></TITLE>
  <ITEM>
    Verifying the number of command line arguments
    <CODESAMPLE>if [[ $# -ne 4 ]]; then<BR/>
      <TAB/>echo "Syntax: $0 &lt;source login&gt; &lt;source password&gt; &lt;target login&gt; &lt;target password&gt;"<BR/>
      <TAB/>exit 2<BR/>
      fi
    </CODESAMPLE>
  </ITEM>
  <ITEM>
    Testing the exit status of the previous command
    <CODESAMPLE>git clone --mirror https://$source_login:$source_password@$source_repo/$source_project.git<BR/>
      if [[ $? -ne 0 ]]; then<BR/>
      <TAB/>echo "Failed to clone https://$source_repo/$source_project.git"<BR/>
      <TAB/>exit 2<BR/>
      fi
    </CODESAMPLE>
  </ITEM>
  <ITEM>
    Looping on directories
    <CODESAMPLE>for dir in $( ls -d * )<BR/>
      do<BR/>
      <TAB/>cd $dir<BR/>
      <TAB/>git pull<BR/>
      <TAB/>cd ..<BR/>
      done
    </CODESAMPLE>
  </ITEM>
  <ITEM>
    Test the presence of a string in a file
    <CODESAMPLE>if grep -q foo myfile; then<BR/>
      <TAB/>echo "String is present"<BR/>
    fi
    </CODESAMPLE>
  </ITEM>
  </BLIST>
</CONTENT>
<X><T>links</T><A>../links/shell.html#bash</A><L>en</L><F>HTML</F></X>
</PAGE>