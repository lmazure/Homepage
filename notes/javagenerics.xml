<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Java Generics</TITLE>
<PATH>notes/javagenerics.xml</PATH>
<DATE><YEAR>2018</YEAR><MONTH>5</MONTH><DAY>30</DAY></DATE>
<CONTENT>
Generic type declaration: <CODEROUTINE>public class Box&lt;T&gt;</CODEROUTINE>
<CODEROUTINE>T</CODEROUTINE> is a type variable or a formal type parameter 
<CODESAMPLE>public class Box&lt;T&gt; {<BR/>
<BR/>
<TAB/>private T t;<BR/>
<BR/>
<TAB/>public void add(T t) {<BR/>
<TAB/><TAB/>this.t = t; <BR/>
<TAB/>}<BR/>
<BR/>
<TAB/>public T get() {<BR/>
<TAB/><TAB/>return t; <BR/>
<TAB/>}<BR/>
}</CODESAMPLE>
The class is used as: <CODEROUTINE>Box&lt;Integer&gt; integerBox = new Box&lt;Integer&gt;();</CODEROUTINE><BR/>
<BR/>
<BLIST><TITLE>The most commonly used type parameter names are</TITLE>
  <ITEM>E: Element (for a Collection)</ITEM>
  <ITEM>K: Key</ITEM>
  <ITEM>N: Number</ITEM>
  <ITEM>T: Type</ITEM>
  <ITEM>V: Value</ITEM>
  <ITEM>S,U,V…: 2nd, 3rd, 4th… types</ITEM>
</BLIST>
Type parameters can also be declared within method and constructor signatures to create generic methods and generic constructors. 
<CODESAMPLE>public static &lt;U&gt; void fillBoxes(U u, List&lt;Box&lt;U&gt;&gt; boxes) {<BR/>
<TAB/>for (Box&lt;U&gt; box : boxes) {<BR/>
<TAB/><TAB/>box.add(u);<BR/>
<TAB/>}<BR/>
}</CODESAMPLE>
The method is used as <CODEROUTINE>Box.fillBoxes(red, crayonBoxes);</CODEROUTINE>.<BR/>
This feature, known as type inference, allows you to invoke a generic method as you would an ordinary method, without specifying a type between angle brackets.<BR/>
<BR/>
<BLIST><TITLE><U><B>Bounded Type Parameters</B></U></TITLE>
  <ITEM>It is possible to restrict the kinds of types that are allowed to be passed to a type parameter. For example, a method that operates on numbers might only want to accept instances of <CODEROUTINE>Number</CODEROUTINE> or its subclasses. This is what bounded type parameters are for.<BR/>
To declare a bounded type parameter, list the type parameter's name, followed by the <CODEROUTINE>extends</CODEROUTINE> keyword, followed by its upper bound. Note that, in this context, <CODEROUTINE>extends</CODEROUTINE> is used in a general sense to mean either "extends" (as in classes) or "implements" (as in interfaces). 
<CODESAMPLE>public &lt;U extends Number&gt; void inspect(U u){<BR/>
<TAB/>…<BR/>
}</CODESAMPLE></ITEM>
  <ITEM>To specify additional interfaces that must be implemented, use the &amp; character, as in: <CODEROUTINE>&lt;U extends Number &amp; MyInterface&gt;</CODEROUTINE>.</ITEM>
  <ITEM><CODESAMPLE>public void boxTest(Box&lt;Number&gt; b){<BR/>
<TAB/>…<BR/>
}</CODESAMPLE>
will not accept a parameter of type <CODEROUTINE>Box&lt;Double&gt;</CODEROUTINE></ITEM>
  <ITEM><BLIST><TITLE>Wildcards</TITLE>
    <ITEM>Upper bound: <CODEROUTINE>&lt;? extends Animal&gt;</CODEROUTINE> means an unknown type that is a subtype of <CODEROUTINE>Animal</CODEROUTINE>, possibly <CODEROUTINE>Animal</CODEROUTINE> itself (covariance)</ITEM>
    <ITEM>Lower bound: <CODEROUTINE>&lt;? super Animal&gt;</CODEROUTINE> means an unknown type that is a supertype of <CODEROUTINE>Animal</CODEROUTINE>, possibly <CODEROUTINE>Animal</CODEROUTINE> itself (contravariance)</ITEM>
    <ITEM>Unbounded wildcard: <CODEROUTINE>&lt;?&gt;</CODEROUTINE>, this is the same as <CODEROUTINE>&lt;? extends Object&gt;</CODEROUTINE></ITEM>
    <ITEM>Use covariance when intend to take generic values out of a structure.<BR/>
Use contravariance when intend to put generic values into a structure.<BR/>
Use invariance when intend to do both.</ITEM>
  </BLIST></ITEM>
  <ITEM><CODESAMPLE>public void boxTest(Box&lt;? extends Number&gt; b){<BR/>
<TAB/>…<BR/>
}</CODESAMPLE>
will accept a parameter of type <CODEROUTINE>Box&lt;Double&gt;</CODEROUTINE>.<BR/>
Bounded type parameters limit the kinds of types that can be passed into a type parameter.</ITEM>
</BLIST>
<U><B>Type Erasure</B></U><BR/>
When a generic type is instantiated, the compiler translates those types by a technique called type erasure, a process where the compiler removes all information related to type parameters and type arguments within a class or method. Type erasure enables Java applications that use generics to maintain binary compatibility with Java libraries and applications that were created before generics. 
For instance, <CODEROUTINE>Box&lt;String&gt;</CODEROUTINE> is translated to type <CODEROUTINE>Box</CODEROUTINE>, which is called the raw type, a raw type is a generic class or interface name without any type arguments. This means that you can't find out what type of Object a generic class is using at runtime. The following operations are not possible: 
<CODESAMPLE>public class MyClass&lt;E&gt; {<BR/>
<TAB/>public static void myMethod(Object item) {<BR/>
<TAB/><TAB/>if (item instanceof E) {  //Compiler error<BR/>
<TAB/><TAB/><TAB/>…<BR/>
<TAB/><TAB/>}<BR/>
<TAB/><TAB/>E item2 = new E();   //Compiler error<BR/>
<TAB/><TAB/>E[] iArray = new E[10]; //Compiler error<BR/>
<TAB/><TAB/>E obj = (E)new Object(); //Unchecked cast warning<BR/>
<TAB/>}<BR/>
}</CODESAMPLE>
</CONTENT>
</PAGE>
