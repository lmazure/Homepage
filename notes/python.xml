<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Python</TITLE>
<PATH>notes/python.xml</PATH>
<DATE><YEAR>2022</YEAR><MONTH>12</MONTH><DAY>6</DAY></DATE>
<CONTENT>
<BLIST><TITLE><U><B>List</B></U></TITLE>
  <ITEM>lists can mix types
    <CODESAMPLE>a=['foo',69,'bar']</CODESAMPLE>
  </ITEM>
  <ITEM>lists support slices (these ones are mutable and can even be used to change the size of the list)<BR/>
    <CODEROUTINE>a[0:2]</CODEROUTINE>: remove the two first elements of the list<BR/>
    <CODEROUTINE>a[:0]=a</CODEROUTINE>: insert a copy ot itself at the beginning of the list
  </ITEM>
  <ITEM><CODEROUTINE>del</CODEROUTINE> can be used to remove elements in a list
    <CODESAMPLE>del a[2:4]</CODESAMPLE>
  </ITEM>
  <ITEM><CODEROUTINE>len</CODEROUTINE>: return the number of elements of a list</ITEM>
  <ITEM>lists can be nested
    <CODESAMPLE>q=[45,3]<BR/>
      p=[0,q,14]</CODESAMPLE>
  </ITEM>
  <ITEM>list unpacking
    <CODESAMPLE>a=[1,2,3,4]<BR/>
      [a1,a2,a3,a4]=a</CODESAMPLE>
  </ITEM>
  <ITEM>test if an element is in a list
    <CODESAMPLE>item in List</CODESAMPLE>
  </ITEM>
  <ITEM><BLIST><TITLE>Methods</TITLE>
    <ITEM><CODEROUTINE>insert(pos,item)</CODEROUTINE>: insert an item at a given position</ITEM>
    <ITEM><CODEROUTINE>append(elem)</CODEROUTINE>: append an item at the list end</ITEM>
    <ITEM><CODEROUTINE>pop(i)</CODEROUTINE>: remove the item at the given position in the list and return it</ITEM>
    <ITEM><CODEROUTINE>pop()</CODEROUTINE>: remove the last item and return it</ITEM>
    <ITEM><CODEROUTINE>index(item)</CODEROUTINE>: return the index of the first occurrence of the value <CODEROUTINE>item</CODEROUTINE></ITEM>
    <ITEM><CODEROUTINE>remove(item)</CODEROUTINE>: remove the first occurrence of the value <CODEROUTINE>item</CODEROUTINE></ITEM>
    <ITEM><CODEROUTINE>sort()</CODEROUTINE>: sort the list</ITEM>
    <ITEM><CODEROUTINE>reverse()</CODEROUTINE>: reverse the list</ITEM>
    <ITEM><CODEROUTINE>count(item)</CODEROUTINE>: return the number of occurrences of the value <CODEROUTINE>item</CODEROUTINE></ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Functions</TITLE>
    <ITEM><CODEROUTINE>filter(function,l)</CODEROUTINE> return the list of elements <CODEROUTINE>elem</CODEROUTINE> for which <CODEROUTINE>function(elem)</CODEROUTINE> is true</ITEM>
    <ITEM><CODEROUTINE>map(function,l)</CODEROUTINE> return the list of values of <CODEROUTINE>function</CODEROUTINE> called for each element of <CODEROUTINE>l</CODEROUTINE><BR/>
      more than one list can be passed to <CODEROUTINE>map</CODEROUTINE>, in this case, <CODEROUTINE>function</CODEROUTINE> must have the same number of arguments (if a list is shorter than the other one, <CODEROUTINE>function</CODEROUTINE> will be called with the value <CODEROUTINE>None</CODEROUTINE>)<BR/>
      if <CODEROUTINE>None</CODEROUTINE> is passed instead of a function, <CODEROUTINE>map</CODEROUTINE> returns its arguments
      <CODESAMPLE><PROMPT/>(None,[1,2,3,4],[5,6,7])
        [(1, 5), (2, 6), (3, 7), (4, None)]</CODESAMPLE>
    </ITEM>
    <ITEM>reduce(function,l) call function on the two first items, then on the result and the next item…
      <CODESAMPLE><PROMPT/>reduce(lambda x,y:x+y , [1,2,3,4,5,6])<BR/>
        21</CODESAMPLE>
      a third argument can be passed to indicate the starting value (this value will be returned in case of an empty list)
    </ITEM>
  </BLIST></ITEM>
</BLIST>
<BLIST><TITLE><U><B>Tuple</B></U></TITLE>
  <ITEM>a tuple is a number of values separated by a comma<BR/>
    (they may be input with or without parentheses)
    <CODESAMPLE>t=1,2,"azerty"</CODESAMPLE></ITEM>
  <ITEM>tuples support slicing</ITEM>
  <ITEM>an empty tuple is created with the syntax:
    <CODESAMPLE>empty=()</CODESAMPLE></ITEM>
  <ITEM>a singleton tuple is created with an empty comma
    <CODESAMPLE>singleton=1,</CODESAMPLE></ITEM>
  <ITEM>tuple packing
    <CODESAMPLE>t=1,2,3</CODESAMPLE>
    tuple unpacking
    <CODESAMPLE>x,y,z=t</CODESAMPLE></ITEM>
  <ITEM>tuple are immutable: it is not possible ot assign to the individual items of a tuple</ITEM>
</BLIST>
<BLIST><TITLE><U><B>Set</B></U></TITLE>
  <ITEM>Create an empty set
    <CODESAMPLE>s = set()</CODESAMPLE>
  </ITEM>
</BLIST>
<BLIST><TITLE><U><B>Dictionary</B></U></TITLE>
  <ITEM>syntax
    <CODESAMPLE>d={'key1':1234,'key2':5678}<BR/>
      d['key3']=43</CODESAMPLE>
  </ITEM>
  <ITEM>create an empty dictionary
    <CODESAMPLE>d = {}</CODESAMPLE>
  </ITEM>
  <ITEM>keys must be immutable: numbers, strings and tuples containing only numbers, strings and tuples</ITEM>
  <ITEM><CODEROUTINE>del</CODEROUTINE> can be used to delete entries of a dictionary
    <CODESAMPLE>del d['key3']</CODESAMPLE>
  </ITEM>
  <ITEM><BLIST><TITLE>Methods</TITLE>
    <ITEM><CODEROUTINE>keys()</CODEROUTINE>: return the keys of a dictionary</ITEM>
    <ITEM><CODEROUTINE>if key in dic</CODEROUTINE><BR/>
      <CODEROUTINE>dic.has_key(key)</CODEROUTINE>: test if a key is in the dictionary (<CODEROUTINE>has_key</CODEROUTINE> has been remoed in Python 3)</ITEM>
    </BLIST></ITEM>
</BLIST>
<BLIST><TITLE><U><B>Exceptions</B></U></TITLE>
  <ITEM>Use <CODEROUTINE>try</CODEROUTINE> to declare the temptative code block and <CODEROUTINE>except</CODEROUTINE> to catch the exception.
  <CODESAMPLE>try:<BR/>
    <TAB/>…<BR/>
    except ValueError:<BR/>
    <TAB/>…</CODESAMPLE>
  </ITEM>
  <ITEM>It is possible to have several exceptions with the same handler and several handlers with the same <CODEROUTINE>try</CODEROUTINE> clause.
    <CODESAMPLE>try:<BR/>
    <TAB/>…<BR/>
    except (RuntimeError, TypeError, NameError):<BR/>
    <TAB/>…<BR/>
    except ValueError:<BR/>
    <TAB/>…</CODESAMPLE>
  </ITEM>
  <ITEM>A final <CODEROUTINE>except</CODEROUTINE> handler will catch all exceptions.
    <CODESAMPLE>try:<BR/>
    <TAB/>…<BR/>
    except (RuntimeError, TypeError, NameError):<BR/>
    <TAB/>…<BR/>
    except:<BR/>
    <TAB/>…</CODESAMPLE>
  </ITEM>
  <ITEM>An <CODEROUTINE>else</CODEROUTINE> clause may be added after the exception handlers, it will be executed anytime no exception occurred.
    <CODESAMPLE>try:<BR/>
    <TAB/>…<BR/>
    except (RuntimeError, TypeError, NameError):<BR/>
    <TAB/>…<BR/>
    else:<BR/>
    <TAB/>…</CODESAMPLE>
  </ITEM>
  <ITEM>It is possible to retrieve the exception details by adding a variable name after the exception list.
    <CODESAMPLE>try:<BR/>
    <TAB/>…<BR/>
    except IOError, (errno, strerror):<BR/>
    <TAB/>…<BR/>
    except ZeroDivisionError, detail:<BR/>
    <TAB/>…</CODESAMPLE>
  </ITEM>
  <ITEM>A <CODEROUTINE>finally</CODEROUTINE> block can be used instead of <CODEROUTINE>except</CODEROUTINE> handlers: it will be always executed, but if an exception occurred, it will be reraised after this execution.
    <CODESAMPLE>try:<BR/>
    <TAB/>…<BR/>
    finally:<BR/>
    <TAB/>…</CODESAMPLE>
  </ITEM>
  <ITEM><CODEROUTINE>raise</CODEROUTINE> can be used to raise an exception (the argument is optional).
    <CODESAMPLE>raise NameError, 'HiThere'</CODESAMPLE>
  </ITEM>
  <ITEM><CODEROUTINE>raise</CODEROUTINE> with no argument reraise the current exception.
  </ITEM>
</BLIST>
<BLIST><TITLE><U><B><CODEROUTINE>pip</CODEROUTINE></B></U></TITLE>
  <ITEM>install a package
    <CODESAMPLE>pip install &lt;package&gt;</CODESAMPLE>
  </ITEM>
  <ITEM>install the packages defined in a <CODEFILENAME>requirements.txt</CODEFILENAME> file
    <CODESAMPLE>pip install -r requirements.txt</CODESAMPLE>
  </ITEM>
  <ITEM>upgrade a package
    <CODESAMPLE>pip install --upgrade &lt;package&gt;</CODESAMPLE>
  </ITEM>
  <ITEM>install a package from the default branch of a Git repository
    <CODESAMPLE>pip install git+https://gitlab.com/opentestfactory/agent</CODESAMPLE>
    The version (commit ID) is available in <CODEFILENAME>/c/Users/lmazure/AppData/Local/Programs/Python/Python39/lib/site-packages/opentf_agent-*.dist-info/direct_url.json</CODEFILENAME>.<BR/>
    See <X><T>https://packaging.python.org/en/latest/specifications/direct-url/</T><A>https://packaging.python.org/en/latest/specifications/direct-url/</A><L>en</L><F>HTML</F></X>.
  </ITEM>
  <ITEM>install a package from a given branch of a Git repository
    <CODESAMPLE>pip install git+https://gitlab.com/opentestfactory/agent@rel-1.3.1</CODESAMPLE>
  </ITEM>
  <ITEM>list the installed packages
    <CODESAMPLE>pip list</CODESAMPLE>
  </ITEM>
  <ITEM>list the out-of-date installed packages
    <CODESAMPLE>pip list -o</CODESAMPLE>
    <CODESAMPLE>pip list --outdated</CODESAMPLE>
  </ITEM>
  <ITEM>do not list globally-installed packages
    <CODESAMPLE>pip list -l</CODESAMPLE>
    <CODESAMPLE>pip list --local</CODESAMPLE>
  </ITEM>
</BLIST></CONTENT>
<X><T>links</T><A>../links/python.html</A><L>en</L><F>HTML</F></X>
</PAGE>