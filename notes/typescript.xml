<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>TypeScript</TITLE>
<PATH>notes/typescript.xml</PATH>
<DATE><YEAR>2025</YEAR><MONTH>4</MONTH><DAY>24</DAY></DATE>
<CONTENT>
<BLIST><TITLE><CODEROUTINE>tsc</CODEROUTINE></TITLE>
  <ITEM>display the version<BR/>
    <CODESAMPLE><PROMPT/>tsc --version</CODESAMPLE></ITEM>
  <ITEM><BLIST><TITLE><CODEFILENAME>tsconfig.json</CODEFILENAME></TITLE>
    <ITEM>The presence of a <CODEFILENAME>tsconfig.json</CODEFILENAME> file in a directory indicates that the directory is the root of a TypeScript project.</ITEM>
    <ITEM>If <CODEROUTINE>tsc</CODEROUTINE> is launched with no input file, it will look for <CODEFILENAME>tsconfig.json</CODEFILENAME> or <CODEFILENAME>jsconfig.json</CODEFILENAME>.<BR/>
      <CODEFILENAME>jsconfig.json</CODEFILENAME> is for JavaScript projects, it is the same as <CODEFILENAME>jsconfig.json</CODEFILENAME> except for some JavaScript-related compiler flags enabled by default.</ITEM>
    <ITEM>If <CODEROUTINE>tsc</CODEROUTINE> is launched with some arguments, it will compile the files with the default compiler settings.<BR/>
      <CODEROUTINE>tsc</CODEROUTINE> can be invoked with <CODEROUTINE>--project</CODEROUTINE>/<CODEROUTINE>-p</CODEROUTINE> to specify the path of a directory containing a <CODEFILENAME>tsconfig.json</CODEFILENAME> file or the path to a valid .json file containing the configurations.</ITEM>
    <ITEM>generate the default <CODEFILENAME>tsconfig.json</CODEFILENAME><BR/>
      <CODESAMPLE><PROMPT/>tsc --init</CODESAMPLE></ITEM>
  </BLIST></ITEM>
</BLIST>
<BR/>
<U><B>Duck typing</B></U><BR/>
It is possible to pass parameters having a type that is a superset of the expected type
<CODESAMPLE>
  interface Point1D {<BR/>
  <TAB/>x: number;<BR/>
  }<BR/>
  interface Point2D {<BR/>
  <TAB/>x: number;<BR/>
  <TAB/>y: number;<BR/>
  }<BR/>
  interface Point3D {<BR/>
  <TAB/>x: number;<BR/>
  <TAB/>y: number;<BR/>
  <TAB/>z: number;<BR/>
  }<BR/>
  var point1D: Point1D = { x: 0 }<BR/>
  var point2D: Point2D = { x: 0, y: 10 }<BR/>
  var point3D: Point3D = { x: 0, y: 10, z: 20 }<BR/>
  function iTakePoint2D(point: Point2D) { /* do something */ }<BR/>
  iTakePoint2D(point2D); // OK<BR/>
  iTakePoint2D(point3D); // OK<BR/>
  iTakePoint2D(point1D); // KO y is missing
</CODESAMPLE>
<BR/>
<U><B>Postfix <CODEROUTINE>!</CODEROUTINE>: Non-null Assertion Operator</B></U><BR/>
The <CODEROUTINE>!</CODEROUTINE> postfix operator removes <CODEROUTINE>null</CODEROUTINE> and <CODEROUTINE>undefined</CODEROUTINE> from a type without doing any checking.
<CODESAMPLE>function liveDangerously(x?: number | undefined) {<BR/>
  <TAB/>console.log(x!.toFixed());<BR/>
  }</CODESAMPLE>
<BR/>
<U><B>Equality</B></U><BR/>
<CODEROUTINE>==</CODEROUTINE> test equality with type coercition<BR/>
<CODEROUTINE>===</CODEROUTINE> test equality without type coercition<BR/>
do not use <CODEROUTINE>==</CODEROUTINE>, except for testing for <CODEROUTINE>null</CODEROUTINE> or <CODEROUTINE>undefined</CODEROUTINE><BR/>
to test if a variable is defined at the global level, use <CODEROUTINE>if (typeof someglobal !== 'undefined') { … }</CODEROUTINE><BR/>
<BR/>
<CODEROUTINE>for … of</CODEROUTINE><BR/>
An object is iterable if it has an implementation for the <CODEROUTINE>Symbol.iterator</CODEROUTINE> property.
Some built-in types like <CODEROUTINE>Array</CODEROUTINE>, <CODEROUTINE>Map</CODEROUTINE>, <CODEROUTINE>Set</CODEROUTINE>, <CODEROUTINE>String</CODEROUTINE>, <CODEROUTINE>Int32Array</CODEROUTINE>, <CODEROUTINE>Uint32Array</CODEROUTINE>… have their <CODEROUTINE>Symbol.iterator</CODEROUTINE> property already implemented.
<CODEROUTINE>Symbol.iterator</CODEROUTINE> function on an object is responsible for returning the list of values to iterate on.<BR/>
<BR/>
<CODEROUTINE>for … in</CODEROUTINE><BR/>
<CODEROUTINE>for … in</CODEROUTINE> loops on the properties of an object.<BR/>
<BR/>
<U><B>Executing scripts</B></U><BR/>
To run a TypeScript script using node, you can use <X><T>ts-node</T><A>https://typestrong.org/ts-node/</A><L>en</L><F>HTML</F></X>:<BR/>
<CODESAMPLE><PROMPT/>npx ts-node --compilerOptions '{"module":"CommonJS"}' test.ts</CODESAMPLE>
</CONTENT>
<X><T>links</T><A>../links/typescript.html</A><L>en</L><F>HTML</F></X>
</PAGE>