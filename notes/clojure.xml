<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Clojure</TITLE>
<PATH>notes/clojure.xml</PATH>
<DATE><YEAR>2017</YEAR><MONTH>2</MONTH><DAY>5</DAY></DATE>
<CONTENT>
<BLIST><TITLE><U><B>Types</B></U></TITLE>
<ITEM>Ratio type:
<CODESAMPLE>(/ 22 7)<BR/>
<PROMPT/>22/7</CODESAMPLE></ITEM>
<ITEM>Use a floating-point literal for forcing the division
<CODESAMPLE>(/ 22.0 7)<BR/>
<PROMPT/>3.142857142857143</CODESAMPLE></ITEM>
<ITEM>The integer quotient and remainder
<CODESAMPLE>(quot 22 7)<BR/>
<PROMPT/>3<BR/>
(rem 22 7)<BR/>
<PROMPT/>1</CODESAMPLE></ITEM>
<ITEM>Append M to a number to create a <CODEROUTINE>BigDecimal</CODEROUTINE> literal:
<CODESAMPLE>(+ 1 (/ 0.00001 1000000000000000000))<BR/>
<PROMPT/>1.0</CODESAMPLE>
<CODESAMPLE> (+ 1 (/ 0.00001M 1000000000000000000))<BR/>
<PROMPT/>1.00000000000000000000001M</CODESAMPLE></ITEM>
<ITEM>For arbitrary precision integers, you can append N to create a <CODEROUTINE>BigInt</CODEROUTINE> literal:
<CODESAMPLE>(* 1000N 1000 1000 1000 1000 1000 1000)<BR/>
<PROMPT/>1000000000000000000000N</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>(odd? x)</CODEROUTINE> returns true if n is odd, throws an exception if n is not an integer.</ITEM>
<ITEM><CODEROUTINE>(even? x)</CODEROUTINE> returns true if n is even, throws an exception if n is not an integer.</ITEM>
<ITEM><CODEROUTINE>(&lt; x)</CODEROUTINE><BR/><CODEROUTINE>(&lt; x y)</CODEROUTINE><BR/><CODEROUTINE>(&lt; x y &amp; more)</CODEROUTINE> returns true if the numbers are in strictly increasing order, false otherwise.</ITEM>
<ITEM><CODEROUTINE>(&lt;= x)</CODEROUTINE><BR/><CODEROUTINE>(&lt;= x y)</CODEROUTINE><BR/><CODEROUTINE>(&lt;= x y &amp; more)</CODEROUTINE> returns true if the numbers are in monotically increasing order, false otherwise.</ITEM>
<ITEM><CODEROUTINE>(&gt; x)</CODEROUTINE><BR/><CODEROUTINE>(&gt; x y)</CODEROUTINE><BR/><CODEROUTINE>(&gt; x y &amp; more)</CODEROUTINE> returns true if the numbers are in strictly decreasing order, false otherwise.</ITEM>
<ITEM><CODEROUTINE>(&gt;= x)</CODEROUTINE><BR/><CODEROUTINE>(&gt;= x y)</CODEROUTINE><BR/><CODEROUTINE>(&gt;= x y &amp; more)</CODEROUTINE> returns true if the numbers are in monotically decreasing order, false otherwise.</ITEM>
<ITEM><CODEROUTINE>(inc x)</CODEROUTINE> returns x plus 1, does not auto-promote longs, will throw on overflow.</ITEM>
<ITEM><CODEROUTINE>(dec x)</CODEROUTINE> returns x minus 1, does not auto-promote longs, will throw on overflow.</ITEM>
<ITEM>Multiline strings
<CODESAMPLE>"This is a\nmultiline string"<BR/>
<PROMPT/>"This is a\nmultiline string"<BR/>
"This is also<BR/>
a multiline string"<BR/>
<PROMPT/>"This is also\na multiline string"</CODESAMPLE></ITEM>
<ITEM>Using Java interop forms:
<CODESAMPLE>(.toUpperCase "hello")<BR/>
<PROMPT/>"HELLO"</CODESAMPLE></ITEM>
<ITEM>Converting to a string
<CODESAMPLE>(str 1 2 nil 3)<BR/>
<PROMPT/>"123"</CODESAMPLE></ITEM>
<ITEM>Character literal syntax is <CODEROUTINE>\{letter}</CODEROUTINE>, where <CODEROUTINE>letter</CODEROUTINE> can be a letter or the name of a character: <CODEROUTINE>backspace</CODEROUTINE>, <CODEROUTINE>formfeed</CODEROUTINE>, <CODEROUTINE>newline</CODEROUTINE>, <CODEROUTINE>return</CODEROUTINE>, <CODEROUTINE>space</CODEROUTINE>, or <CODEROUTINE>tab</CODEROUTINE>
<CODESAMPLE>(Character/toUpperCase \s)
<PROMPT/>\S</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>true</CODEROUTINE> is true<BR/>
<CODEROUTINE>false</CODEROUTINE> is false<BR/>
<CODEROUTINE>nil</CODEROUTINE> also evaluates to false in a boolean context<BR/>
everything else evaluates to true in a boolean context</ITEM>
<ITEM><CODEROUTINE>true?</CODEROUTINE> tests whether a value is actually true, not whether the value evaluates to true in a boolean context. The only thing that is <CODEROUTINE>true?</CODEROUTINE> is <CODEROUTINE>true</CODEROUTINE> itself:
<CODESAMPLE>(true? true)<BR/>
<PROMPT/>true<BR/>
(true? "foo")<BR/>
<PROMPT/>false</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>nil?</CODEROUTINE> and <CODEROUTINE>false?</CODEROUTINE> work the same way. Only <CODEROUTINE>nil</CODEROUTINE> is <CODEROUTINE>nil?</CODEROUTINE>, and only <CODEROUTINE>false</CODEROUTINE> is <CODEROUTINE>false?</CODEROUTINE>.</ITEM>
<ITEM><CODEROUTINE>zero?</CODEROUTINE> works with any numeric type, returning true if it is zero:
<CODESAMPLE>(zero? 0.0)<BR/>
<PROMPT/>true<BR/>
(zero? (/ 22 7))<BR/>
<PROMPT/>false</CODESAMPLE></ITEM>
<ITEM>The following predicates test the type of their argument
<CODESAMPLE>(string? "hello")<BR/>
<PROMPT/>true<BR/>
(keyword? :hello)<BR/>
<PROMPT/>true<BR/>
(symbol? 'hello)<BR/>
<PROMPT/>true</CODESAMPLE></ITEM>
</BLIST>
<BLIST><TITLE><U><B>Data structures</B></U></TITLE>
<ITEM><BLIST><TITLE><U><B>Map</B></U></TITLE>
<ITEM>Empty map:
<CODESAMPLE>{}<BR/>
<PROMPT/>{}</CODESAMPLE></ITEM>
<ITEM>Some examples of literals:
<CODESAMPLE>{:first-name "Charlie"<BR/>
 :last-name "McFishwich"}<BR/>
<PROMPT/>#&lt;core$_GT_ clojure.core$_GT_@15cfd851&gt;</CODESAMPLE>
<CODESAMPLE>{"string-key" +}<BR/>
<PROMPT/>{"string-key" #&lt;core$_PLUS_ clojure.core$_PLUS_@658d00be&gt;</CODESAMPLE></ITEM>
<ITEM>Maps can be created with the <CODEROUTINE>hash-map</CODEROUTINE> function
<CODESAMPLE>(hash-map :a 1 :b 2)<BR/>
<PROMPT/>{:a 1 :b 2}</CODESAMPLE></ITEM>
<ITEM>Look-up can be done with the <CODEROUTINE>get</CODEROUTINE> function.<BR/>
If the key is not present, <CODEROUTINE>nil</CODEROUTINE> is returned.
<CODESAMPLE>(get {:a 0 :b 1} :a)<BR/>
<PROMPT/>0</CODESAMPLE>
<CODESAMPLE>(get {:a 0 :b 1} :c)<BR/>
<PROMPT/>nil</CODESAMPLE></ITEM>
<ITEM>It is possible to give a default value to <CODEROUTINE>get</CODEROUTINE> which will be returned if the key is not found.
<CODESAMPLE>(get {:a 0 :b 1} :c -1)<BR/>
<PROMPT/>-1</CODESAMPLE></ITEM>
<ITEM>Another way to look up a value in a map is to treat the map like a function with the key as its argument:
<CODESAMPLE> ({:name "The Human Coffeepot"} :name)<BR/>
<PROMPT/>"The Human Coffeepot"</CODESAMPLE></ITEM>
<ITEM>Keywords are functions. They take a map argument and look themselves up in the map. You can look up by calling the map or by calling a key:
<CODESAMPLE>(def inventors {:Lisp "McCarthy" :Clojure "Hickey"})<BR/>
<PROMPT/>#'user/inventors<BR/>
(inventors :Clojure)<BR/>
<PROMPT/>"Hickey"<BR/>
:Clojure inventors)<BR/>
<PROMPT/>"Hickey"</CODESAMPLE></ITEM>
<ITEM>The <CODEROUTINE>get-in</CODEROUTINE> function lets you look up values in nested maps
<CODESAMPLE> (get-in {:a 0 :b {:c "ho hum"}} [:b :c])<BR/>
<PROMPT/>"ho hum"</CODESAMPLE></ITEM>
</BLIST></ITEM>
<ITEM><BLIST><TITLE><U><B>Vector</B></U></TITLE>
<ITEM>Literal:
<CODESAMPLE>[3 2 1]<BR/>
<PROMPT/>[3 2 1]</CODESAMPLE></ITEM>
<ITEM>Getting the n-th value can be done with the <CODEROUTINE>get</CODEROUTINE> function.
<CODESAMPLE>(get [3 2 1] 0)<BR/>
<PROMPT/>3</CODESAMPLE></ITEM>
<ITEM>Vectors can also be created with the <CODEROUTINE>vector</CODEROUTINE> function.
<CODESAMPLE>(vector "creepy" "full" "moon")<BR/>
<PROMPT/>["creepy" "full" "moon"]</CODESAMPLE></ITEM>
<ITEM>Elements can be added at the end of a vector with the <CODEROUTINE>conj</CODEROUTINE> function.
<CODESAMPLE>(conj [1 2 3] 4)<BR/>
<PROMPT/>[1 2 3 4]</CODESAMPLE></ITEM>
</BLIST></ITEM>
<ITEM><BLIST><TITLE><U><B>List</B></U></TITLE>
<ITEM>Literal:<BR/>
the single quote indicates that this is not a function call, but an actual list
<CODESAMPLE>'(1 2 3 4)<BR/>
<PROMPT/>(1 2 3 4)</CODESAMPLE></ITEM>
<ITEM>Getting the n-th value can be done with the <CODEROUTINE>nth</CODEROUTINE> function.
<CODESAMPLE>(nth '(:a :b :c) 2)<BR/>
<PROMPT/>:c</CODESAMPLE></ITEM>
<ITEM>Lists can also be created with the <CODEROUTINE>list</CODEROUTINE> function.
<CODESAMPLE>(list "creepy" "full" "moon")<BR/>
<PROMPT/>("creepy" "full" "moon")</CODESAMPLE></ITEM>
<ITEM>Elements can be added at the beginning of a list with the <CODEROUTINE>conj</CODEROUTINE> function.
<CODESAMPLE>(conj '(1 2 3) 4)<BR/>
<PROMPT/>(4 1 2 3)</CODESAMPLE></ITEM>
</BLIST></ITEM>
<ITEM><BLIST><TITLE><U><B>Set</B></U></TITLE>
<ITEM>Literal:
<CODESAMPLE>#{"kurt vonnegut" 20 :icicle}<BR/>
<PROMPT/>#{:icicle "kurt vonnegut" 20}</CODESAMPLE></ITEM>
<ITEM>Hash sets can also be created with the <CODEROUTINE>hash-ser</CODEROUTINE> function.
<CODESAMPLE>(hash-set 1 1 2 2)<BR/>
<PROMPT/>#{1 2}</CODESAMPLE></ITEM>
<ITEM>Elements can be added with the <CODEROUTINE>conj</CODEROUTINE> function.
<CODESAMPLE>(conj #{:a :b} :c)<BR/>
<PROMPT/>#{:a :b :c}</CODESAMPLE></ITEM>
<ITEM>To test if a value is in a set, use the <CODEROUTINE>contains?</CODEROUTINE> function.
<CODESAMPLE>(contains? #{:a :b} :a)<BR/>
<PROMPT/>true<BR/>
(contains? #{:a :b} 3)<BR/>
<PROMPT/>false<BR/>
(contains? #{nil} nil)<BR/>
<PROMPT/>true</CODESAMPLE></ITEM>
<ITEM>To test if a value is in a set, we can also use the <CODEROUTINE>get</CODEROUTINE> function. But testing on <CODEROUTINE>nil</CODEROUTINE> will always return <CODEROUTINE>nil</CODEROUTINE>.
<CODESAMPLE>(get #{:a :b} :a)<BR/>
<PROMPT/>:a<BR/>
(get #{:a nil} nil)<BR/>
<PROMPT/>nil<BR/>
(get #{:a :b} "kurt vonnegut")<BR/>
<PROMPT/>nil</CODESAMPLE></ITEM>
<ITEM>To test if a value is in a set, we can also use a keyword.
<CODESAMPLE>(:a #{:a :b})
<PROMPT/>:a</CODESAMPLE></ITEM>
</BLIST></ITEM>
</BLIST>
<BLIST><TITLE><U><B>Functions</B></U></TITLE>
<ITEM>To define your own functions, use <CODEROUTINE>defn</CODEROUTINE>
<CODESAMPLE>(defn name doc-string? attr-map? [params*] body)</CODESAMPLE>
The <CODEROUTINE>attr-map</CODEROUTINE> associates metadata with the function's <CODEROUTINE>var</CODEROUTINE>.
<CODESAMPLE>(defn greeting<BR/>
"Returns a greeting of the form 'Hello, username.'"<BR/>
[username]<BR/>
(str "Hello, " username))<BR/>
(greeting "world")<BR/>
<PROMPT/>"Hello, world"<BR/>
(doc greeting)<BR/>
-------------------------<BR/>
exploring/greeting<BR/>
([username])<BR/>
Returns a greeting of the form 'Hello, username.'</CODESAMPLE></ITEM>
<ITEM>You can use this alternate form of <CODEROUTINE>defn</CODEROUTINE>, which takes multiple argument lists and method bodies
<CODESAMPLE> (defn name doc-string? attr-map?<BR/>
([params*] body)+)</CODESAMPLE>
Different arities of the same function can call one another, so you can easily create a zero-argument <CODEROUTINE>greeting</CODEROUTINE> that delegates to the one-argument <CODEROUTINE>greeting</CODEROUTINE>, passing in a default <CODEROUTINE>username</CODEROUTINE>
<CODESAMPLE> (defn greeting<BR/>
"Returns a greeting of the form 'Hello, username.'<BR/>
Default username is 'world'."<BR/>
([] (greeting "world"))<BR/>
([username] (str "Hello, " username)))<BR/>
 (greeting)<BR/>
<PROMPT/>"Hello, world"</CODESAMPLE></ITEM>
<ITEM>You can create a function with variable arity by including an ampersand in the parameter list. Clojure will bind the name after the ampersand to a sequence of all the remaining parameters.
<CODESAMPLE> (defn date [person-1 person-2 &amp; chaperones]<BR/>
(println person-1 "and" person-2<BR/>
"went out with" (count chaperones) "chaperones."))<BR/>
(date "Romeo" "Juliet" "Friar Lawrence" "Nurse")<BR/>
<PROMPT/>Romeo and Juliet went out with 2 chaperones.</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>fn</CODEROUTINE> defines an anonymous function.
<CODESAMPLE>(fn [x] (* x x))</CODESAMPLE>
<CODESAMPLE>((fn [x] (* x x)) 10)</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>defn</CODEROUTINE> is just syntaxic sugar around <CODEROUTINE>def</CODEROUTINE> and <CODEROUTINE>fn</CODEROUTINE>
<CODESAMPLE>(def square (fn [x] (* x x)))</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>#(…)</CODEROUTINE> is shorthand for <CODEROUTINE>(fn [arg1 arg2 …] (…))</CODEROUTINE>(where the number of <CODEROUTINE>argN</CODEROUTINE> depends on how many <CODEROUTINE>%N</CODEROUTINE> you have in the body).</ITEM>
<ITEM><CODESAMPLE>(#(+ %1 %2 %3) 2 4 6)</CODESAMPLE>
is equivalent to
<CODESAMPLE>((fn [a b c] (+ a b c)) 2 4 6)</CODESAMPLE></ITEM>
<ITEM>to use it for writing <CODEROUTINE>((fn [x] [1 2 x]) 6)</CODEROUTINE>:<BR/>
<CODEROUTINE>(#([1 2 %]) 6)</CODEROUTINE> becomes <CODEROUTINE>((fn [arg] ([1 2 arg])) 6)</CODEROUTINE> and will not work.<BR/>
<CODEROUTINE>(#(identity [1 2 %]) 6)</CODEROUTINE> or <CODEROUTINE>(#(-> [1 2 %]) 6)</CODEROUTINE> will do the trick.</ITEM>
<ITEM>A <I>higher order function</I> is a function that takes another function as an argument.<BR/>
<CODEROUTINE>map</CODEROUTINE> is a higher order function.</ITEM>
<ITEM><CODEROUTINE>memoize</CODEROUTINE> returns a memoized version of a function
<CODESAMPLE>(memoize f)</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>trampoline</CODEROUTINE> can be used to convert algorithms requiring mutual recursion without stack consumption. Calls <CODEROUTINE>f</CODEROUTINE> with supplied arguments, if any. If <CODEROUTINE>f</CODEROUTINE> returns a fonction, calls that function with no arguments, and continues to repeat, until the return value is not a functionn, then returns that non-function value. Note that if you want to return a function as a final value, you must wrap it in some data structure and unpack it after <CODEROUTINE>trampoline</CODEROUTINE> returns.
<CODESAMPLE>(trampoline f)</CODESAMPLE>
<CODESAMPLE>(trampoline f &amp; args)</CODESAMPLE></ITEM>
</BLIST>
<BLIST><TITLE><U><B>Libraries</B></U></TITLE>
<ITEM>When you require a library named <CODEROUTINE>foo.bar.quux</CODEROUTINE>, Clojure looks for a file named <CODEROUTINE>foo/bar/quux.clj</CODEROUTINE> on the <CODEROUTINE>CLASSPATH</CODEROUTINE>.
<CODESAMPLE>(require 'foo.bar.quux)<BR/>
<PROMPT/>nil<BR/>
(take 10 foo.bar.quux/fibs)<BR/>
<PROMPT/>(0 1 1 2 3 5 8 13 21 34)</CODESAMPLE></ITEM>
<ITEM>Fully qualified names get old quickly. You can refer a namespace, creating mappings for all its names in your current namespace
<CODESAMPLE>(require 'foo.bar.quux)<BR/>
<PROMPT/>nil<BR/>
(refer 'foo.bar.quux)<BR/>
<PROMPT/>nil<BR/>
(take 10 fibs)<BR/>
<PROMPT/>(0 1 1 2 3 5 8 13 21 34)</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>use</CODEROUTINE> performs <CODEROUTINE>require</CODEROUTINE> and <CODEROUTINE>refer</CODEROUTINE> in a single step
<CODESAMPLE>(use 'foo.bar.quux)<BR/>
<PROMPT/>nil<BR/>
 (take 10 fibs)<BR/>
<PROMPT/>(0 1 1 2 3 5 8 13 21 34)</CODESAMPLE></ITEM>
<ITEM><CODEROUTINE>:reload</CODEROUTINE> flag forces a library to reload
<CODESAMPLE>(use :reload 'foo.bar.quux)</CODESAMPLE></ITEM>
</BLIST>
<CODEROUTINE>(not x)</CODEROUTINE> returns <CODEROUTINE>true</CODEROUTINE> if x is logical false, <CODEROUTINE>false</CODEROUTINE> otherwise.<BR/>
<CODEROUTINE>(or)</CODEROUTINE><CODEROUTINE>(or x)</CODEROUTINE><CODEROUTINE>(or x &amp; next)</CODEROUTINE> evaluates expressions one at a time, from left to right. If a form returns a logical true value, <CODEROUTINE>or</CODEROUTINE> returns that value and doesn't
evaluate any of the other expressions, otherwise it returns the value of the last expression. <CODEROUTINE>(or)</CODEROUTINE> returns <CODEROUTINE>nil</CODEROUTINE>.<BR/>
<CODEROUTINE>(and)</CODEROUTINE><CODEROUTINE>(and x)</CODEROUTINE><CODEROUTINE>(and x &amp; next)</CODEROUTINE> evaluates expressions one at a time, from left to right. If a form returns logical false (<CODEROUTINE>nil</CODEROUTINE> or <CODEROUTINE>false</CODEROUTINE>), <CODEROUTINE>and</CODEROUTINE> returns that value and doesn't evaluate any of the other expressions, otherwise it returns the value of the last expression. <CODEROUTINE>(and)</CODEROUTINE> returns <CODEROUTINE>true</CODEROUTINE>.<BR/>
<CODEROUTINE>(= x)</CODEROUTINE><CODEROUTINE>(= x y)</CODEROUTINE><CODEROUTINE>(= x y &amp; more)</CODEROUTINE> returns true if x equals y, false if not.<BR/>
<CODEROUTINE>(not= x)</CODEROUTINE><CODEROUTINE>(not= x y)</CODEROUTINE><CODEROUTINE>(not= x y &amp; more)</CODEROUTINE> returns the same as <CODEROUTINE>(not (= obj1 obj2))</CODEROUTINE>.<BR/>
<CODEROUTINE>(first coll)</CODEROUTINE> returns the first item in the collection. Calls <CODEROUTINE>seq</CODEROUTINE> on its argument. If coll is <CODEROUTINE>nil</CODEROUTINE>, returns <CODEROUTINE>nil</CODEROUTINE>.<BR/>
<CODEROUTINE>(rest coll)</CODEROUTINE> returns a possibly empty seq of the items after the first. Calls <CODEROUTINE>seq</CODEROUTINE> on its argument.<BR/>
<CODEROUTINE>(cons x seq)</CODEROUTINE> returns a new seq where x is the first element and seq is the rest.<BR/>
</CONTENT>
<X><T>links</T><A>../links/lisp.html#clojure</A><L>en</L><F>HTML</F></X>
</PAGE>
