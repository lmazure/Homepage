<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Docker</TITLE>
<PATH>notes/docker.xml</PATH>
<DATE><YEAR>2024</YEAR><MONTH>5</MONTH><DAY>22</DAY></DATE>
<CONTENT>
<LLIST>
<ITEM>Docker<BR/>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker run &lt;image&gt; &lt;command&gt;</CODEROUTINE></TERM>
    <DESC>Create a writeable container layer over the specified image, and then starts it using the specified command.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--rm</CODEROUTINE></TERM>
    <DESC>Automatically remove the container when it exits.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-t</CODEROUTINE><BR/>
      <CODEROUTINE>--tty</CODEROUTINE></TERM>
    <DESC>Allocate a pseudo-TTY.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-i</CODEROUTINE><BR/>
      <CODEROUTINE>--interactive</CODEROUTINE></TERM>
    <DESC>Keep STDIN open even if not attached.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-d</CODEROUTINE><BR/>
      <CODEROUTINE>--detached</CODEROUTINE></TERM>
    <DESC>Run container in background and print container ID.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--restart=always</CODEROUTINE></TERM>
    <DESC>Always restart the container regardless of the exit status.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--name &lt;name&gt;</CODEROUTINE></TERM>
    <DESC>Assign a name to the container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-p 80:5000</CODEROUTINE><BR/>
      <CODEROUTINE>--publish 80:5000</CODEROUTINE></TERM>
    <DESC>Map port 80 of the host to port 5000 of the container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-e &lt;myvar&gt;=&lt;value&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>-env &lt;myvar&gt;=&lt;value&gt;</CODEROUTINE></TERM>
    <DESC>Set an environment variable in the container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-e &lt;myvar&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>-env &lt;myvar&gt;</CODEROUTINE></TERM>
    <DESC>Set an environment variable with its value which is already defined in the local environment in the container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--env-file &lt;file&gt;</CODEROUTINE></TERM>
    <DESC>Read in a file of environment variables.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--link &lt;name or id&gt;:alias</CODEROUTINE></TERM>
    <DESC>Create a link between the newly started container and a running one.<BR/>
      It is possible to use <CODEROUTINE>--link &lt;name or id&gt;</CODEROUTINE>, in which case the alias will be the name of the other container.<BR/>
      This will add an entry in the <CODEFILENAME>/etc/hosts</CODEFILENAME> of the started container with an IP address for the alias, name, and id of the existing linked container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--volume &lt;hostdirectory&gt;:&lt;containerdirectory&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>-v &lt;hostdirectory&gt;:&lt;containerdirectory&gt;</CODEROUTINE></TERM>
    <DESC>Mount <CODEROUTINE>&lt;hostdirectory&gt;</CODEROUTINE> as <CODEROUTINE>&lt;imagedirectory&gt;</CODEROUTINE> in the container. If <CODEROUTINE>&lt;hostdirectory&gt;</CODEROUTINE> does not exist, it will be created.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker load</CODEROUTINE></TERM>
    <DESC>Load an image or repository from a tar archive (optionally compressed with gzip, bzip2, or xz) from stdin.<BR/>
      <CODEROUTINE>docker load &lt; busybox.tar.gz</CODEROUTINE></DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-i</CODEROUTINE><BR/>
      <CODEROUTINE>--input</CODEROUTINE></TERM>
    <DESC>Read from a file instead of stdin.<BR/>
      <CODEROUTINE>docker load --input busybox.tar.gz</CODEROUTINE></DESC>
  </ROW>
</DEFINITIONTABLE><BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker start &lt;container&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker container start &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Start a stopped container<BR/>
      (it is possible to have several container names, e.g. <CODEROUTINE>docker start &lt;container1&gt; &lt;container2&gt; &lt;container3&gt;</CODEROUTINE>).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-i</CODEROUTINE><BR/>
      <CODEROUTINE>--interactive</CODEROUTINE></TERM>
    <DESC>Attach containerâ€™s STDIN.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-a</CODEROUTINE><BR/>
      <CODEROUTINE>--attach</CODEROUTINE></TERM>
      <DESC>Attach STDOUT/STDERR and forward signals.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker stop &lt;container&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker container stop &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Stop the container <CODEROUTINE>&lt;container&gt;</CODEROUTINE> (it is possible to have several container names <CODEROUTINE>docker stop &lt;container1&gt; &lt;container2&gt; &lt;container3&gt;</CODEROUTINE>).<BR/>
      The main process inside the container will receive SIGTERM, and after a grace period (10 seconds by default), SIGKILL.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-t &lt;n&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>--time &lt;n&gt;</CODEROUTINE></TERM>
    <DESC>Seconds to wait for stop before sending SIGKILL.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker stop $(docker ps -q)</CODEROUTINE></TERM>
    <DESC>Stop all containers.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker kill &lt;container&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker container kill &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Send a <CODEROUTINE>SIGKILL</CODEROUTINE> signal to the main process in the container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-s &lt;signal&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>--signal &lt;signal&gt;</CODEROUTINE></TERM>
    <DESC>Define the signal to send (e.g. <CODEROUTINE>docker kill --signal=SIGHUP mycontainer</CODEROUTINE>).</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker restart &lt;container&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker container restart &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Restart the container.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker rm &lt;container&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker container rm &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Remove the container &lt;container&gt;.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker exec &lt;container&gt; &lt;command&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker container exec &lt;container&gt; &lt;command&gt;</CODEROUTINE></TERM>
    <DESC>Execute a command in a container (e.g. <CODEROUTINE>docker exec mycontainer cat /etc/hosts</CODEROUTINE>.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker exec -i &lt;container&gt; sh</CODEROUTINE><BR/>
      <CODEROUTINE>docker exec --interactive &lt;container&gt; sh</CODEROUTINE></TERM>
    <DESC>Create an interactive shell in a container (add the <CODEROUTINE>-t</CODEROUTINE> flag, otherwise there is no prompt).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker exec -t</CODEROUTINE><BR/>
      <CODEROUTINE>docker exec --tty</CODEROUTINE></TERM>
    <DESC>Allocate a pseudo-TTY.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker ps</CODEROUTINE><BR/>
      <CODEROUTINE>docker container ls</CODEROUTINE><BR/>
      <CODEROUTINE>docker container list</CODEROUTINE><BR/>
      <CODEROUTINE>docker container ps</CODEROUTINE></TERM>
    <DESC>List the running containers.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-a</CODEROUTINE><BR/>
      <CODEROUTINE>--all</CODEROUTINE></TERM>
    <DESC>List all containers (running or not).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-q</CODEROUTINE><BR/>
      <CODEROUTINE>--quiet</CODEROUTINE></TERM>
    <DESC>Only display container IDs.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-s</CODEROUTINE><BR/>
      <CODEROUTINE>--size</CODEROUTINE></TERM>
    <DESC>Display total file sizes.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker inspect &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Return low-level information about a container.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker volume ls</CODEROUTINE></TERM>
    <DESC>List all Docker volumes.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker volume create &lt;volume&gt;</CODEROUTINE></TERM>
    <DESC>Create volume &lt;volume&gt;.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker volume rm &lt;volume&gt;</CODEROUTINE></TERM>
    <DESC>Delete volume &lt;volume&gt;.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker volume prune</CODEROUTINE></TERM>
    <DESC>Remove all unused local volumes (i.e volumes which are not referenced by any containers).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker volume inspect &lt;volume&gt;</CODEROUTINE></TERM>
    <DESC>Return information about volume &lt;volume&gt;.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker network ls</CODEROUTINE></TERM>
    <DESC>List the networks.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker network create &lt;network&gt;</CODEROUTINE></TERM>
    <DESC>Create network &lt;network&gt;.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker network rm &lt;network&gt;</CODEROUTINE></TERM>
    <DESC>Delete network &lt;network&gt;.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker network prune</CODEROUTINE></TERM>
    <DESC>Remove all unused local network (i.e network which are not referenced by any containers).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker network inspect &lt;network&gt;</CODEROUTINE></TERM>
    <DESC>Return information about network &lt;network&gt;.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker logs &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Display the logs of a container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-f</CODEROUTINE><BR/>
      <CODEROUTINE>--follow</CODEROUTINE></TERM>
    <DESC>Keep following the logs.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-t</CODEROUTINE><BR/>
      <CODEROUTINE>--timestamps</CODEROUTINE></TERM>
    <DESC>Show timestamps.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--tail 200</CODEROUTINE><BR/>
      <CODEROUTINE>-n 200</CODEROUTINE></TERM>
    <DESC>Display the 200 last lines.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--since 10m</CODEROUTINE></TERM>
    <DESC>Display the logs of the last 10 minutes (it is also possible to give a date <CODEROUTINE>2013-01-02T13:23:37Z</CODEROUTINE>).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--until 60m</CODEROUTINE></TERM>
    <DESC>Display the logs older than 60 minutes (it is also possible to give a date).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--details</CODEROUTINE></TERM>
    <DESC>Display more details.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
Unreferenced images are images not referenced by any container.<BR/>
Dangling images are layers that have no relationship to any tagged images.
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker images</CODEROUTINE><BR/>
      <CODEROUTINE>docker image ls</CODEROUTINE></TERM>
    <DESC>List the top level images.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-a</CODEROUTINE><BR/>
      <CODEROUTINE>--all</CODEROUTINE></TERM>
    <DESC>List all images (top level and intermediate).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-f dangling=true</CODEROUTINE></TERM>
    <DESC>List the dangling images.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker image rm &lt;image1&gt; &lt;image2&gt; â€¦</CODEROUTINE></TERM>
    <DESC>Remove some images.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker system prune</CODEROUTINE></TERM>
    <DESC>Remove all unused containers, networks, and images (both dangling and unreferenced).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-a</CODEROUTINE><BR/>
      <CODEROUTINE>--all</CODEROUTINE></TERM>
    <DESC>Remove all unused images not just dangling ones.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--volumes</CODEROUTINE></TERM>
    <DESC>Also prune volumes.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-f</CODEROUTINE><BR/>
      <CODEROUTINE>--force</CODEROUTINE></TERM>
    <DESC>Do not prompt for confirmation.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker cp foobar.txt quux:/opt/mydir</CODEROUTINE></TERM>
    <DESC>Copy the local file foobar.txt in the directory /opt/mydir of container quux.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker login -u &lt;login&gt; -p &lt;password&gt; &lt;server&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker login --username &lt;login&gt; --password &lt;password&gt; &lt;server&gt;</CODEROUTINE></TERM>
    <DESC>Log in to a Docker registry.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker logout &lt;server&gt;</CODEROUTINE></TERM>
    <DESC>Log out from a Docker registry.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<BLIST><TITLE>Notes</TITLE>
  <ITEM>To add something in an Alpine container
    <CODESAMPLE>
    docker exec -it â€“-user=root mycontainer /bin/sh<BR/>
    apk add curl rm -f /var/cache/apl/*
    </CODESAMPLE>
  </ITEM>
  <ITEM>On Windows and Mac, use <CODEROUTINE>host.docker.internal</CODEROUTINE> instead of <CODEROUTINE>localhost</CODEROUTINE> to refer to the host from inside a container
    (some information <X><T>here</T><A>https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach</A><L>en</L><F>HTML</F></X>).
  </ITEM>
</BLIST>
</ITEM>
<ITEM>Docker compose<BR/>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker-compose -f conf.yaml</CODEROUTINE></TERM>
    <DESC>Use the configuration file <CODEROUTINE>conf.yaml</CODEROUTINE></DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker-compose -f conf1.yaml -f conf2.yaml</CODEROUTINE></TERM>
    <DESC>Use the configuration file which is the concatenation of <CODEROUTINE>conf1.yaml</CODEROUTINE> and <CODEROUTINE>conf2.yaml</CODEROUTINE>.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker-compose up</CODEROUTINE></TERM>
    <DESC>Create and start containers.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-d</CODEROUTINE><BR/>
      <CODEROUTINE>--detach</CODEROUTINE></TERM>
    <DESC>Detached mode: Run containers in the background.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker-compose start</CODEROUTINE></TERM>
    <DESC>Starts existing containers for a service.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker-compose stop</CODEROUTINE></TERM>
    <DESC>Stops running containers without removing them. They can be started again with <CODEROUTINE>docker compose start</CODEROUTINE>.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker-compose down</CODEROUTINE></TERM>
    <DESC>Stop and remove containers and networks.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker-compose ps</CODEROUTINE></TERM>
    <DESC>List containers.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--service</CODEROUTINE></TERM>
    <DESC>Display services.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker-compose logs &lt;service&gt;</CODEROUTINE></TERM>
    <DESC>View output from containers. It is possible to specify no or several services.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-f</CODEROUTINE><BR/>
      <CODEROUTINE>--follow</CODEROUTINE></TERM>
    <DESC>Keep following the logs.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--tail 200</CODEROUTINE><BR/>
      <CODEROUTINE>-n 200</CODEROUTINE></TERM>
    <DESC>Display the 200 last lines.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
Docker compose will look for an <CODEFILENAME>.env</CODEFILENAME> file to define environment variables in the containers.
<BR/>
<BR/>
Analyse a Docker image with Trivy:<BR/>
<CODEROUTINE>docker run -v /tmp/trivy/Caches:/root/.cache/ aquasec/trivy:0.51.2 image squashtest/squash-tm:6.1.0 &gt; log_6.1.0.txt</CODEROUTINE>
</ITEM>
</LLIST>
</CONTENT>
<X><T>links</T><A>../links/operations.html#docker</A><L>en</L><F>HTML</F></X>
</PAGE>