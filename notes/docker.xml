<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Docker</TITLE>
<PATH>notes/docker.xml</PATH>
<DATE><YEAR>2021</YEAR><MONTH>6</MONTH><DAY>18</DAY></DATE>
<CONTENT>
  <DEFINITIONTABLE>
    <ROW>
      <TERM><CODEROUTINE>docker run &lt;image&gt; &lt;command&gt;</CODEROUTINE></TERM>
      <DESC>Create a writeable container layer over the specified image, and then starts it using the specified command.</DESC>
    </ROW>
    <ROW>
      <TERM><CODEROUTINE>docker run --rm</CODEROUTINE></TERM>
      <DESC>Automatically remove the container when it exits.</DESC>
    </ROW>
    <ROW>
      <TERM><CODEROUTINE>docker run --tty</CODEROUTINE><BR/>
        <CODEROUTINE>docker run -t</CODEROUTINE></TERM>
      <DESC>Allocate a pseudo-TTY.</DESC>
    </ROW>
    <ROW>
      <TERM><CODEROUTINE>docker run --interactive</CODEROUTINE><BR/>
        <CODEROUTINE>docker run -i</CODEROUTINE></TERM>
      <DESC>Keep STDIN open even if not attached.</DESC>
    </ROW>
    <ROW>
      <TERM><CODEROUTINE>docker run --detached</CODEROUTINE><BR/>
        <CODEROUTINE>docker run -d</CODEROUTINE></TERM>
      <DESC>Run container in background and print container ID.</DESC>
    </ROW>
    <ROW>
      <TERM><CODEROUTINE>docker run --restart=always</CODEROUTINE></TERM>
      <DESC>Always restart the container regardless of the exit status.</DESC>
    </ROW>
    <ROW>
      <TERM><CODEROUTINE>docker run --name &lt;name&gt;</CODEROUTINE></TERM>
      <DESC>Assign a name to the container.</DESC>
    </ROW>
    <ROW>
      <TERM><CODEROUTINE>docker run --volume &lt;hostdirectory&gt;:&lt;containerdirectory&gt;</CODEROUTINE><BR/>
        <CODEROUTINE>docker run -v &lt;hostdirectory&gt;:&lt;containerdirectory&gt;</CODEROUTINE></TERM>
      <DESC>Mount &lt;hostdirectory&gt; as &lt;imagedirectory&gt; in the container. If &lt;hostdirectory&gt; does not exist, it will be created.</DESC>
    </ROW>
  </DEFINITIONTABLE>
  <BR/>
  <DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker stop &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Stop the container &lt;container&gt;.<BR/>
      The main process inside the container will receive SIGTERM, and after a grace period, SIGKILL.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker rm &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Remove the container &lt;container&gt;.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker ps</CODEROUTINE><BR/>
      <CODEROUTINE>docker container ls</CODEROUTINE></TERM>
    <DESC>List the running containers.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker ps --all</CODEROUTINE><BR/>
      <CODEROUTINE>docker ps -a</CODEROUTINE><BR/>
      <CODEROUTINE>docker container ls --all</CODEROUTINE><BR/>
      <CODEROUTINE>docker container ls -a</CODEROUTINE></TERM>
    <DESC>List all containers (running or not).</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker logs &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Display the logs of a container.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker logs -f &lt;container&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker logs --follow &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Keep following the logs.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker logs -t &lt;container&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>docker logs --timestamps &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Show timestamps.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker logs --since 10m &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Display the logs of the last 10 minutes (it is also possible to give a date <CODEROUTINE>2013-01-02T13:23:37Z</CODEROUTINE>).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker logs --until 60m &lt;container&gt;</CODEROUTINE></TERM>
    <DESC>Display the logs older than 60 minutes (it is also possible to give a date).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker logs --details</CODEROUTINE></TERM>
    <DESC>Display more details.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
Unreferenced images are images not referenced by any container.<BR/>
Dangling images are layers that have no relationship to any tagged images.
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker images</CODEROUTINE></TERM>
    <DESC>List the top level images.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker images --all</CODEROUTINE><BR/>
      <CODEROUTINE>docker images -a</CODEROUTINE></TERM>
    <DESC>List all images (top level and intermediate).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker images -f dangling=true</CODEROUTINE></TERM>
    <DESC>List the dangling images.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>docker system prune</CODEROUTINE></TERM>
    <DESC>Remove all unused containers, networks, and images (both dangling and unreferenced).</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker system prune --all</CODEROUTINE><BR/>
      <CODEROUTINE>docker system prune -a</CODEROUTINE></TERM>
    <DESC>Remove all unused images not just dangling ones.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker system prune --volumes</CODEROUTINE></TERM>
    <DESC>Also prune volumes.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>docker system prune --force</CODEROUTINE><BR/>
      <CODEROUTINE>docker system prune -f</CODEROUTINE></TERM>
    <DESC>Do not prompt for confirmation.</DESC>
  </ROW>
</DEFINITIONTABLE>
</CONTENT>
<X><T>links</T><A>../links/operations.html#docker</A><L>en</L><F>HTML</F></X>
</PAGE>