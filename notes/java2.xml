<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Java</TITLE>
<PATH>notes/java2.xml</PATH>
<DATE><YEAR>2020</YEAR><MONTH>2</MONTH><DAY>26</DAY></DATE>
<CONTENT>
for-each loops can be used on a <CODEROUTINE>Collection</CODEROUTINE> or on an array
<CODESAMPLE>final private Vector&lt;PhotoListMetaDataListener&gt; a_listOfMetaDataListeners;<BR/>
…<BR/>
for (PhotoListMetaDataListener l : a_listOfMetaDataListeners) l.photoListMetaDataChanged(f);</CODESAMPLE>
is the same as
<CODESAMPLE>final private Vector&lt;PhotoListMetaDataListener&gt; a_listOfMetaDataListeners;<BR/>
…<BR/>
for (int i = 0; i &lt; a_listOfMetaDataListeners.size(); i++) a_listOfMetaDataListeners.get(i).photoListMetaDataChanged(f);</CODESAMPLE>
<BR/>
<BLIST><TITLE><U><B>Autoboxing</B></U></TITLE>
  <ITEM>Autoboxing allows to use an <CODEROUTINE>int</CODEROUTINE> in place of an <CODEROUTINE>Integer</CODEROUTINE> and vice-versa.<BR/>
    Supported types are: <CODEROUTINE>Boolean</CODEROUTINE>, <CODEROUTINE>Byte</CODEROUTINE>, <CODEROUTINE>Character</CODEROUTINE>, <CODEROUTINE>Short</CODEROUTINE>, <CODEROUTINE>Integer</CODEROUTINE>, <CODEROUTINE>Long</CODEROUTINE>, <CODEROUTINE>Float</CODEROUTINE>, and <CODEROUTINE>Double</CODEROUTINE>.<BR/>
    If the program tries to autounbox <CODEROUTINE>null</CODEROUTINE>, it will throw a <CODEROUTINE>NullPointerException</CODEROUTINE>.<BR/>
    The <CODEROUTINE>==</CODEROUTINE> operator performs reference identity comparisons on <CODEROUTINE>Integer</CODEROUTINE> expressions and value equality comparisons on <CODEROUTINE>int</CODEROUTINE> expressions.<BR/>
    The performance costs associated with boxing and unboxing must not be forgotten.
  </ITEM>
</BLIST>
<U><B>Static Import</B></U><BR/>
The static import construct allows unqualified access to static members without inheriting from the type containing the static members. Instead, the program imports the members, either individually:
<CODESAMPLE>import static java.lang.Math.PI;<BR/>
import static java.lang.Math.cos;</CODESAMPLE>
or en masse:
<CODESAMPLE>import static java.lang.Math.*;</CODESAMPLE>
Once the static members have been imported, they may be used without qualification:
<CODESAMPLE>double r = cos(PI * theta);</CODESAMPLE>
(instead of
<CODESAMPLE>double r = Math.cos(Math.PI * theta);</CODESAMPLE>
)<BR/>
This should be used sparingly since it pollutes the namespace of the class.<BR/>
<BR/>
<BLIST><TITLE><U><B>Strings</B></U></TITLE>
  <ITEM><CODEROUTINE>String</CODEROUTINE>: immutable sequence of characters</ITEM>
  <ITEM><CODEROUTINE>StringBuffer</CODEROUTINE>: thread-safe, mutable sequence of characters (Java 1.0)</ITEM>
  <ITEM><CODEROUTINE>StringBuilder</CODEROUTINE>: non thread-safe, mutable sequence of characters, faster than <CODEROUTINE>StringBuffer</CODEROUTINE> (Java 1.5)</ITEM>
</BLIST>
<BLIST><TITLE><U><B>Modifiers</B></U></TITLE>
<ITEM><NLIST><TITLE>The Java Language Specification suggests ordering the modifiers as:</TITLE>
  <ITEM>public / protected / private</ITEM>
  <ITEM>abstract</ITEM>
  <ITEM>default</ITEM>
  <ITEM>static</ITEM>
  <ITEM>final</ITEM>
  <ITEM>transient / volatile</ITEM>
  <ITEM>synchronized</ITEM>
  <ITEM>native</ITEM>
  <ITEM>strictfp</ITEM>
</NLIST></ITEM>
<ITEM><CODEROUTINE>strictfp</CODEROUTINE><BR/>
<CODEROUTINE>strictfp</CODEROUTINE> is a keyword to force Java to store intermediary results in floating point calculation using IEEE 754 (instead of a possible greater precision provided by the machine).</ITEM>
</BLIST>
<BLIST><TITLE><U><B>JUnit</B></U><BR/></TITLE>
  <ITEM>to create a test suite as a list of test classes:
    <CODESAMPLE>
    package data.internet.test;<BR/>
    <BR/>
    import org.junit.platform.runner.JUnitPlatform;<BR/>
    import org.junit.platform.suite.api.SelectClasses;<BR/>
    import org.junit.runner.RunWith;<BR/>
    <BR/>
    @RunWith(JUnitPlatform.class)<BR/>
    @SelectClasses({SynchronousSiteDataRetrieverTest.class,<BR/>
    <TAB/>AsynchronousSiteDataRetrieverTest.class,<BR/>
    <TAB/>CachedSiteDataRetrieverTest.class})<BR/>
    public class AllSiteRetrieverTests {<BR/>
    }</CODESAMPLE>
  </ITEM>
  <ITEM>to create a test suite as a list of test packages:
    <CODESAMPLE>
    package test;<BR/>
    <BR/>
    import org.junit.platform.runner.JUnitPlatform;<BR/>
    import org.junit.platform.suite.api.SelectPackages;<BR/>
    import org.junit.runner.RunWith;<BR/>
    <BR/>
    @RunWith(JUnitPlatform.class)<BR/>
    @SelectPackages({"data.internet.test",<BR/>
    <TAB/>"data.jsongenerator.test",<BR/>
    <TAB/>"data.test"})<BR/>
    public class AllTests {<BR/>
    }</CODESAMPLE>
    but this is in fact a JUnit 4 test suite.<BR/>
    Test suites do not exist in JUnit 5, see <X><T>here</T><A>https://bugs.eclipse.org/bugs/show_bug.cgi?id=511183</A><L>en</L><F>HTML</F></X>
  </ITEM>
  </BLIST>
</CONTENT>
</PAGE>