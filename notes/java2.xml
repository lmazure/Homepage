<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Java</TITLE>
<PATH>notes/java2.xml</PATH>
<DATE><YEAR>2010</YEAR><MONTH>11</MONTH><DAY>2</DAY></DATE>
<CONTENT>

for-each loops can be used on a <CODEROUTINE>Collection</CODEROUTINE> or on an array
<CODESAMPLE>final private Vector&lt;PhotoListMetaDataListener&gt; a_listOfMetaDataListeners;<BR/>
&#x2026;<BR/>
for (PhotoListMetaDataListener l : a_listOfMetaDataListeners) l.photoListMetaDataChanged(f);</CODESAMPLE>
is the same as
<CODESAMPLE>final private Vector&lt;PhotoListMetaDataListener&gt; a_listOfMetaDataListeners;<BR/>
&#x2026;<BR/>
for (int i=0; i&lt;a_listOfMetaDataListeners.size(); i++) a_listOfMetaDataListeners.get(i).photoListMetaDataChanged(f);</CODESAMPLE>
<BR/>

<U><B>Autoboxing</B></U><BR/>
Autoboxing allows to use an <CODEROUTINE>int</CODEROUTINE> in place of an <CODEROUTINE>Integer</CODEROUTINE> and vice-versa.<BR/>
Supported types are: <CODEROUTINE>Boolean</CODEROUTINE>, <CODEROUTINE>Byte</CODEROUTINE>, <CODEROUTINE>Character</CODEROUTINE>, <CODEROUTINE>Short</CODEROUTINE>, <CODEROUTINE>Integer</CODEROUTINE>, <CODEROUTINE>Long</CODEROUTINE>, <CODEROUTINE>Float</CODEROUTINE>, and <CODEROUTINE>Double</CODEROUTINE>.<BR/>
If the program tries to autounbox <CODEROUTINE>null</CODEROUTINE>, it will throw a <CODEROUTINE>NullPointerException</CODEROUTINE>.<BR/>
The <CODEROUTINE>==</CODEROUTINE> operator performs reference identity comparisons on <CODEROUTINE>Integer</CODEROUTINE> expressions and value equality comparisons on <CODEROUTINE>int</CODEROUTINE> expressions.<BR/>
The performance costs associated with boxing and unboxing must not be forgotten.<BR/>
<BR/>

<U><B>Static Import</B></U><BR/>
The static import construct allows unqualified access to static members without inheriting from the type containing the static members. Instead, the program imports the members, either individually:
<CODESAMPLE>import static java.lang.Math.PI;<BR/>
import static java.lang.Math.cos;</CODESAMPLE>
or en masse:
<CODESAMPLE>import static java.lang.Math.*;</CODESAMPLE>
Once the static members have been imported, they may be used without qualification:
<CODESAMPLE>double r = cos(PI * theta);</CODESAMPLE>
(instead of
<CODESAMPLE>double r = Math.cos(Math.PI * theta);</CODESAMPLE>
)<BR/>
This should be used sparingly since it pollutes the namespace of the class.<BR/>
<BR/>


<U><B>Strings</B></U><BR/>
<SLIST>
<ITEM><CODEROUTINE>String</CODEROUTINE>: immutable sequence of characters</ITEM>
<ITEM><CODEROUTINE>StringBuffer</CODEROUTINE>: thread-safe, mutable sequence of characters</ITEM>
<ITEM><CODEROUTINE>StringBuilder</CODEROUTINE>: non thread-safe, mutable sequence of characters, faster than <CODEROUTINE>StringBuffer</CODEROUTINE></ITEM>
</SLIST>
<BR/>

<U><B>Modifiers</B></U><BR/>
<NLIST><TITLE>The Java Language Specification suggests ordering the modifiers as:</TITLE>
<ITEM>public</ITEM>
<ITEM>protected</ITEM>
<ITEM>private</ITEM>
<ITEM>abstract</ITEM>
<ITEM>static</ITEM>
<ITEM>final</ITEM>
<ITEM>transient</ITEM>
<ITEM>volatile</ITEM>
<ITEM>synchronized</ITEM>
<ITEM>native</ITEM>
<ITEM>strictfp</ITEM>
</NLIST>
<CODEROUTINE>strictfp</CODEROUTINE><BR/>
<CODEROUTINE>strictfp</CODEROUTINE> is a keyword to force Java to store intermediary results in floating point calculation using IEEE 754 (instead of a possible greater precision provided by the machine).<BR/>

</CONTENT>
</PAGE>

