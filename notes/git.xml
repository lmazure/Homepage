<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd">
<TITLE>Git</TITLE>
<PATH>notes/git.xml</PATH>
<DATE><YEAR>2019</YEAR><MONTH>11</MONTH><DAY>23</DAY></DATE>
<CONTENT>
<BLIST><TITLE>Places</TITLE>
<ITEM>stash</ITEM>
<ITEM>workspace</ITEM>
<ITEM>index</ITEM>
<ITEM>local repository</ITEM>
<ITEM>upstream repository</ITEM>
</BLIST>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git --version</CODEROUTINE></TERM>
    <DESC>print the version of Git</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git init</CODEROUTINE></TERM>
    <DESC>create an empty local repository</DESC>
  </ROW>
  <ROW>
    <TERM><CODESAMPLE>mkdir projet.git<BR/>cd projet.git<BR/>git --bare init</CODESAMPLE></TERM>
    <DESC>create an empty server repository</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git clone &lt;bare repository directory&gt;</CODEROUTINE></TERM>
    <DESC>create a repository which is the clone of a bare repository</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git clone &lt;bare repository directory&gt; &lt;my directory name&gt;</CODEROUTINE></TERM>
    <DESC>create a repository with name &lt;my directory name&gt; which is the clone of a bare repository (if &lt;my directory name&gt; is not specified, the name of the remote repository is used)</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git clone --bare &lt;path to directory containing .git&gt;</CODEROUTINE></TERM>
    <DESC>create a bare repository which is the clone of a repository</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git remote</CODEROUTINE></TERM>
    <DESC>list the upsteam and downstream repositories</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git remote -v</CODEROUTINE></TERM>
    <DESC>the same more verbose and with remote url after name</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git remote add &lt;remotename&gt; &lt;url&gt;</CODEROUTINE></TERM>
    <DESC>adds a remote named &lt;remotename&gt; for the repository at &lt;url&gt;</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git config --get remote.origin.url</CODEROUTINE></TERM>
    <DESC>display the URL the local repository has been cloned from</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git remote -v rm origin</CODEROUTINE></TERM>
    <DESC>remove the tracking of the remote "origin"</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git ls-files</CODEROUTINE></TERM>
    <DESC>list files which are in the workspace or in the index</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git ls-files -m</CODEROUTINE></TERM>
    <DESC>list modified files</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git ls-files -o</CODEROUTINE></TERM>
    <DESC>list files which are in the workspace and not in the index</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git add &lt;file&gt;</CODEROUTINE></TERM>
    <DESC>update &lt;file&gt; in the index using the current content found in the working tree</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git add .</CODEROUTINE></TERM>
    <DESC>update the content of the current directory in the index</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stage</CODEROUTINE></TERM>
    <DESC><CODEROUTINE>git stage</CODEROUTINE> is a synonym of <CODEROUTINE>git add</CODEROUTINE></DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git rm &lt;file&gt;</CODEROUTINE></TERM>
    <DESC>remove &lt;file&gt; from the index, or from the working tree and the index</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git commit -m &lt;msg&gt;</CODEROUTINE></TERM>
    <DESC>store the current contents of the index in a new commit along with message &lt;msg&gt;</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-a</CODEROUTINE></TERM>
    <DESC>automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--amend</CODEROUTINE></TERM>
    <DESC>replace the tip of the current branch by creating a new commit</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--amend -m "an updated commit message"</CODEROUTINE></TERM>
    <DESC>change the commit message</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--amend --reset-author</CODEROUTINE></TERM>
    <DESC>declare that the authorship of the new commit belongs to the committer</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--amend --author="John &lt;John@foo.bar&gt;"</CODEROUTINE></TERM>
    <DESC>declare that the authorship of the new commit belongs to the specified name/email.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git diff</CODEROUTINE></TERM>
    <DESC>display the differences between the workspace and the index</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git diff --cached</CODEROUTINE></TERM>
    <DESC>display the differences between the index and the local repository</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git diff --name-only</CODEROUTINE></TERM>
    <DESC>display only the filenames</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git status</CODEROUTINE></TERM>
    <DESC>
      <BLIST><TITLE>display</TITLE>
        <ITEM>paths that have differences between the index file and the current HEAD commit</ITEM>
        <ITEM>paths that have differences between the working tree and the index file, and</ITEM>
        <ITEM>paths in the working tree that are not tracked by Git</ITEM>
      </BLIST>
    </DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git stash</CODEROUTINE><BR/><CODEROUTINE>git stash push</CODEROUTINE></TERM>
    <DESC>save local modifications away and revert the working directory to match the HEAD commit (in the working tree and in the index)</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash push --message &lt;message&gt;</CODEROUTINE><BR/><CODEROUTINE>git stash push -m &lt;message&gt;</CODEROUTINE></TERM>
    <DESC>attach a description to the stashed state</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash push --keep-index</CODEROUTINE></TERM>
    <DESC>all changes already added to the index are left intact</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash push [--include-untracked|--all]</CODEROUTINE><BR/><CODEROUTINE>git stash -u</CODEROUTINE><BR/><CODEROUTINE>git stash -a</CODEROUTINE></TERM>
    <DESC><CODEROUTINE>--include-untracked</CODEROUTINE>, <CODEROUTINE>-u</CODEROUTINE>: all untracked files are also stashed and then cleaned up with <CODEROUTINE>git clean</CODEROUTINE><BR/><CODEROUTINE>--all</CODEROUTINE>, <CODEROUTINE>-a</CODEROUTINE>: the ignored files are stashed and cleaned in addition to the untracked files</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash list</CODEROUTINE></TERM>
    <DESC>list the stashed entries</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash apply [&lt;stash&gt;]</CODEROUTINE></TERM>
    <DESC>restore the entry &lt;stash&gt; (the last one if &lt;stash&gt; is not present)</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash apply --index [&lt;stash&gt;]</CODEROUTINE></TERM>
    <DESC>try to reinstate not only the working tree’s changes, but also the index’s ones</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash drop [&lt;stash&gt;]</CODEROUTINE></TERM>
    <DESC>remove the stash entry &lt;stash&gt; (the last one if &lt;stash&gt; is not present)</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash pop [--index] [&lt;stash&gt;]</CODEROUTINE></TERM>
    <DESC>apply and remove the stash entry &lt;stash&gt; (the last one if &lt;stash&gt; is not present)</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash branch &lt;branchname&gt; [&lt;stash&gt;]</CODEROUTINE></TERM>
    <DESC>create and check out a new branch &lt;branchname&gt; starting from the commit at which &lt;stash&gt; was created, apply the changes recorded in &lt;stash&gt; to the new working tree and index</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git stash clear</CODEROUTINE></TERM>
    <DESC>remove all stash entries</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git log</CODEROUTINE></TERM>
    <DESC>show commit logs</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-&lt;n&gt;</CODEROUTINE></TERM>
    <DESC>limits the log to the n last commits</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--committer=-&lt;email&gt;</CODEROUTINE></TERM>
    <DESC>filter on a given committer</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--pretty="%cI %s"</CODEROUTINE></TERM>
    <DESC>show the commit date and the commit subject</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--stat</CODEROUTINE></TERM>
    <DESC>indicates the modified files with a graph of the stats of the changes</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--shortstat</CODEROUTINE></TERM>
    <DESC>indicates the numbers of modified files, added and deleted lines</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-p</CODEROUTINE><BR/>
      <CODEROUTINE>--patch</CODEROUTINE></TERM>
    <DESC>show the code changes in each commit</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-U&lt;n&gt;</CODEROUTINE><BR/>
      <CODEROUTINE>--unified=&lt;n&gt;</CODEROUTINE></TERM>
    <DESC>generate diffs with n lines of context instead of the usual 3. Implies -p</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git show &lt;commit&gt;</CODEROUTINE></TERM>
    <DESC>show the log message and textual diff</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git show &lt;commit&gt;:&lt;file&gt;</CODEROUTINE></TERM>
    <DESC>display a given version of a file</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git reset &lt;commit&gt;</CODEROUTINE></TERM>
    <DESC>reset current HEAD to a previous commit<BR/>if no commit is specified, the current HEAD is used</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--soft</CODEROUTINE></TERM>
    <DESC>does not touch the index file or the working tree</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--mixed</CODEROUTINE></TERM>
    <DESC>resets the index but not the working tree<BR/>this is the default</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>--hard</CODEROUTINE></TERM>
    <DESC>resets the index and the working tree</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git reset --hard HEAD~2</CODEROUTINE></TERM>
    <DESC>delete the last two commits from the local repository</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git blame &lt;file&gt;</CODEROUTINE></TERM>
    <DESC>annotate each line of the file with information from the revision which last modified the line</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-M</CODEROUTINE></TERM>
    <DESC>detects moved or copied lines within a file</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-w</CODEROUTINE></TERM>
    <DESC>ignores whitespaces</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git fetch</CODEROUTINE></TERM>
    <DESC>download objects and refs from upstream repository into local repository.</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git pull</CODEROUTINE></TERM>
    <DESC>
      <BLIST><TITLE>incorporate changes of the remote repository into the current branch, it is the same as</TITLE>
        <ITEM><CODEROUTINE>git fetch</CODEROUTINE> scoped to the local branch that HEAD is pointed at</ITEM>
        <ITEM>followed by <CODEROUTINE>git merge FETCH_HEAD</CODEROUTINE>.</ITEM>
      </BLIST>
    </DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git pull --rebase</CODEROUTINE></TERM>
    <DESC>perform a rebase instead of a merge</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git push &lt;remotename&gt; &lt;branchname&gt;</CODEROUTINE></TERM>
    <DESC>push commits made on a local branch to a remote repository in the branch of same name.</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>-u</CODEROUTINE><BR/><CODEROUTINE>--set-upstream</CODEROUTINE></TERM>
    <DESC>for every branch that is up to date or successfully pushed, add upstream (tracking) reference</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/><DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git clean -f</CODEROUTINE></TERM>
    <DESC>recursively remove files that are not under version control</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git clean -f -d</CODEROUTINE></TERM>
    <DESC>recursively remove files and directories that are not under version control</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git clean -n</CODEROUTINE></TERM>
    <DESC>list the files that would be removed</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git clean -n - d</CODEROUTINE></TERM>
    <DESC>list the files and directories that would be removed</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git branch &lt;new branch&gt;</CODEROUTINE></TERM>
    <DESC>create a new branch</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git branch</CODEROUTINE></TERM>
    <DESC>list the branch, the current one is prefixed with <CODEROUTINE>*</CODEROUTINE></DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git checkout &lt;branch&gt;</CODEROUTINE></TERM>
    <DESC>switch to another branch</DESC>
  </ROW>
  <ROW>
    <TERM><CODEROUTINE>git merge &lt;branch&gt;</CODEROUTINE></TERM>
    <DESC>merge a branch in the workspace</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git gc</CODEROUTINE></TERM>
    <DESC>compress file revision and remove uneachable objects</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<DEFINITIONTABLE>
  <ROW>
    <TERM><CODEROUTINE>git --global --edit</CODEROUTINE></TERM>
    <DESC>open an editor to edit the global configuration file</DESC>
  </ROW>
</DEFINITIONTABLE>
<BR/>
<BLIST><TITLE>gitignore</TITLE>
  <ITEM>It is possible to ignore files/directories in a given directory by listing them in the <CODEFILENAME>.gitignore</CODEFILENAME> file of that directory.</ITEM>
</BLIST>
<BR/>
<BLIST><TITLE>Changing the author of old commits</TITLE>
  <ITEM><CODEROUTINE>git rebase -i &lt;commit&gt;</CODEROUTINE> where &lt;commit&gt; is the commit before the first one to be edited. Use <CODEROUTINE>git rebase -i --root</CODEROUTINE> if the first commit must be edited.</ITEM>
  <ITEM>In the list of commits, change <CODEROUTINE>pick</CODEROUTINE> to <CODEROUTINE>edit</CODEROUTINE> for the commits to be edited.</ITEM>
  <ITEM>When the interactive rebase pauses, <CODEROUTINE>git commit --amend --author="Author Name &lt;email@address.com&gt;"</CODEROUTINE>, then <CODEROUTINE>git rebase --continue</CODEROUTINE>.</ITEM>
  <ITEM><CODEROUTINE>git push -f</CODEROUTINE>.</ITEM>
</BLIST>
</CONTENT>
<X><T>links</T><A>../links/coding.html#git</A><L>en</L><F>HTML</F></X>
</PAGE>