<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../css/strict.xsl"?>
<PAGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../css/schema.xsd" xml:lang="en">
<TITLE>Robot Framework</TITLE>
<PATH>notes/robotframework.xml</PATH>
<DATE><YEAR>2023</YEAR><MONTH>8</MONTH><DAY>28</DAY></DATE>
<CONTENT>
Install Robot Framework
<CODESAMPLE>install robotframework</CODESAMPLE>
<BLIST>
  <ITEM>To also generate a Surefire report
    <CODESAMPLE><PROMPT/>robot -x foo.xml .</CODESAMPLE>
    or
    <CODESAMPLE><PROMPT/>robot --xunit foo.xml .</CODESAMPLE></ITEM>
  <ITEM>Declaring test setup and teardown in the settings
    <CODESAMPLE>*** Settings ***<BR/>
      Test Setup<TAB/>Log To Console<TAB/>test startup<BR/>
      Test Teardown<TAB/>Log To Console<TAB/>test shutdown</CODESAMPLE></ITEM>
  <ITEM>Retrieve the value of an environment variable:  <CODEROUTINE>%{ENV_VAR_NAME}</CODEROUTINE><BR/>
    Using the OperatingSystem library: <CODEROUTINE>Get Environment Variable<TAB/>ENV_VAR_NAME</CODEROUTINE><BR/>
    In botch cases, it is possible to define a default value: <CODEROUTINE>%{ENV_VAR_NAME=default_value}</CODEROUTINE> and  <CODEROUTINE>Get Environment Variable<TAB/>ENV_VAR_NAME<TAB/>default_value</CODEROUTINE></ITEM>
  <ITEM>Sleep for 42 seconds
    <CODESAMPLE>Sleep<TAB/>42</CODESAMPLE></ITEM>
  <ITEM>Loop on a list
    <CODESAMPLE>${root} =<TAB/>Parse XML<TAB/>${CURDIR}${/}surefire_report.xml<BR/>
      @{failure_elements} =<TAB/>Get Elements<TAB/>${root}<TAB/>.//testcase/*[.!='grep']<BR/>
      ${f} =<TAB/>Set Variable<TAB/>${EMPTY}<BR/>
      <B>FOR</B><TAB/>${failure}<TAB/><B>IN</B><TAB/>@{failure_elements}<BR/>
      <TAB/>${f} =<TAB/>Catenate<TAB/>SEPARATOR=\n<TAB/>${f}<TAB/>\ntype: ${failure.tag}\ndetails: ${failure.text}<BR/>
      <B>END</B></CODESAMPLE></ITEM>
  <ITEM>Get length of a list
    <CODESAMPLE>${root} =<TAB/>Parse XML<TAB/>${CURDIR}${/}surefire_report.xml<BR/>
      @{skipped_elements} =<TAB/>Get Elements<TAB/>${root}<TAB/>.//testcase/*[.='grep']<BR/>
      @{all_elements} =<TAB/>Get Elements<TAB/>${root}<TAB/>.//testcase<BR/>
      ${skipped_count} =<TAB/><B>Get length</B><TAB/>${skipped_elements}<BR/>
      ${total_count} =<TAB/><B>Get length</B><TAB/>${all_elements}<BR/>
      Should Not Be Equal As Integers<TAB/>${skipped_count}<TAB/>${total_count}<TAB/>All tests have been skipped</CODESAMPLE></ITEM>
  <ITEM>Running a test in an other technology and parsing the Surefire report
    <CODESAMPLE>*** Settings ***<BR/>
    Documentation<TAB/>Running an Intern test from Robot Framework<BR/>
      Library<TAB/>Process<BR/>
      Library<TAB/>XML<BR/>
      <BR/>
      *** Test Cases ***<BR/>
      Run Intern Test<BR/>
      <TAB/>Run Process<TAB/>npm.cmd<TAB/>test<BR/>
      <TAB/>@{elements} =<TAB/>Get Elements<TAB/>truc.xml<TAB/>.//failure<BR/>
      <TAB/>${f} =<TAB/>Set Variable<TAB/>Errors:<BR/>
      <TAB/>FOR<TAB/>${failure}<TAB/>IN<TAB/>@{elements}<BR/>
      <TAB/><TAB/>${f} =<TAB/>Catenate<TAB/>SEPARATOR=\n<TAB/>${f}<TAB/>${failure.text}<BR/>
      <TAB/>END<BR/>
      <TAB/>Should be empty<TAB/>${elements}<TAB/>An error has been found\n${f}</CODESAMPLE>
  </ITEM>
  <ITEM><BLIST><TITLE>Converting a test into json</TITLE>
    <ITEM>test sample (<CODEROUTINE>test.robot</CODEROUTINE>):
      <CODESAMPLE>*** Settings ***<BR/>
      Library<TAB/>DateTime<BR/>
      <BR/>
      <BR/>
      *** Test Cases ***<BR/>
      Simple Test Case<BR/>
      <TAB/>[Documentation]<TAB/>Shows some assertion keywords<BR/>
      <TAB/>Should Be Equal<TAB/>Text123<TAB/>Text123<BR/>
      <TAB/>Should Be True<TAB/>5 + 5 == 10<BR/>
      <BR/>
      Test for the year 2022<BR/>
      <TAB/>[Documentation]<TAB/>Tests if it is still 2022...<BR/>
      <TAB/>${date}=<TAB/>Get Current Date<TAB/>result_format=datetime<BR/>
      <TAB/>Log<TAB/>${date}<BR/>
      <TAB/>Should Be Equal As Strings<TAB/>${date.year}<TAB/>2022</CODESAMPLE>
    </ITEM>
    <ITEM>Python script to perform the conversion (<CODEROUTINE>convert.py</CODEROUTINE>):
      <CODESAMPLE>from robot.running import TestSuite<BR/>
        import sys<BR/>
        <BR/>
        suite = TestSuite.from_file_system(sys.argv[1])<BR/>
        suite.to_json(sys.argv[2])</CODESAMPLE>
    </ITEM>
    <ITEM>convert the file
      <CODESAMPLE><PROMPT/>python3 convert.py test.robot test.rbt</CODESAMPLE>
    </ITEM>
    <ITEM>run the test
      <CODESAMPLE><PROMPT/>robot test.rbt</CODESAMPLE>
    </ITEM>
  </BLIST></ITEM>
</BLIST>
<BLIST><TITLE><B><U>Tags</U></B></TITLE>
  <ITEM><BLIST><TITLE>Setting tags</TITLE>
    <ITEM><CODEROUTINE>Test Tags</CODEROUTINE> in the <CODEROUTINE>Setting</CODEROUTINE> section.<BR/>
      All tests in a test case file with this setting always get specified tags.</ITEM>
    <ITEM><CODEROUTINE>[Tags]</CODEROUTINE> with each test case.<BR/>
      Tests get these tags in addition to tags specified using the Test Tags setting.<BR/>
      It is possible to use a variable in a tag definition: <CODEROUTINE>[Tags]<TAB/>host: ${HOST}</CODEROUTINE>.</ITEM>
    <ITEM><CODEROUTINE>--settag</CODEROUTINE> command line option.<BR/>
      All tests get tags set with this option in addition to tags they got elsewhere.</ITEM>
    <ITEM><CODEROUTINE>Set Tags</CODEROUTINE> keyword.<BR/>
      Adds given tags for the current test or all tests in a suite.</ITEM>
    <ITEM><CODEROUTINE>Set Tags</CODEROUTINE> keyword.<BR/>
      Adds given tags for the current test or all tests in a suite.</ITEM>
    <ITEM><CODEROUTINE>Remove Tags</CODEROUTINE> keyword.<BR/>
      Removes given tags from the current test or all tests in a suite. Glob patterns can be used.</ITEM>
    <ITEM><CODEROUTINE>Fail</CODEROUTINE>, <CODEROUTINE>Pass Execution</CODEROUTINE>, and <CODEROUTINE>Pass Execution If</CODEROUTINE> keywords allow adding and removing tags at the end of a test execution.</ITEM>
    <ITEM><CODEROUTINE>Force Tags</CODEROUTINE> in the <CODEROUTINE>Setting</CODEROUTINE> section. Do not use, it is deprecated.<BR/>
      All tests unconditionally get these tags. This is exactly the same as Test Tags nowadays.</ITEM>
    <ITEM><CODEROUTINE>Default Tags</CODEROUTINE> in the <CODEROUTINE>Setting</CODEROUTINE> section. Do not use, it is deprecated.<BR/>
      All tests get these tags by default. If a test has <CODEROUTINE>[Tags]</CODEROUTINE>, it will not get these tags.</ITEM>
  </BLIST></ITEM>
  <ITEM><BLIST><TITLE>Selecting tests to run</TITLE>
    <ITEM>If the <CODEROUTINE>--include</CODEROUTINE> (or <CODEROUTINE>-i</CODEROUTINE>) option is used, only test cases having a matching tag are selected, and with the <CODEROUTINE>--exclude</CODEROUTINE> (or <CODEROUTINE>-e</CODEROUTINE>) option test cases having a matching tag are not. If both are used, only tests with a tag matching the former option, and not with a tag matching the latter.</ITEM>
    <ITEM>Both <CODEROUTINE>--include</CODEROUTINE> and <CODEROUTINE>--exclude</CODEROUTINE> can be used several times to match multiple tags. In that case a test is selected if it has a tag that matches any included tags, and also has no tag that matches any excluded tags.</ITEM>
    <ITEM>In addition to specifying a tag to match fully, it is possible to use tag patterns where <CODEROUTINE>*</CODEROUTINE> and <CODEROUTINE>?</CODEROUTINE> are wildcards and <CODEROUTINE>AND</CODEROUTINE>, <CODEROUTINE>&amp;</CODEROUTINE>, <CODEROUTINE>OR</CODEROUTINE>, and <CODEROUTINE>NOT</CODEROUTINE> operators can be used for combining individual tags or patterns together.</ITEM>
    <ITEM>Tag matching itself is case-insensitive.</ITEM>
  </BLIST></ITEM>
</BLIST>
<BLIST><TITLE><B><U>SeleniumLibrary</U></B></TITLE>
  <ITEM>Install SeleniumLibrary
    <CODESAMPLE>pip install robotframework-seleniumlibrary<BR/>
      pip install webdrivermanager<BR/>
      webdrivermanager firefox chrome --linkpath /c/Users/lmazure/bin</CODESAMPLE></ITEM>
  <ITEM>Example of Selenium script
    <CODESAMPLE>*** Settings ***<BR/>
      <TAB/>Documentation<TAB/>An example to discover Robot Framework<BR/>
      <TAB/>...<BR/>
      <TAB/>...<TAB/><TAB/><TAB/>&#160;&#160;Some smoke test of my homepage<BR/>
      Library<TAB/><TAB/>&#160;&#160;SeleniumLibrary<BR/>
      <BR/>
      *** Keywords ***<BR/>
      Click Map Link Node<BR/>
      <TAB/>[Arguments]<TAB/>${linkText}<BR/>
      <TAB/>Click Link<TAB/>xpath://A[text()='${linkText}']/following-sibling::A[1]<BR/>
      <BR/>
      Click Map Text Node<BR/>
      <TAB/>[Arguments]<TAB/>${nodeText}<BR/>
      <TAB/>Click Link<TAB/>xpath://SPAN[contains(text(),'${nodeText}')]/A<BR/>
      <BR/>
      *** Test Cases ***<BR/>
      Redirection<BR/>
      <TAB/>Open Browser<TAB/>https://mazure.fr<BR/>
      <TAB/>Wait Until Location Is<TAB/> https://mazure.fr/perso/main.html<BR/>
      <TAB/>[Teardown]<TAB/>Close Browser<BR/>
      <BR/>
      Access to site map<BR/>
      <TAB/>Open Browser<TAB/>https://mazure.fr/perso/main.html<BR/>
      <TAB/>Click Link<TAB/>id:goToMap<BR/>
      <TAB/>Title Should Be<TAB/>Site map<BR/>
      <TAB/>[Teardown]<TAB/>Close Browser<BR/>
      <BR/>
      Open and close site map nodes<BR/>
      <TAB/>Open Browser<TAB/>https://mazure.fr/content/map.html<BR/>
      <TAB/>Wait Until Page Contains<TAB/>Homepage<BR/>
      <TAB/>Element Should Not Be Visible<TAB/>link:Mathematicians<BR/>
      <TAB/>Click Map Link Node<TAB/>Homepage<BR/>
      <TAB/>Element Should Not Be Visible<TAB/>link:Mathematicians<BR/>
      <TAB/>#Click Link<TAB/>id:toggleDiv1<BR/>
      <TAB/>Click Map Text Node<TAB/>Links / articles<BR/>
      <TAB/>Element Should Not Be Visible<TAB/>link:Mathematicians<BR/>
      <TAB/>Click Map Link Node<TAB/>Encyclopedia<BR/>
      <TAB/>Element Should Not Be Visible<TAB/>link:Mathematicians<BR/>
      <TAB/>Click Map Link Node<TAB/>Mathematics<BR/>
      <TAB/>Element Should Be Visible<TAB/>link:Mathematicians<BR/>
      <TAB/>Click Map Link Node<TAB/>Encyclopedia<BR/>
      <TAB/>Element Should Not Be Visible<TAB/>link:Mathematicians<BR/>
      <TAB/>[Teardown]<TAB/>Close Browser</CODESAMPLE></ITEM>
  <ITEM>Saving the HTML source in a Selenium script
    <CODESAMPLE><TAB/>Library<TAB/><TAB/>&#160;&#160;OperatingSystem<BR/>
      …<BR/>
      <TAB/><TAB/>${source} =<TAB/>Get Source<BR/>
      <TAB/><TAB/>OperatingSystem.Create File<TAB/>${EXECDIR}/map_source.html<TAB/>${source}</CODESAMPLE></ITEM>
</BLIST>
<BLIST><TITLE><B><U>Browser Library</U></B></TITLE>
  <ITEM>to change the Browser language<BR/>
    <CODEROUTINE>New Context<TAB/>locale=en-US</CODEROUTINE> does not work<BR/>
    <CODEROUTINE>New Browser<TAB/>chromium<TAB/>headless=false<TAB/>args=['--lang=en']</CODEROUTINE> works for Chrome<BR/></ITEM>
</BLIST>
<BLIST><TITLE><B><U>Documentation</U></B></TITLE>
  <ITEM>create the HTML doc of a resource/robot file<BR/>
    <CODESAMPLE>python -m robot.libdoc -f html ./resources/page_objects/site/generic_page_object.resource report.html</CODESAMPLE>
    or
    <CODESAMPLE>libdoc -f html ./resources/page_objects/site/generic_page_object.resource report.html</CODESAMPLE></ITEM>
</BLIST>
</CONTENT>
<X><T>links</T><A>../links/autotest.html#robotframework</A><L>en</L><F>HTML</F></X>
</PAGE>